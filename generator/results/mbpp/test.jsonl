{"task_id": 0, "prompt": "def remove_Occ(s, ch):\n    \"\"\"\n    Write a python function to remove first and last occurrence of a given character from the string.\n    >>> remove_Occ('hello', 'l')\n    'heo'\n    >>> remove_Occ('abcda', 'a')\n    'bcd'\n    >>> remove_Occ('PHP', 'P')\n    'H'\n    \"\"\"\n    ", "canonical_solution": "def remove_Occ(s,ch): \r\n    for i in range(len(s)): \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    for i in range(len(s) - 1,-1,-1):  \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    return s ", "test": "def check(candidate):\n\tassert remove_Occ(\"hello\",\"l\") == \"heo\"\n\tassert remove_Occ(\"abcda\",\"a\") == \"bcd\"\n\tassert remove_Occ(\"PHP\",\"P\") == \"H\"", "entry_point": "remove_Occ"}
{"task_id": 1, "prompt": "def sort_matrix(M):\n    \"\"\"\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    >>> sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])\n    [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n    >>> sort_matrix([[1, 2, 3], [(- 2), 4, (- 5)], [1, (- 1), 1]])\n    [[(- 2), 4, (- 5)], [1, (- 1), 1], [1, 2, 3]]\n    >>> sort_matrix([[5, 8, 9], [6, 4, 3], [2, 1, 4]])\n    [[2, 1, 4], [6, 4, 3], [5, 8, 9]]\n    \"\"\"\n    ", "canonical_solution": "def sort_matrix(M):\r\n    result = sorted(M, key=sum)\r\n    return result", "test": "def check(candidate):\n\tassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\tassert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\n\tassert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]", "entry_point": "sort_matrix"}
{"task_id": 2, "prompt": "def count_common(words):\n    \"\"\"\n    Write a function to count the most common words in a dictionary.\n    >>> count_common(['red', 'green', 'black', 'pink', 'black', 'white', 'black', 'eyes', 'white', 'black', 'orange', 'pink', 'pink', 'red', 'red', 'white', 'orange', 'white', 'black', 'pink', 'green', 'green', 'pink', 'green', 'pink', 'white', 'orange', 'orange', 'red'])\n    [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n    >>> count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one'])\n    [('one', 4), ('two', 2), ('three', 2), ('four', 1)]\n    >>> count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon'])\n    [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]\n    \"\"\"\n    ", "canonical_solution": "from collections import Counter\r\ndef count_common(words):\r\n  word_counts = Counter(words)\r\n  top_four = word_counts.most_common(4)\r\n  return (top_four)\r\n", "test": "def check(candidate):\n\tassert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\n\tassert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]\n\tassert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]", "entry_point": "count_common"}
{"task_id": 3, "prompt": "def find_Volume(l, b, h):\n    \"\"\"\n    Write a python function to find the volume of a triangular prism.\n    >>> find_Volume(10, 8, 6)\n    240\n    >>> find_Volume(3, 2, 2)\n    6\n    >>> find_Volume(1, 2, 1)\n    1\n    \"\"\"\n    ", "canonical_solution": "def find_Volume(l,b,h) : \r\n    return ((l * b * h) / 2) ", "test": "def check(candidate):\n\tassert find_Volume(10,8,6) == 240\n\tassert find_Volume(3,2,2) == 6\n\tassert find_Volume(1,2,1) == 1", "entry_point": "find_Volume"}
{"task_id": 4, "prompt": "def split_lowerstring(text):\n    \"\"\"\n    Write a function to split a string at lowercase letters.\n    >>> split_lowerstring('AbCd')\n    ['bC', 'd']\n    >>> split_lowerstring('Python')\n    ['y', 't', 'h', 'o', 'n']\n    >>> split_lowerstring('Programming')\n    ['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']\n    \"\"\"\n    ", "canonical_solution": "import re\r\ndef split_lowerstring(text):\r\n return (re.findall('[a-z][^a-z]*', text))", "test": "def check(candidate):\n\tassert split_lowerstring(\"AbCd\")==['bC','d']\n\tassert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']\n\tassert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']", "entry_point": "split_lowerstring"}
{"task_id": 5, "prompt": "def text_lowercase_underscore(text):\n    \"\"\"\n    Write a function to find sequences of lowercase letters joined with an underscore.\n    >>> text_lowercase_underscore('aab_cbbbc')\n    'Found a match!'\n    >>> text_lowercase_underscore('aab_Abbbc')\n    'Not matched!'\n    >>> text_lowercase_underscore('Aaab_abbbc')\n    'Not matched!'\n    \"\"\"\n    ", "canonical_solution": "import re\r\ndef text_lowercase_underscore(text):\r\n        patterns = '^[a-z]+_[a-z]+$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "test": "def check(candidate):\n\tassert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\n\tassert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')\n\tassert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')", "entry_point": "text_lowercase_underscore"}
{"task_id": 6, "prompt": "def square_perimeter(a):\n    \"\"\"\n    Write a function to find the perimeter of a square.\n    >>> square_perimeter(10)\n    40\n    >>> square_perimeter(5)\n    20\n    >>> square_perimeter(4)\n    16\n    \"\"\"\n    ", "canonical_solution": "def square_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter", "test": "def check(candidate):\n\tassert square_perimeter(10)==40\n\tassert square_perimeter(5)==20\n\tassert square_perimeter(4)==16", "entry_point": "square_perimeter"}
{"task_id": 7, "prompt": "def remove_dirty_chars(string, second_string):\n    \"\"\"\n    Write a function to remove characters from the first string which are present in the second string.\n    >>> remove_dirty_chars('probasscurve', 'pros')\n    'bacuve'\n    >>> remove_dirty_chars('digitalindia', 'talent')\n    'digiidi'\n    >>> remove_dirty_chars('exoticmiles', 'toxic')\n    'emles'\n    \"\"\"\n    ", "canonical_solution": "NO_OF_CHARS = 256\r\ndef str_to_list(string): \r\n\ttemp = [] \r\n\tfor x in string: \r\n\t\ttemp.append(x) \r\n\treturn temp \r\ndef lst_to_string(List): \r\n\treturn ''.join(List) \r\ndef get_char_count_array(string): \r\n\tcount = [0] * NO_OF_CHARS \r\n\tfor i in string: \r\n\t\tcount[ord(i)] += 1\r\n\treturn count \r\ndef remove_dirty_chars(string, second_string): \r\n\tcount = get_char_count_array(second_string) \r\n\tip_ind = 0\r\n\tres_ind = 0\r\n\ttemp = '' \r\n\tstr_list = str_to_list(string) \r\n\twhile ip_ind != len(str_list): \r\n\t\ttemp = str_list[ip_ind] \r\n\t\tif count[ord(temp)] == 0: \r\n\t\t\tstr_list[res_ind] = str_list[ip_ind] \r\n\t\t\tres_ind += 1\r\n\t\tip_ind+=1\r\n\treturn lst_to_string(str_list[0:res_ind]) ", "test": "def check(candidate):\n\tassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\tassert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'\n\tassert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' ", "entry_point": "remove_dirty_chars"}
{"task_id": 8, "prompt": "def test_duplicate(arraynums):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    >>> test_duplicate([1, 2, 3, 4, 5])\n    False\n    >>> test_duplicate([1, 2, 3, 4, 4])\n    True\n    >>> test_duplicate([1, 1, 2, 2, 3, 3, 4, 4, 5])\n    True\n    \"\"\"\n    ", "canonical_solution": "def test_duplicate(arraynums):\r\n    nums_set = set(arraynums)    \r\n    return len(arraynums) != len(nums_set)     ", "test": "def check(candidate):\n\tassert test_duplicate(([1,2,3,4,5]))==False\n\tassert test_duplicate(([1,2,3,4, 4]))==True\n\tassert test_duplicate([1,1,2,2,3,3,4,4,5])==True", "entry_point": "test_duplicate"}
{"task_id": 9, "prompt": "def is_woodall(x):\n    \"\"\"\n    Write a function to check if the given number is woodball or not.\n    >>> is_woodall(383)\n    True\n    >>> is_woodall(254)\n    False\n    >>> is_woodall(200)\n    False\n    \"\"\"\n    ", "canonical_solution": "def is_woodall(x): \r\n\tif (x % 2 == 0): \r\n\t\treturn False\r\n\tif (x == 1): \r\n\t\treturn True\r\n\tx = x + 1 \r\n\tp = 0\r\n\twhile (x % 2 == 0): \r\n\t\tx = x/2\r\n\t\tp = p + 1\r\n\t\tif (p == x): \r\n\t\t\treturn True\r\n\treturn False", "test": "def check(candidate):\n\tassert is_woodall(383) == True\n\tassert is_woodall(254) == False\n\tassert is_woodall(200) == False", "entry_point": "is_woodall"}
{"task_id": 10, "prompt": "def multiples_of_num(m, n):\n    \"\"\"\n    Write a function to find m number of multiples of n.\n    >>> multiples_of_num(4, 3)\n    [3, 6, 9, 12]\n    >>> multiples_of_num(2, 5)\n    [5, 10]\n    >>> multiples_of_num(9, 2)\n    [2, 4, 6, 8, 10, 12, 14, 16, 18]\n    \"\"\"\n    ", "canonical_solution": "def multiples_of_num(m,n): \r\n    multiples_of_num= list(range(n,(m+1)*n, n)) \r\n    return list(multiples_of_num)", "test": "def check(candidate):\n\tassert multiples_of_num(4,3)== [3,6,9,12]\n\tassert multiples_of_num(2,5)== [5,10]\n\tassert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]", "entry_point": "multiples_of_num"}
{"task_id": 11, "prompt": "def find_first_duplicate(nums):\n    \"\"\"\n    Write a function to find the first duplicate element in a given array of integers.\n    >>> find_first_duplicate([1, 2, 3, 4, 4, 5])\n    4\n    >>> find_first_duplicate([1, 2, 3, 4])\n    (- 1)\n    >>> find_first_duplicate([1, 1, 2, 3, 3, 2, 2])\n    1\n    \"\"\"\n    ", "canonical_solution": "def find_first_duplicate(nums):\r\n    num_set = set()\r\n    no_duplicate = -1\r\n\r\n    for i in range(len(nums)):\r\n\r\n        if nums[i] in num_set:\r\n            return nums[i]\r\n        else:\r\n            num_set.add(nums[i])\r\n\r\n    return no_duplicate", "test": "def check(candidate):\n\tassert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\n\tassert find_first_duplicate([1, 2, 3, 4])==-1\n\tassert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1", "entry_point": "find_first_duplicate"}
{"task_id": 12, "prompt": "def maximum_Sum(list1):\n    \"\"\"\n    Write a python function to find the maximum sum of elements of list in a list of lists.\n    >>> maximum_Sum([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]])\n    33\n    >>> maximum_Sum([[0, 1, 1], [1, 1, 2], [3, 2, 1]])\n    6\n    >>> maximum_Sum([[0, 1, 3], [1, 2, 1], [9, 8, 2], [0, 1, 0], [6, 4, 8]])\n    19\n    \"\"\"\n    ", "canonical_solution": "def maximum_Sum(list1): \r\n    maxi = -100000\r\n    for x in list1: \r\n        sum = 0 \r\n        for y in x: \r\n            sum+= y      \r\n        maxi = max(sum,maxi)     \r\n    return maxi ", "test": "def check(candidate):\n\tassert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\n\tassert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6\n\tassert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19", "entry_point": "maximum_Sum"}
{"task_id": 13, "prompt": "def binary_to_decimal(binary):\n    \"\"\"\n    Write a function to convert the given binary number to its decimal equivalent.\n    >>> binary_to_decimal(100)\n    4\n    >>> binary_to_decimal(1011)\n    11\n    >>> binary_to_decimal(1101101)\n    109\n    \"\"\"\n    ", "canonical_solution": "def binary_to_decimal(binary): \r\n    binary1 = binary \r\n    decimal, i, n = 0, 0, 0\r\n    while(binary != 0): \r\n        dec = binary % 10\r\n        decimal = decimal + dec * pow(2, i) \r\n        binary = binary//10\r\n        i += 1\r\n    return (decimal)", "test": "def check(candidate):\n\tassert binary_to_decimal(100) == 4\n\tassert binary_to_decimal(1011) == 11\n\tassert binary_to_decimal(1101101) == 109", "entry_point": "binary_to_decimal"}
{"task_id": 14, "prompt": "def find_Product(arr, n):\n    \"\"\"\n    Write a python function to find the product of non-repeated elements in a given array.\n    >>> find_Product([1, 1, 2, 3], 4)\n    6\n    >>> find_Product([1, 2, 3, 1, 1], 5)\n    6\n    >>> find_Product([1, 1, 4, 5, 6], 5)\n    120\n    \"\"\"\n    ", "canonical_solution": "def find_Product(arr,n): \r\n    arr.sort() \r\n    prod = 1\r\n    for i in range(0,n,1): \r\n        if (arr[i - 1] != arr[i]): \r\n            prod = prod * arr[i] \r\n    return prod; ", "test": "def check(candidate):\n\tassert find_Product([1,1,2,3],4) == 6\n\tassert find_Product([1,2,3,1,1],5) == 6\n\tassert find_Product([1,1,4,5,6],5) == 120", "entry_point": "find_Product"}
{"task_id": 15, "prompt": "def check_k_elements(test_list, K):\n    \"\"\"\n    Write a function to check if the given tuple list has all k elements.\n    >>> check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4,)], 4)\n    True\n    >>> check_k_elements([(7, 7, 7), (7, 7)], 7)\n    True\n    >>> check_k_elements([(9, 9), (9, 9, 9, 9)], 7)\n    False\n    \"\"\"\n    ", "canonical_solution": "def check_k_elements(test_list, K):\r\n  res = True\r\n  for tup in test_list:\r\n    for ele in tup:\r\n      if ele != K:\r\n        res = False\r\n  return (res) ", "test": "def check(candidate):\n\tassert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\n\tassert check_k_elements([(7, 7, 7), (7, 7)], 7) == True\n\tassert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False", "entry_point": "check_k_elements"}
{"task_id": 16, "prompt": "def remove(list):\n    \"\"\"\n    Write a python function to remove all digits from a list of strings.\n    >>> remove(['4words', '3letters', '4digits'])\n    ['words', 'letters', 'digits']\n    >>> remove(['28Jan', '12Jan', '11Jan'])\n    ['Jan', 'Jan', 'Jan']\n    >>> remove(['wonder1', 'wonder2', 'wonder3'])\n    ['wonder', 'wonder', 'wonder']\n    \"\"\"\n    ", "canonical_solution": "import re  \r\ndef remove(list): \r\n    pattern = '[0-9]'\r\n    list = [re.sub(pattern, '', i) for i in list] \r\n    return list", "test": "def check(candidate):\n\tassert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\n\tassert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']\n\tassert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']", "entry_point": "remove"}
{"task_id": 17, "prompt": "def binomial_Coeff(n, k):\n    \"\"\"\n    Write a python function to find binomial co-efficient.\n    >>> binomial_Coeff(5, 2)\n    10\n    >>> binomial_Coeff(4, 3)\n    4\n    >>> binomial_Coeff(3, 2)\n    3\n    \"\"\"\n    ", "canonical_solution": "def binomial_Coeff(n,k): \r\n    if k > n : \r\n       return 0\r\n    if k==0 or k ==n : \r\n        return 1 \r\n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) ", "test": "def check(candidate):\n\tassert binomial_Coeff(5,2) == 10\n\tassert binomial_Coeff(4,3) == 4\n\tassert binomial_Coeff(3,2) == 3", "entry_point": "binomial_Coeff"}
{"task_id": 18, "prompt": "def get_Odd_Occurrence(arr, arr_size):\n    \"\"\"\n    Write a python function to find the element occurring odd number of times.\n    >>> get_Odd_Occurrence([1, 2, 3, 1, 2, 3, 1], 7)\n    1\n    >>> get_Odd_Occurrence([1, 2, 3, 2, 3, 1, 3], 7)\n    3\n    >>> get_Odd_Occurrence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13)\n    5\n    \"\"\"\n    ", "canonical_solution": "def get_Odd_Occurrence(arr,arr_size):   \r\n    for i in range(0,arr_size): \r\n        count = 0\r\n        for j in range(0,arr_size): \r\n            if arr[i] == arr[j]: \r\n                count+=1     \r\n        if (count % 2 != 0): \r\n            return arr[i]     \r\n    return -1", "test": "def check(candidate):\n\tassert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\n\tassert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3\n\tassert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5", "entry_point": "get_Odd_Occurrence"}
{"task_id": 19, "prompt": "def count_Substring_With_Equal_Ends(s):\n    \"\"\"\n    Write a python function to count all the substrings starting and ending with same characters.\n    >>> count_Substring_With_Equal_Ends('abc')\n    3\n    >>> count_Substring_With_Equal_Ends('abcda')\n    6\n    >>> count_Substring_With_Equal_Ends('ab')\n    2\n    \"\"\"\n    ", "canonical_solution": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n): \r\n        for j in range(1,n-i+1):  \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; ", "test": "def check(candidate):\n\tassert count_Substring_With_Equal_Ends(\"abc\") == 3\n\tassert count_Substring_With_Equal_Ends(\"abcda\") == 6\n\tassert count_Substring_With_Equal_Ends(\"ab\") == 2", "entry_point": "count_Substring_With_Equal_Ends"}
{"task_id": 20, "prompt": "def func(nums, k):\n    \"\"\"\n    Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\n    >>> func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]], 3)\n    [5, 7, 1]\n    >>> func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]], 1)\n    [1]\n    >>> func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]], 5)\n    [6, 5, 7, 8, 1]\n    \"\"\"\n    ", "canonical_solution": "def func(nums, k):\r\n    import collections\r\n    d = collections.defaultdict(int)\r\n    for row in nums:\r\n        for i in row:\r\n            d[i] += 1\r\n    temp = []\r\n    import heapq\r\n    for key, v in d.items():\r\n        if len(temp) < k:\r\n            temp.append((v, key))\r\n            if len(temp) == k:\r\n                heapq.heapify(temp)\r\n        else:\r\n            if v > temp[0][0]:\r\n                heapq.heappop(temp)\r\n                heapq.heappush(temp, (v, key))\r\n    result = []\r\n    while temp:\r\n        v, key = heapq.heappop(temp)\r\n        result.append(key)\r\n    return result", "test": "def check(candidate):\n\tassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\n\tassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]\n\tassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]", "entry_point": "func"}
{"task_id": 21, "prompt": "def max_Prime_Factors(n):\n    \"\"\"\n    Write a python function to find the largest prime factor of a given number.\n    >>> max_Prime_Factors(15)\n    5\n    >>> max_Prime_Factors(6)\n    3\n    >>> max_Prime_Factors(2)\n    2\n    \"\"\"\n    ", "canonical_solution": "import math \r\ndef max_Prime_Factors (n): \r\n    maxPrime = -1 \r\n    while n%2 == 0: \r\n        maxPrime = 2\r\n        n >>= 1    \r\n    for i in range(3,int(math.sqrt(n))+1,2): \r\n        while n % i == 0: \r\n            maxPrime = i \r\n            n = n / i \r\n    if n > 2: \r\n        maxPrime = n  \r\n    return int(maxPrime)", "test": "def check(candidate):\n\tassert max_Prime_Factors(15) == 5\n\tassert max_Prime_Factors(6) == 3\n\tassert max_Prime_Factors(2) == 2", "entry_point": "max_Prime_Factors"}
{"task_id": 22, "prompt": "def decimal_To_Binary(N):\n    \"\"\"\n    Write a python function to convert a decimal number to binary number.\n    >>> decimal_To_Binary(10)\n    1010\n    >>> decimal_To_Binary(1)\n    1\n    >>> decimal_To_Binary(20)\n    10100\n    \"\"\"\n    ", "canonical_solution": "def decimal_To_Binary(N): \r\n    B_Number = 0\r\n    cnt = 0\r\n    while (N != 0): \r\n        rem = N % 2\r\n        c = pow(10,cnt)  \r\n        B_Number += rem*c  \r\n        N //= 2 \r\n        cnt += 1\r\n    return B_Number  ", "test": "def check(candidate):\n\tassert decimal_To_Binary(10) == 1010\n\tassert decimal_To_Binary(1) == 1\n\tassert decimal_To_Binary(20) == 10100", "entry_point": "decimal_To_Binary"}
{"task_id": 23, "prompt": "def find_missing(ar, N):\n    \"\"\"\n    Write a python function to find the missing number in a sorted array.\n    >>> find_missing([1, 2, 3, 5], 4)\n    4\n    >>> find_missing([1, 3, 4, 5], 4)\n    2\n    >>> find_missing([1, 2, 3, 5, 6, 7], 5)\n    4\n    \"\"\"\n    ", "canonical_solution": "def find_missing(ar,N): \r\n    l = 0\r\n    r = N - 1\r\n    while (l <= r):  \r\n        mid = (l + r) / 2\r\n        mid= int (mid) \r\n        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): \r\n            return (mid + 1)  \r\n        elif (ar[mid] != mid + 1): \r\n            r = mid - 1 \r\n        else: \r\n            l = mid + 1\r\n    return (-1) ", "test": "def check(candidate):\n\tassert find_missing([1,2,3,5],4) == 4\n\tassert find_missing([1,3,4,5],4) == 2\n\tassert find_missing([1,2,3,5,6,7],5) == 4", "entry_point": "find_missing"}
{"task_id": 24, "prompt": "def find_rect_num(n):\n    \"\"\"\n    Write a function to find the n-th rectangular number.\n    >>> find_rect_num(4)\n    20\n    >>> find_rect_num(5)\n    30\n    >>> find_rect_num(6)\n    42\n    \"\"\"\n    ", "canonical_solution": "def find_rect_num(n):\r\n  return n*(n + 1) ", "test": "def check(candidate):\n\tassert find_rect_num(4) == 20\n\tassert find_rect_num(5) == 30\n\tassert find_rect_num(6) == 42", "entry_point": "find_rect_num"}
{"task_id": 25, "prompt": "def find_Nth_Digit(p, q, N):\n    \"\"\"\n    Write a python function to find the nth digit in the proper fraction of two given numbers.\n    >>> find_Nth_Digit(1, 2, 1)\n    5\n    >>> find_Nth_Digit(3, 5, 1)\n    6\n    >>> find_Nth_Digit(5, 6, 5)\n    3\n    \"\"\"\n    ", "canonical_solution": "def find_Nth_Digit(p,q,N) :  \r\n    while (N > 0) : \r\n        N -= 1;  \r\n        p *= 10;  \r\n        res = p // q;  \r\n        p %= q;  \r\n    return res;  ", "test": "def check(candidate):\n\tassert find_Nth_Digit(1,2,1) == 5\n\tassert find_Nth_Digit(3,5,1) == 6\n\tassert find_Nth_Digit(5,6,5) == 3", "entry_point": "find_Nth_Digit"}
{"task_id": 26, "prompt": "def sort_mixed_list(mixed_list):\n    \"\"\"\n    Write a function to sort a given mixed list of integers and strings.\n    >>> sort_mixed_list([19, 'red', 12, 'green', 'blue', 10, 'white', 'green', 1])\n    [1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n    >>> sort_mixed_list([19, 'red', 12, 'green', 'blue', 10, 'white', 'green', 1])\n    [1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n    >>> sort_mixed_list([19, 'red', 12, 'green', 'blue', 10, 'white', 'green', 1])\n    [1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n    \"\"\"\n    ", "canonical_solution": "def sort_mixed_list(mixed_list):\r\n    int_part = sorted([i for i in mixed_list if type(i) is int])\r\n    str_part = sorted([i for i in mixed_list if type(i) is str])\r\n    return int_part + str_part", "test": "def check(candidate):\n\tassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\tassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\n\tassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']", "entry_point": "sort_mixed_list"}
{"task_id": 27, "prompt": "def div_even_odd(list1):\n    \"\"\"\n    Write a function to find the division of first even and odd number of a given list.\n    >>> div_even_odd([1, 3, 5, 7, 4, 1, 6, 8])\n    4\n    >>> div_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    2\n    >>> div_even_odd([1, 5, 7, 9, 10])\n    10\n    \"\"\"\n    ", "canonical_solution": "def div_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even/first_odd)", "test": "def check(candidate):\n\tassert div_even_odd([1,3,5,7,4,1,6,8])==4\n\tassert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2\n\tassert div_even_odd([1,5,7,9,10])==10", "entry_point": "div_even_odd"}
{"task_id": 28, "prompt": "def rearange_string(S):\n    \"\"\"\n    Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\n    >>> rearange_string('aab')\n    'aba'\n    >>> rearange_string('aabb')\n    'abab'\n    >>> rearange_string('abccdd')\n    'cdabcd'\n    \"\"\"\n    ", "canonical_solution": "import heapq\r\nfrom collections import Counter\r\ndef rearange_string(S):\r\n    ctr = Counter(S)\r\n    heap = [(-value, key) for key, value in ctr.items()]\r\n    heapq.heapify(heap)\r\n    if (-heap[0][0]) * 2 > len(S) + 1: \r\n        return \"\"\r\n    ans = []\r\n    while len(heap) >= 2:\r\n        nct1, char1 = heapq.heappop(heap)\r\n        nct2, char2 = heapq.heappop(heap)\r\n        ans.extend([char1, char2])\r\n        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))\r\n        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))\r\n    return \"\".join(ans) + (heap[0][1] if heap else \"\")", "test": "def check(candidate):\n\tassert rearange_string(\"aab\")==('aba')\n\tassert rearange_string(\"aabb\")==('abab')\n\tassert rearange_string(\"abccdd\")==('cdabcd')", "entry_point": "rearange_string"}
{"task_id": 29, "prompt": "def freq_element(nums):\n    \"\"\"\n    Write a function to find frequency of the elements in a given list of lists using collections module.\n    >>> freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])\n    {2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1}\n    >>> freq_element([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\n    {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1}\n    >>> freq_element([[15, 20, 30, 40], [80, 90, 100, 110], [30, 30, 80, 90]])\n    {30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1}\n    \"\"\"\n    ", "canonical_solution": "from collections import Counter\r\nfrom itertools import chain\r\ndef freq_element(nums):\r\n  result = Counter(chain.from_iterable(nums))\r\n  return result", "test": "def check(candidate):\n\tassert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\n\tassert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})\n\tassert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})", "entry_point": "freq_element"}
{"task_id": 30, "prompt": "def filter_evennumbers(nums):\n    \"\"\"\n    Write a function to filter even numbers using lambda function.\n    >>> filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    [2, 4, 6, 8, 10]\n    >>> filter_evennumbers([10, 20, 45, 67, 84, 93])\n    [10, 20, 84]\n    >>> filter_evennumbers([5, 7, 9, 8, 6, 4, 3])\n    [8, 6, 4]\n    \"\"\"\n    ", "canonical_solution": "def filter_evennumbers(nums):\r\n even_nums = list(filter(lambda x: x%2 == 0, nums))\r\n return even_nums", "test": "def check(candidate):\n\tassert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\n\tassert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]\n\tassert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]", "entry_point": "filter_evennumbers"}
{"task_id": 31, "prompt": "def find_Sum(arr, n):\n    \"\"\"\n    Write a python function to find the sum of repeated elements in a given array.\n    >>> find_Sum([1, 2, 3, 1, 1, 4, 5, 6], 8)\n    3\n    >>> find_Sum([1, 2, 3, 1, 1], 5)\n    3\n    >>> find_Sum([1, 1, 2], 3)\n    2\n    \"\"\"\n    ", "canonical_solution": "def find_Sum(arr,n): \r\n    return sum([x for x in arr if arr.count(x) > 1])", "test": "def check(candidate):\n\tassert find_Sum([1,2,3,1,1,4,5,6],8) == 3\n\tassert find_Sum([1,2,3,1,1],5) == 3\n\tassert find_Sum([1,1,2],3) == 2", "entry_point": "find_Sum"}
{"task_id": 32, "prompt": "def text_match(text):\n    \"\"\"\n    Write a function to find sequences of lowercase letters joined with an underscore using regex.\n    >>> text_match('aab_cbbbc')\n    'Found a match!'\n    >>> text_match('aab_Abbbc')\n    'Not matched!'\n    >>> text_match('Aaab_abbbc')\n    'Not matched!'\n    \"\"\"\n    ", "canonical_solution": "import re\r\ndef text_match(text):\r\n  patterns = '^[a-z]+_[a-z]+$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')", "test": "def check(candidate):\n\tassert text_match(\"aab_cbbbc\") == 'Found a match!'\n\tassert text_match(\"aab_Abbbc\") == 'Not matched!'\n\tassert text_match(\"Aaab_abbbc\") == 'Not matched!'", "entry_point": "text_match"}
{"task_id": 33, "prompt": "def text_match_string(text):\n    \"\"\"\n    Write a function that matches a word at the beginning of a string.\n    >>> text_match_string(' python')\n    'Not matched!'\n    >>> text_match_string('python')\n    'Found a match!'\n    >>> text_match_string('  lang')\n    'Not matched!'\n    \"\"\"\n    ", "canonical_solution": "import re\r\ndef text_match_string(text):\r\n        patterns = '^\\w+'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'", "test": "def check(candidate):\n\tassert text_match_string(\" python\")==('Not matched!')\n\tassert text_match_string(\"python\")==('Found a match!')\n\tassert text_match_string(\"  lang\")==('Not matched!')", "entry_point": "text_match_string"}
{"task_id": 34, "prompt": "def get_gcd(l):\n    \"\"\"\n    Write a function to find the gcd of the given array elements.\n    >>> get_gcd([2, 4, 6, 8, 16])\n    2\n    >>> get_gcd([1, 2, 3])\n    1\n    >>> get_gcd([2, 4, 6, 8])\n    2\n    \"\"\"\n    ", "canonical_solution": "def find_gcd(x, y): \r\n\twhile(y): \r\n\t\tx, y = y, x % y \r\n\treturn x \r\ndef get_gcd(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  gcd = find_gcd(num1, num2)\r\n  for i in range(2, len(l)):\r\n    gcd = find_gcd(gcd, l[i])\r\n  return gcd", "test": "def check(candidate):\n\tassert get_gcd([2, 4, 6, 8, 16]) == 2\n\tassert get_gcd([1, 2, 3]) == 1\n\tassert get_gcd([2, 4, 6, 8]) == 2 ", "entry_point": "get_gcd"}
{"task_id": 35, "prompt": "def test_distinct(data):\n    \"\"\"\n    Write a python function to determine whether all the numbers are different from each other are not.\n    >>> test_distinct([1, 5, 7, 9])\n    True\n    >>> test_distinct([2, 4, 5, 5, 7, 9])\n    False\n    >>> test_distinct([1, 2, 3])\n    True\n    \"\"\"\n    ", "canonical_solution": "def test_distinct(data):\r\n  if len(data) == len(set(data)):\r\n    return True\r\n  else:\r\n    return False;", "test": "def check(candidate):\n\tassert test_distinct([1,5,7,9]) == True\n\tassert test_distinct([2,4,5,5,7,9]) == False\n\tassert test_distinct([1,2,3]) == True", "entry_point": "test_distinct"}
{"task_id": 36, "prompt": "def compute_Last_Digit(A, B):\n    \"\"\"\n    Write a python function to find the last digit when factorial of a divides factorial of b.\n    >>> compute_Last_Digit(2, 4)\n    2\n    >>> compute_Last_Digit(6, 8)\n    6\n    >>> compute_Last_Digit(1, 2)\n    2\n    \"\"\"\n    ", "canonical_solution": "def compute_Last_Digit(A,B): \r\n    variable = 1\r\n    if (A == B): \r\n        return 1\r\n    elif ((B - A) >= 5):  \r\n        return 0\r\n    else:   \r\n        for i in range(A + 1,B + 1): \r\n            variable = (variable * (i % 10)) % 10\r\n        return variable % 10", "test": "def check(candidate):\n\tassert compute_Last_Digit(2,4) == 2\n\tassert compute_Last_Digit(6,8) == 6\n\tassert compute_Last_Digit(1,2) == 2", "entry_point": "compute_Last_Digit"}
{"task_id": 37, "prompt": "def odd_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all odd bits of a given number.\n    >>> odd_bit_set_number(10)\n    15\n    >>> odd_bit_set_number(20)\n    21\n    >>> odd_bit_set_number(30)\n    31\n    \"\"\"\n    ", "canonical_solution": "def odd_bit_set_number(n):\r\n    count = 0;res = 0;temp = n\r\n    while temp > 0:\r\n        if count % 2 == 0:\r\n            res |= (1 << count)\r\n        count += 1\r\n        temp >>= 1\r\n    return (n | res)", "test": "def check(candidate):\n\tassert odd_bit_set_number(10) == 15\n\tassert odd_bit_set_number(20) == 21\n\tassert odd_bit_set_number(30) == 31", "entry_point": "odd_bit_set_number"}
{"task_id": 38, "prompt": "def specified_element(nums, N):\n    \"\"\"\n    Write a function to extract every first or specified element from a given two-dimensional list.\n    >>> specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 0)\n    [1, 4, 7]\n    >>> specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 2)\n    [3, 6, 9]\n    >>> specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 1)\n    [2, 5, 1]\n    \"\"\"\n    ", "canonical_solution": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result\r\n    ", "test": "def check(candidate):\n\tassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\tassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]\n\tassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]", "entry_point": "specified_element"}
{"task_id": 39, "prompt": "def min_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with minimum length using lambda function.\n    >>> min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n    (1, [0])\n    >>> min_length_list([[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3], [1, 2], [1]])\n    (1, [1])\n    >>> min_length_list([[3, 4, 5], [6, 7, 8, 9], [10, 11, 12], [1, 2]])\n    (2, [1, 2])\n    \"\"\"\n    ", "canonical_solution": "def min_length_list(input_list):\r\n    min_length = min(len(x) for x in input_list )  \r\n    min_list = min(input_list, key = lambda i: len(i))\r\n    return(min_length, min_list)", "test": "def check(candidate):\n\tassert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\n\tassert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])\n\tassert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])", "entry_point": "min_length_list"}
{"task_id": 40, "prompt": "def check_equilateral(x, y, z):\n    \"\"\"\n    Write a function to print check if the triangle is equilateral or not.\n    >>> check_equilateral(6, 8, 12)\n    False\n    >>> check_equilateral(6, 6, 12)\n    False\n    >>> check_equilateral(6, 6, 6)\n    True\n    \"\"\"\n    ", "canonical_solution": "def check_equilateral(x,y,z):\r\n  if x == y == z:\r\n\t   return True\r\n  else:\r\n     return False", "test": "def check(candidate):\n\tassert check_equilateral(6,8,12)==False \n\tassert check_equilateral(6,6,12)==False\n\tassert check_equilateral(6,6,6)==True", "entry_point": "check_equilateral"}
{"task_id": 41, "prompt": "def parallelogram_area(b, h):\n    \"\"\"\n    Write a function to caluclate area of a parallelogram.\n    >>> parallelogram_area(10, 20)\n    200\n    >>> parallelogram_area(15, 20)\n    300\n    >>> parallelogram_area(8, 9)\n    72\n    \"\"\"\n    ", "canonical_solution": "def parallelogram_area(b,h):\r\n  area=b*h\r\n  return area", "test": "def check(candidate):\n\tassert parallelogram_area(10,20)==200\n\tassert parallelogram_area(15,20)==300\n\tassert parallelogram_area(8,9)==72", "entry_point": "parallelogram_area"}
{"task_id": 42, "prompt": "def check_Equality(str):\n    \"\"\"\n    Write a python function to check whether the first and last characters of a given string are equal or not.\n    >>> check_Equality('abcda')\n    'Equal'\n    >>> check_Equality('ab')\n    'Not Equal'\n    >>> check_Equality('mad')\n    'Not Equal'\n    \"\"\"\n    ", "canonical_solution": "def check_Equality(str):\r\n  if (str[0] == str[-1]):  \r\n    return (\"Equal\") \r\n  else:  \r\n    return (\"Not Equal\") ", "test": "def check(candidate):\n\tassert check_Equality(\"abcda\") == \"Equal\"\n\tassert check_Equality(\"ab\") == \"Not Equal\"\n\tassert check_Equality(\"mad\") == \"Not Equal\"", "entry_point": "check_Equality"}
{"task_id": 43, "prompt": "def counting_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using counting sort.\n    >>> counting_sort([1, 23, 4, 5, 6, 7, 8])\n    [1, 4, 5, 6, 7, 8, 23]\n    >>> counting_sort([12, 9, 28, 33, 69, 45])\n    [9, 12, 28, 33, 45, 69]\n    >>> counting_sort([8, 4, 14, 3, 2, 1])\n    [1, 2, 3, 4, 8, 14]\n    \"\"\"\n    ", "canonical_solution": "def counting_sort(my_list):\r\n    max_value = 0\r\n    for i in range(len(my_list)):\r\n        if my_list[i] > max_value:\r\n            max_value = my_list[i]\r\n    buckets = [0] * (max_value + 1)\r\n    for i in my_list:\r\n        buckets[i] += 1\r\n    i = 0\r\n    for j in range(max_value + 1):\r\n         for a in range(buckets[j]):\r\n             my_list[i] = j\r\n             i += 1\r\n    return my_list", "test": "def check(candidate):\n\tassert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\n\tassert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]\n\tassert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]", "entry_point": "counting_sort"}
{"task_id": 44, "prompt": "def tn_gp(a, n, r):\n    \"\"\"\n    Write a function to find t-nth term of geometric series.\n    >>> tn_gp(1, 5, 2)\n    16\n    >>> tn_gp(1, 5, 4)\n    256\n    >>> tn_gp(2, 6, 3)\n    486\n    \"\"\"\n    ", "canonical_solution": "import math\r\ndef tn_gp(a,n,r):\r\n  tn = a * (math.pow(r, n - 1))\r\n  return tn", "test": "def check(candidate):\n\tassert tn_gp(1,5,2)==16\n\tassert tn_gp(1,5,4)==256\n\tassert tn_gp(2,6,3)==486", "entry_point": "tn_gp"}
{"task_id": 45, "prompt": "def check(n):\n    \"\"\"\n    Write a python function to check if a given number is one less than twice its reverse.\n    >>> check(70)\n    False\n    >>> check(23)\n    False\n    >>> check(73)\n    True\n    \"\"\"\n    ", "canonical_solution": "def rev(num):    \r\n    rev_num = 0\r\n    while (num > 0):  \r\n        rev_num = (rev_num * 10 + num % 10) \r\n        num = num // 10  \r\n    return rev_num  \r\ndef check(n):    \r\n    return (2 * rev(n) == n + 1)  ", "test": "def check(candidate):\n\tassert check(70) == False\n\tassert check(23) == False\n\tassert check(73) == True", "entry_point": "check"}
{"task_id": 46, "prompt": "def find_Max_Num(arr, n):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given digits.\n    >>> find_Max_Num([1, 2, 3], 3)\n    321\n    >>> find_Max_Num([4, 5, 6, 1], 4)\n    6541\n    >>> find_Max_Num([1, 2, 3, 9], 4)\n    9321\n    \"\"\"\n    ", "canonical_solution": "def find_Max_Num(arr,n) : \r\n    arr.sort(reverse = True) \r\n    num = arr[0] \r\n    for i in range(1,n) : \r\n        num = num * 10 + arr[i] \r\n    return num ", "test": "def check(candidate):\n\tassert find_Max_Num([1,2,3],3) == 321\n\tassert find_Max_Num([4,5,6,1],4) == 6541\n\tassert find_Max_Num([1,2,3,9],4) == 9321", "entry_point": "find_Max_Num"}
{"task_id": 47, "prompt": "def opposite_Signs(x, y):\n    \"\"\"\n    Write a python function to check whether the given two integers have opposite sign or not.\n    >>> opposite_Signs(1, (- 2))\n    True\n    >>> opposite_Signs(3, 2)\n    False\n    >>> opposite_Signs((- 10), (- 10))\n    False\n    \"\"\"\n    ", "canonical_solution": "def opposite_Signs(x,y): \r\n    return ((x ^ y) < 0); ", "test": "def check(candidate):\n\tassert opposite_Signs(1,-2) == True\n\tassert opposite_Signs(3,2) == False\n\tassert opposite_Signs(-10,-10) == False", "entry_point": "opposite_Signs"}
{"task_id": 48, "prompt": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    >>> is_octagonal(5)\n    65\n    >>> is_octagonal(10)\n    280\n    >>> is_octagonal(15)\n    645\n    \"\"\"\n    ", "canonical_solution": "def is_octagonal(n): \r\n\treturn 3 * n * n - 2 * n ", "test": "def check(candidate):\n\tassert is_octagonal(5) == 65\n\tassert is_octagonal(10) == 280\n\tassert is_octagonal(15) == 645", "entry_point": "is_octagonal"}
{"task_id": 49, "prompt": "def max_len_sub(arr, n):\n    \"\"\"\n    Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\n    >>> max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8)\n    5\n    >>> max_len_sub([(- 2), (- 1), 5, (- 1), 4, 0, 3], 7)\n    4\n    >>> max_len_sub([9, 11, 13, 15, 18], 5)\n    1\n    \"\"\"\n    ", "canonical_solution": "def max_len_sub( arr, n): \r\n\tmls=[] \r\n\tmax = 0\r\n\tfor i in range(n): \r\n\t\tmls.append(1) \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): \r\n\t\t\t\tmls[i] = mls[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mls[i]): \r\n\t\t\tmax = mls[i] \r\n\treturn max", "test": "def check(candidate):\n\tassert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\n\tassert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4\n\tassert max_len_sub([9, 11, 13, 15, 18], 5) == 1", "entry_point": "max_len_sub"}
{"task_id": 50, "prompt": "def count_Substrings(s, n):\n    \"\"\"\n    Write a python function to count number of substrings with the sum of digits equal to their length.\n    >>> count_Substrings('112112', 6)\n    6\n    >>> count_Substrings('111', 3)\n    6\n    >>> count_Substrings('1101112', 7)\n    12\n    \"\"\"\n    ", "canonical_solution": "from collections import defaultdict\r\ndef count_Substrings(s,n):\r\n    count,sum = 0,0\r\n    mp = defaultdict(lambda : 0)\r\n    mp[0] += 1\r\n    for i in range(n):\r\n        sum += ord(s[i]) - ord('0')\r\n        count += mp[sum - (i + 1)]\r\n        mp[sum - (i + 1)] += 1\r\n    return count", "test": "def check(candidate):\n\tassert count_Substrings('112112',6) == 6\n\tassert count_Substrings('111',3) == 6\n\tassert count_Substrings('1101112',7) == 12", "entry_point": "count_Substrings"}
{"task_id": 51, "prompt": "def smallest_num(xs):\n    \"\"\"\n    Write a python function to find smallest number in a list.\n    >>> smallest_num([10, 20, 1, 45, 99])\n    1\n    >>> smallest_num([1, 2, 3])\n    1\n    >>> smallest_num([45, 46, 50, 60])\n    45\n    \"\"\"\n    ", "canonical_solution": "def smallest_num(xs):\n  return min(xs)\n", "test": "def check(candidate):\n\tassert smallest_num([10, 20, 1, 45, 99]) == 1\n\tassert smallest_num([1, 2, 3]) == 1\n\tassert smallest_num([45, 46, 50, 60]) == 45", "entry_point": "smallest_num"}
{"task_id": 52, "prompt": "def max_difference(test_list):\n    \"\"\"\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    >>> max_difference([(3, 5), (1, 7), (10, 3), (1, 2)])\n    7\n    >>> max_difference([(4, 6), (2, 17), (9, 13), (11, 12)])\n    15\n    >>> max_difference([(12, 35), (21, 27), (13, 23), (41, 22)])\n    23\n    \"\"\"\n    ", "canonical_solution": "def max_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = max(temp)\r\n  return (res) ", "test": "def check(candidate):\n\tassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\n\tassert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15\n\tassert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23", "entry_point": "max_difference"}
{"task_id": 53, "prompt": "def subject_marks(subjectmarks):\n    \"\"\"\n    Write a function to sort a list of tuples using lambda.\n    >>> subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n    [('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n    >>> subject_marks([('Telugu', 49), ('Hindhi', 54), ('Social', 33)])\n    [('Social', 33), ('Telugu', 49), ('Hindhi', 54)]\n    >>> subject_marks([('Physics', 96), ('Chemistry', 97), ('Biology', 45)])\n    [('Biology', 45), ('Physics', 96), ('Chemistry', 97)]\n    \"\"\"\n    ", "canonical_solution": "def subject_marks(subjectmarks):\r\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\r\n subjectmarks.sort(key = lambda x: x[1])\r\n return subjectmarks", "test": "def check(candidate):\n\tassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\tassert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])\n\tassert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])", "entry_point": "subject_marks"}
{"task_id": 54, "prompt": "def recursive_list_sum(data_list):\n    \"\"\"\n    Write a function of recursion list sum.\n    >>> recursive_list_sum([1, 2, [3, 4], [5, 6]])\n    21\n    >>> recursive_list_sum([7, 10, [15, 14], [19, 41]])\n    106\n    >>> recursive_list_sum([10, 20, [30, 40], [50, 60]])\n    210\n    \"\"\"\n    ", "canonical_solution": "def recursive_list_sum(data_list):\r\n\ttotal = 0\r\n\tfor element in data_list:\r\n\t\tif type(element) == type([]):\r\n\t\t\ttotal = total + recursive_list_sum(element)\r\n\t\telse:\r\n\t\t\ttotal = total + element\r\n\treturn total", "test": "def check(candidate):\n\tassert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\n\tassert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106\n\tassert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210", "entry_point": "recursive_list_sum"}
{"task_id": 55, "prompt": "def pos_count(list):\n    \"\"\"\n    Write a python function to count positive numbers in a list.\n    >>> pos_count([1, (- 2), 3, (- 4)])\n    2\n    >>> pos_count([3, 4, 5, (- 1)])\n    3\n    >>> pos_count([1, 2, 3, 4])\n    4\n    \"\"\"\n    ", "canonical_solution": "def pos_count(list):\r\n  pos_count= 0\r\n  for num in list: \r\n    if num >= 0: \r\n      pos_count += 1\r\n  return pos_count ", "test": "def check(candidate):\n\tassert pos_count([1,-2,3,-4]) == 2\n\tassert pos_count([3,4,5,-1]) == 3\n\tassert pos_count([1,2,3,4]) == 4", "entry_point": "pos_count"}
{"task_id": 56, "prompt": "def bell_number(n):\n    \"\"\"\n    Write a function to find the number of ways to partition a set of bell numbers.\n    >>> bell_number(2)\n    2\n    >>> bell_number(10)\n    115975\n    >>> bell_number(56)\n    6775685320645824322581483068371419745979053216268760300\n    \"\"\"\n    ", "canonical_solution": "def bell_number(n):   \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1): \r\n        bell[i][0] = bell[i-1][i-1]  \r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \r\n    return bell[n][0] ", "test": "def check(candidate):\n\tassert bell_number(2)==2\n\tassert bell_number(10)==115975\n\tassert bell_number(56)==6775685320645824322581483068371419745979053216268760300", "entry_point": "bell_number"}
{"task_id": 57, "prompt": "def is_Monotonic(A):\n    \"\"\"\n    Write a python function to check whether the given array is monotonic or not.\n    >>> is_Monotonic([6, 5, 4, 4])\n    True\n    >>> is_Monotonic([1, 2, 2, 3])\n    True\n    >>> is_Monotonic([1, 3, 2])\n    False\n    \"\"\"\n    ", "canonical_solution": "def is_Monotonic(A): \r\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\r\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ", "test": "def check(candidate):\n\tassert is_Monotonic([6, 5, 4, 4]) == True\n\tassert is_Monotonic([1, 2, 2, 3]) == True\n\tassert is_Monotonic([1, 3, 2]) == False", "entry_point": "is_Monotonic"}
{"task_id": 58, "prompt": "def is_sublist(l, s):\n    \"\"\"\n    Write a function to check whether a list contains the given sublist or not.\n    >>> is_sublist([2, 4, 3, 5, 7], [3, 7])\n    False\n    >>> is_sublist([2, 4, 3, 5, 7], [4, 3])\n    True\n    >>> is_sublist([2, 4, 3, 5, 7], [1, 6])\n    False\n    \"\"\"\n    ", "canonical_solution": "def is_sublist(l, s):\r\n\tsub_set = False\r\n\tif s == []:\r\n\t\tsub_set = True\r\n\telif s == l:\r\n\t\tsub_set = True\r\n\telif len(s) > len(l):\r\n\t\tsub_set = False\r\n\telse:\r\n\t\tfor i in range(len(l)):\r\n\t\t\tif l[i] == s[0]:\r\n\t\t\t\tn = 1\r\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\r\n\t\t\t\t\tn += 1\t\t\t\t\r\n\t\t\t\tif n == len(s):\r\n\t\t\t\t\tsub_set = True\r\n\treturn sub_set", "test": "def check(candidate):\n\tassert is_sublist([2,4,3,5,7],[3,7])==False\n\tassert is_sublist([2,4,3,5,7],[4,3])==True\n\tassert is_sublist([2,4,3,5,7],[1,6])==False", "entry_point": "is_sublist"}
{"task_id": 59, "prompt": "def get_equal(Input, k):\n    \"\"\"\n    Write a function to find whether all the given tuples have equal length or not.\n    >>> get_equal([(11, 22, 33), (44, 55, 66)], 3)\n    'All tuples have same length'\n    >>> get_equal([(1, 2, 3), (4, 5, 6, 7)], 3)\n    'All tuples do not have same length'\n    >>> get_equal([(1, 2), (3, 4)], 2)\n    'All tuples have same length'\n    \"\"\"\n    ", "canonical_solution": "def find_equal_tuple(Input, k):\r\n  flag = 1\r\n  for tuple in Input:\r\n    if len(tuple) != k:\r\n      flag = 0\r\n      break\r\n  return flag\r\ndef get_equal(Input, k):\r\n  if find_equal_tuple(Input, k) == 1:\r\n    return (\"All tuples have same length\")\r\n  else:\r\n    return (\"All tuples do not have same length\")", "test": "def check(candidate):\n\tassert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\n\tassert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'\n\tassert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'", "entry_point": "get_equal"}
{"task_id": 60, "prompt": "def comb_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using comb sort.\n    >>> comb_sort([5, 15, 37, 25, 79])\n    [5, 15, 25, 37, 79]\n    >>> comb_sort([41, 32, 15, 19, 22])\n    [15, 19, 22, 32, 41]\n    >>> comb_sort([99, 15, 13, 47])\n    [13, 15, 47, 99]\n    \"\"\"\n    ", "canonical_solution": "def comb_sort(nums):\r\n    shrink_fact = 1.3\r\n    gaps = len(nums)\r\n    swapped = True\r\n    i = 0\r\n    while gaps > 1 or swapped:\r\n        gaps = int(float(gaps) / shrink_fact)\r\n        swapped = False\r\n        i = 0\r\n        while gaps + i < len(nums):\r\n            if nums[i] > nums[i+gaps]:\r\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\r\n                swapped = True\r\n            i += 1\r\n    return nums", "test": "def check(candidate):\n\tassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\n\tassert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]\n\tassert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]", "entry_point": "comb_sort"}
{"task_id": 61, "prompt": "def dif_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as difference of two squares or not.\n    >>> dif_Square(5)\n    True\n    >>> dif_Square(10)\n    False\n    >>> dif_Square(15)\n    True\n    \"\"\"\n    ", "canonical_solution": "def dif_Square(n): \r\n    if (n % 4 != 2): \r\n        return True\r\n    return False", "test": "def check(candidate):\n\tassert dif_Square(5) == True\n\tassert dif_Square(10) == False\n\tassert dif_Square(15) == True", "entry_point": "dif_Square"}
{"task_id": 62, "prompt": "def multiple_split(text):\n    \"\"\"\n    Write a function to split the given string with multiple delimiters by using regex.\n    >>> multiple_split('Forces of the \\ndarkness*are coming into the play.')\n    ['Forces of the ', 'darkness', 'are coming into the play.']\n    >>> multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.')\n    ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']\n    >>> multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.')\n    ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']\n    \"\"\"\n    ", "canonical_solution": "import re\r\ndef multiple_split(text):\r\n  return (re.split('; |, |\\*|\\n',text))", "test": "def check(candidate):\n\tassert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\n\tassert multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']\n\tassert multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']", "entry_point": "multiple_split"}
{"task_id": 63, "prompt": "def is_samepatterns(colors, patterns):\n    \"\"\"\n    Write a function to check whether it follows the sequence given in the patterns array.\n    >>> is_samepatterns(['red', 'green', 'green'], ['a', 'b', 'b'])\n    True\n    >>> is_samepatterns(['red', 'green', 'greenn'], ['a', 'b', 'b'])\n    False\n    >>> is_samepatterns(['red', 'green', 'greenn'], ['a', 'b'])\n    False\n    \"\"\"\n    ", "canonical_solution": "def is_samepatterns(colors, patterns):    \r\n    if len(colors) != len(patterns):\r\n        return False    \r\n    sdict = {}\r\n    pset = set()\r\n    sset = set()    \r\n    for i in range(len(patterns)):\r\n        pset.add(patterns[i])\r\n        sset.add(colors[i])\r\n        if patterns[i] not in sdict.keys():\r\n            sdict[patterns[i]] = []\r\n\r\n        keys = sdict[patterns[i]]\r\n        keys.append(colors[i])\r\n        sdict[patterns[i]] = keys\r\n\r\n    if len(pset) != len(sset):\r\n        return False   \r\n\r\n    for values in sdict.values():\r\n\r\n        for i in range(len(values) - 1):\r\n            if values[i] != values[i+1]:\r\n                return False\r\n\r\n    return True", "test": "def check(candidate):\n\tassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \n\tassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False \n\tassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False ", "entry_point": "is_samepatterns"}
{"task_id": 64, "prompt": "def find_tuples(test_list, K):\n    \"\"\"\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    >>> find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6)\n    '[(6, 24, 12)]'\n    >>> find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5)\n    '[(5, 25, 30)]'\n    >>> find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4)\n    '[(8, 16, 4)]'\n    \"\"\"\n    ", "canonical_solution": "def find_tuples(test_list, K):\r\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\r\n  return (str(res)) ", "test": "def check(candidate):\n\tassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\n\tassert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'\n\tassert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'", "entry_point": "find_tuples"}
{"task_id": 65, "prompt": "def count_Squares(m, n):\n    \"\"\"\n    Write a python function to count the number of squares in a rectangle.\n    >>> count_Squares(4, 3)\n    20\n    >>> count_Squares(2, 2)\n    5\n    >>> count_Squares(1, 1)\n    1\n    \"\"\"\n    ", "canonical_solution": "def count_Squares(m,n):\r\n    if(n < m):\r\n        temp = m\r\n        m = n\r\n        n = temp\r\n    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))", "test": "def check(candidate):\n\tassert count_Squares(4,3) == 20\n\tassert count_Squares(2,2) == 5\n\tassert count_Squares(1,1) == 1", "entry_point": "count_Squares"}
{"task_id": 66, "prompt": "def is_Diff(n):\n    \"\"\"\n    Write a python function to find the difference between sum of even and odd digits.\n    >>> is_Diff(12345)\n    False\n    >>> is_Diff(1212112)\n    True\n    >>> is_Diff(1212)\n    False\n    \"\"\"\n    ", "canonical_solution": "def is_Diff(n): \r\n    return (n % 11 == 0) ", "test": "def check(candidate):\n\tassert is_Diff (12345) == False\n\tassert is_Diff(1212112) == True\n\tassert is_Diff(1212) == False", "entry_point": "is_Diff "}
{"task_id": 67, "prompt": "def count_With_Odd_SetBits(n):\n    \"\"\"\n    Write a python function to find number of integers with odd number of set bits.\n    >>> count_With_Odd_SetBits(5)\n    3\n    >>> count_With_Odd_SetBits(10)\n    5\n    >>> count_With_Odd_SetBits(15)\n    8\n    \"\"\"\n    ", "canonical_solution": "def count_With_Odd_SetBits(n): \r\n    if (n % 2 != 0): \r\n        return (n + 1) / 2\r\n    count = bin(n).count('1') \r\n    ans = n / 2\r\n    if (count % 2 != 0): \r\n        ans += 1\r\n    return ans ", "test": "def check(candidate):\n\tassert count_With_Odd_SetBits(5) == 3\n\tassert count_With_Odd_SetBits(10) == 5\n\tassert count_With_Odd_SetBits(15) == 8", "entry_point": "count_With_Odd_SetBits"}
{"task_id": 68, "prompt": "def word_len(s):\n    \"\"\"\n    Write a python function to check whether the length of the word is odd or not.\n    >>> word_len('Hadoop')\n    False\n    >>> word_len('great')\n    True\n    >>> word_len('structure')\n    True\n    \"\"\"\n    ", "canonical_solution": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2!=0: \r\n            return True  \r\n        else:\r\n          return False", "test": "def check(candidate):\n\tassert word_len(\"Hadoop\") == False\n\tassert word_len(\"great\") == True\n\tassert word_len(\"structure\") == True", "entry_point": "word_len"}
{"task_id": 69, "prompt": "def tetrahedral_number(n):\n    \"\"\"\n    Write a function to find the nth tetrahedral number.\n    >>> tetrahedral_number(5)\n    35.0\n    >>> tetrahedral_number(6)\n    56.0\n    >>> tetrahedral_number(7)\n    84.0\n    \"\"\"\n    ", "canonical_solution": "def tetrahedral_number(n): \r\n\treturn (n * (n + 1) * (n + 2)) / 6", "test": "def check(candidate):\n\tassert tetrahedral_number(5) == 35.0\n\tassert tetrahedral_number(6) == 56.0\n\tassert tetrahedral_number(7) == 84.0", "entry_point": "tetrahedral_number"}
{"task_id": 70, "prompt": "def zip_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to zip the two given tuples.\n    >>> zip_tuples((7, 8, 4, 5, 9, 10), (1, 5, 6))\n    [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n    >>> zip_tuples((8, 9, 5, 6, 10, 11), (2, 6, 7))\n    [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]\n    >>> zip_tuples((9, 10, 6, 7, 11, 12), (3, 7, 8))\n    [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]\n    \"\"\"\n    ", "canonical_solution": "def zip_tuples(test_tup1, test_tup2):\r\n  res = []\r\n  for i, j in enumerate(test_tup1):\r\n    res.append((j, test_tup2[i % len(test_tup2)])) \r\n  return (res) ", "test": "def check(candidate):\n\tassert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\n\tassert zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]\n\tassert zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]", "entry_point": "zip_tuples"}
{"task_id": 71, "prompt": "def volume_sphere(r):\n    \"\"\"\n    Write a function to find the volume of a sphere.\n    >>> volume_sphere(10)\n    4188.790204786391\n    >>> volume_sphere(25)\n    65449.84694978735\n    >>> volume_sphere(20)\n    33510.32163829113\n    \"\"\"\n    ", "canonical_solution": "import math\r\ndef volume_sphere(r):\r\n  volume=(4/3)*math.pi*r*r*r\r\n  return volume", "test": "def check(candidate):\n\tassert volume_sphere(10)==4188.790204786391\n\tassert volume_sphere(25)==65449.84694978735\n\tassert volume_sphere(20)==33510.32163829113", "entry_point": "volume_sphere"}
{"task_id": 72, "prompt": "def get_Char(strr):\n    \"\"\"\n    Write a python function to find the character made by adding all the characters of the given string.\n    >>> get_Char('abc')\n    'f'\n    >>> get_Char('gfg')\n    't'\n    >>> get_Char('ab')\n    'c'\n    \"\"\"\n    ", "canonical_solution": "def get_Char(strr):  \r\n    summ = 0\r\n    for i in range(len(strr)): \r\n        summ += (ord(strr[i]) - ord('a') + 1)  \r\n    if (summ % 26 == 0): \r\n        return ord('z') \r\n    else: \r\n        summ = summ % 26\r\n        return chr(ord('a') + summ - 1)", "test": "def check(candidate):\n\tassert get_Char(\"abc\") == \"f\"\n\tassert get_Char(\"gfg\") == \"t\"\n\tassert get_Char(\"ab\") == \"c\"", "entry_point": "get_Char"}
{"task_id": 73, "prompt": "def sequence(n):\n    \"\"\"\n    Write a function to find the n-th number in newman conway sequence.\n    >>> sequence(10)\n    6\n    >>> sequence(2)\n    1\n    >>> sequence(3)\n    2\n    \"\"\"\n    ", "canonical_solution": "def sequence(n): \r\n\tif n == 1 or n == 2: \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))", "test": "def check(candidate):\n\tassert sequence(10) == 6\n\tassert sequence(2) == 1\n\tassert sequence(3) == 2", "entry_point": "sequence"}
{"task_id": 74, "prompt": "def surfacearea_sphere(r):\n    \"\"\"\n    Write a function to find the surface area of a sphere.\n    >>> surfacearea_sphere(10)\n    1256.6370614359173\n    >>> surfacearea_sphere(15)\n    2827.4333882308138\n    >>> surfacearea_sphere(20)\n    5026.548245743669\n    \"\"\"\n    ", "canonical_solution": "import math\r\ndef surfacearea_sphere(r):\r\n  surfacearea=4*math.pi*r*r\r\n  return surfacearea", "test": "def check(candidate):\n\tassert surfacearea_sphere(10)==1256.6370614359173\n\tassert surfacearea_sphere(15)==2827.4333882308138\n\tassert surfacearea_sphere(20)==5026.548245743669", "entry_point": "surfacearea_sphere"}
{"task_id": 75, "prompt": "def centered_hexagonal_number(n):\n    \"\"\"\n    Write a function to find nth centered hexagonal number.\n    >>> centered_hexagonal_number(10)\n    271\n    >>> centered_hexagonal_number(2)\n    7\n    >>> centered_hexagonal_number(9)\n    217\n    \"\"\"\n    ", "canonical_solution": "def centered_hexagonal_number(n):\r\n  return 3 * n * (n - 1) + 1", "test": "def check(candidate):\n\tassert centered_hexagonal_number(10) == 271\n\tassert centered_hexagonal_number(2) == 7\n\tassert centered_hexagonal_number(9) == 217", "entry_point": "centered_hexagonal_number"}
{"task_id": 76, "prompt": "def merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Write a function to merge three dictionaries into a single expression.\n    >>> merge_dictionaries_three({'R': 'Red', 'B': 'Black', 'P': 'Pink'}, {'G': 'Green', 'W': 'White'}, {'O': 'Orange', 'W': 'White', 'B': 'Black'})\n    {'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n    >>> merge_dictionaries_three({'R': 'Red', 'B': 'Black', 'P': 'Pink'}, {'G': 'Green', 'W': 'White'}, {'L': 'lavender', 'B': 'Blue'})\n    {'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}\n    >>> merge_dictionaries_three({'R': 'Red', 'B': 'Black', 'P': 'Pink'}, {'L': 'lavender', 'B': 'Blue'}, {'G': 'Green', 'W': 'White'})\n    {'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}\n    \"\"\"\n    ", "canonical_solution": "import collections as ct\r\ndef merge_dictionaries_three(dict1,dict2, dict3):\r\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\r\n    return merged_dict", "test": "def check(candidate):\n\tassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\tassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}\n\tassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}", "entry_point": "merge_dictionaries_three"}
{"task_id": 77, "prompt": "def freq_count(list1):\n    \"\"\"\n    Write a function to get the frequency of the elements in a list.\n    >>> freq_count([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30])\n    {10: 4, 20: 4, 40: 2, 50: 2, 30: 1}\n    >>> freq_count([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4])\n    {1: 3, 2: 2, 3: 3, 4: 3}\n    >>> freq_count([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5])\n    {10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2}\n    \"\"\"\n    ", "canonical_solution": "import collections\r\ndef freq_count(list1):\r\n  freq_count= collections.Counter(list1)\r\n  return freq_count", "test": "def check(candidate):\n\tassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \n\tassert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) \n\tassert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) ", "entry_point": "freq_count"}
{"task_id": 78, "prompt": "def closest_num(N):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    >>> closest_num(11)\n    10\n    >>> closest_num(7)\n    6\n    >>> closest_num(12)\n    11\n    \"\"\"\n    ", "canonical_solution": "def closest_num(N):\r\n  return (N - 1)", "test": "def check(candidate):\n\tassert closest_num(11) == 10\n\tassert closest_num(7) == 6\n\tassert closest_num(12) == 11", "entry_point": "closest_num"}
{"task_id": 79, "prompt": "def len_log(list1):\n    \"\"\"\n    Write a python function to find the length of the longest word.\n    >>> len_log(['python', 'PHP', 'bigdata'])\n    7\n    >>> len_log(['a', 'ab', 'abc'])\n    3\n    >>> len_log(['small', 'big', 'tall'])\n    5\n    \"\"\"\n    ", "canonical_solution": "def len_log(list1):\r\n    max=len(list1[0])\r\n    for i in list1:\r\n        if len(i)>max:\r\n            max=len(i)\r\n    return max", "test": "def check(candidate):\n\tassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\n\tassert len_log([\"a\",\"ab\",\"abc\"]) == 3\n\tassert len_log([\"small\",\"big\",\"tall\"]) == 5", "entry_point": "len_log"}
{"task_id": 80, "prompt": "def find_substring(str1, sub_str):\n    \"\"\"\n    Write a function to check if a substring is present in a given list of string values.\n    >>> find_substring(['red', 'black', 'white', 'green', 'orange'], 'ack')\n    True\n    >>> find_substring(['red', 'black', 'white', 'green', 'orange'], 'abc')\n    False\n    >>> find_substring(['red', 'black', 'white', 'green', 'orange'], 'ange')\n    True\n    \"\"\"\n    ", "canonical_solution": "def find_substring(str1, sub_str):\r\n   if any(sub_str in s for s in str1):\r\n       return True\r\n   return False", "test": "def check(candidate):\n\tassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\n\tassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False\n\tassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True", "entry_point": "find_substring"}
{"task_id": 81, "prompt": "def is_undulating(n):\n    \"\"\"\n    Write a function to check whether the given number is undulating or not.\n    >>> is_undulating('1212121')\n    True\n    >>> is_undulating('1991')\n    False\n    >>> is_undulating('121')\n    True\n    \"\"\"\n    ", "canonical_solution": "def is_undulating(n): \r\n\tif (len(n) <= 2): \r\n\t\treturn False\r\n\tfor i in range(2, len(n)): \r\n\t\tif (n[i - 2] != n[i]): \r\n\t\t\treturn False\r\n\treturn True", "test": "def check(candidate):\n\tassert is_undulating(\"1212121\") == True\n\tassert is_undulating(\"1991\") == False\n\tassert is_undulating(\"121\") == True", "entry_point": "is_undulating"}
{"task_id": 82, "prompt": "def power(a, b):\n    \"\"\"\n    Write a function to calculate the value of 'a' to the power 'b'.\n    >>> power(3, 4)\n    81\n    >>> power(2, 3)\n    8\n    >>> power(5, 5)\n    3125\n    \"\"\"\n    ", "canonical_solution": "def power(a,b):\r\n\tif b==0:\r\n\t\treturn 1\r\n\telif a==0:\r\n\t\treturn 0\r\n\telif b==1:\r\n\t\treturn a\r\n\telse:\r\n\t\treturn a*power(a,b-1)", "test": "def check(candidate):\n\tassert power(3,4) == 81\n\tassert power(2,3) == 8\n\tassert power(5,5) == 3125", "entry_point": "power"}
{"task_id": 83, "prompt": "def index_minimum(test_list):\n    \"\"\"\n    Write a function to extract the index minimum value record from the given tuples.\n    >>> index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)])\n    'Varsha'\n    >>> index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)])\n    'Dawood'\n    >>> index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)])\n    'Ayesha'\n    \"\"\"\n    ", "canonical_solution": "from operator import itemgetter \r\ndef index_minimum(test_list):\r\n  res = min(test_list, key = itemgetter(1))[0]\r\n  return (res) ", "test": "def check(candidate):\n\tassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\n\tassert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'\n\tassert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'", "entry_point": "index_minimum"}
{"task_id": 84, "prompt": "def Find_Min_Length(lst):\n    \"\"\"\n    Write a python function to find the minimum length of sublist.\n    >>> Find_Min_Length([[1], [1, 2]])\n    1\n    >>> Find_Min_Length([[1, 2], [1, 2, 3], [1, 2, 3, 4]])\n    2\n    >>> Find_Min_Length([[3, 3, 3], [4, 4, 4, 4]])\n    3\n    \"\"\"\n    ", "canonical_solution": "def Find_Min_Length(lst):  \r\n    minLength = min(len(x) for x in lst )\r\n    return minLength ", "test": "def check(candidate):\n\tassert Find_Min_Length([[1],[1,2]]) == 1\n\tassert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2\n\tassert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3", "entry_point": "Find_Min_Length"}
{"task_id": 85, "prompt": "def divisor(n):\n    \"\"\"\n    Write a python function to find the number of divisors of a given integer.\n    >>> divisor(15)\n    4\n    >>> divisor(12)\n    6\n    >>> divisor(9)\n    3\n    \"\"\"\n    ", "canonical_solution": "def divisor(n):\r\n  for i in range(n):\r\n    x = len([i for i in range(1,n+1) if not n % i])\r\n  return x", "test": "def check(candidate):\n\tassert divisor(15) == 4 \n\tassert divisor(12) == 6\n\tassert divisor(9) == 3", "entry_point": "divisor"}
{"task_id": 86, "prompt": "def frequency_lists(list1):\n    \"\"\"\n    Write a function to find frequency count of list of lists.\n    >>> frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])\n    {1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n    >>> frequency_lists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])\n    {1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1}\n    >>> frequency_lists([[20, 30, 40, 17], [18, 16, 14, 13], [10, 20, 30, 40]])\n    {20: 2, 30: 2, 40: 2, 17: 1, 18: 1, 16: 1, 14: 1, 13: 1, 10: 1}\n    \"\"\"\n    ", "canonical_solution": "def frequency_lists(list1):\r\n    list1 = [item for sublist in list1 for item in sublist]\r\n    dic_data = {}\r\n    for num in list1:\r\n        if num in dic_data.keys():\r\n            dic_data[num] += 1\r\n        else:\r\n            key = num\r\n            value = 1\r\n            dic_data[key] = value\r\n    return dic_data\r\n", "test": "def check(candidate):\n\tassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n\tassert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}\n\tassert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}", "entry_point": "frequency_lists"}
{"task_id": 87, "prompt": "def multiply_num(numbers):\n    \"\"\"\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    >>> multiply_num((8, 2, 3, (- 1), 7))\n    (- 67.2)\n    >>> multiply_num(((- 10), (- 20), (- 30)))\n    (- 2000.0)\n    >>> multiply_num((19, 15, 18))\n    1710.0\n    \"\"\"\n    ", "canonical_solution": "def multiply_num(numbers):  \r\n    total = 1\r\n    for x in numbers:\r\n        total *= x  \r\n    return total/len(numbers) ", "test": "def check(candidate):\n\tassert multiply_num((8, 2, 3, -1, 7))==-67.2\n\tassert multiply_num((-10,-20,-30))==-2000.0\n\tassert multiply_num((19,15,18))==1710.0", "entry_point": "multiply_num"}
{"task_id": 88, "prompt": "def decimal_to_binary(n):\n    \"\"\"\n    Write a function to convert the given decimal number to its binary equivalent.\n    >>> decimal_to_binary(8)\n    '1000'\n    >>> decimal_to_binary(18)\n    '10010'\n    >>> decimal_to_binary(7)\n    '111'\n    \"\"\"\n    ", "canonical_solution": "def decimal_to_binary(n): \r\n    return bin(n).replace(\"0b\",\"\") ", "test": "def check(candidate):\n\tassert decimal_to_binary(8) == '1000'\n\tassert decimal_to_binary(18) == '10010'\n\tassert decimal_to_binary(7) == '111' ", "entry_point": "decimal_to_binary"}
{"task_id": 89, "prompt": "def next_smallest_palindrome(num):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified number.\n    >>> next_smallest_palindrome(99)\n    101\n    >>> next_smallest_palindrome(1221)\n    1331\n    >>> next_smallest_palindrome(120)\n    121\n    \"\"\"\n    ", "canonical_solution": "import sys\r\ndef next_smallest_palindrome(num):\r\n    numstr = str(num)\r\n    for i in range(num+1,sys.maxsize):\r\n        if str(i) == str(i)[::-1]:\r\n            return i", "test": "def check(candidate):\n\tassert next_smallest_palindrome(99)==101\n\tassert next_smallest_palindrome(1221)==1331\n\tassert next_smallest_palindrome(120)==121", "entry_point": "next_smallest_palindrome"}
{"task_id": 90, "prompt": "def kth_element(arr, n, k):\n    \"\"\"\n    Write a function to find the kth element in the given array.\n    >>> kth_element([12, 3, 5, 7, 19], 5, 2)\n    3\n    >>> kth_element([17, 24, 8, 23], 4, 3)\n    8\n    >>> kth_element([16, 21, 25, 36, 4], 5, 4)\n    36\n    \"\"\"\n    ", "canonical_solution": "def kth_element(arr, n, k):\r\n  for i in range(n):\r\n    for j in range(0, n-i-1):\r\n      if arr[j] > arr[j+1]:\r\n        arr[j], arr[j+1] == arr[j+1], arr[j]\r\n  return arr[k-1]", "test": "def check(candidate):\n\tassert kth_element([12,3,5,7,19], 5, 2) == 3\n\tassert kth_element([17,24,8,23], 4, 3) == 8\n\tassert kth_element([16,21,25,36,4], 5, 4) == 36", "entry_point": "kth_element"}
{"task_id": 91, "prompt": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert snake case string to camel case string.\n    >>> snake_to_camel('python_program')\n    'PythonProgram'\n    >>> snake_to_camel('python_language')\n    'PythonLanguage'\n    >>> snake_to_camel('programming_language')\n    'ProgrammingLanguage'\n    \"\"\"\n    ", "canonical_solution": "def snake_to_camel(word):\r\n        import re\r\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))", "test": "def check(candidate):\n\tassert snake_to_camel('python_program')=='PythonProgram'\n\tassert snake_to_camel('python_language')==('PythonLanguage')\n\tassert snake_to_camel('programming_language')==('ProgrammingLanguage')", "entry_point": "snake_to_camel"}
{"task_id": 92, "prompt": "def eulerian_num(n, m):\n    \"\"\"\n    Write a function to find eulerian number a(n, m).\n    >>> eulerian_num(3, 1)\n    4\n    >>> eulerian_num(4, 1)\n    11\n    >>> eulerian_num(5, 3)\n    26\n    \"\"\"\n    ", "canonical_solution": "def eulerian_num(n, m): \r\n\tif (m >= n or n == 0): \r\n\t\treturn 0 \r\n\tif (m == 0): \r\n\t\treturn 1 \r\n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))", "test": "def check(candidate):\n\tassert eulerian_num(3, 1) == 4\n\tassert eulerian_num(4, 1) == 11\n\tassert eulerian_num(5, 3) == 26", "entry_point": "eulerian_num"}
{"task_id": 93, "prompt": "def sort_sublists(input_list):\n    \"\"\"\n    Write a function to sort each sublist of strings in a given list of lists using lambda function.\n    >>> sort_sublists((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']))\n    [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    >>> sort_sublists(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown']))\n    [[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n    >>> sort_sublists((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze']))\n    [['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]\n    \"\"\"\n    ", "canonical_solution": "def sort_sublists(input_list):\r\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \r\n    return result\r", "test": "def check(candidate):\n\tassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n\tassert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\n\tassert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]", "entry_point": "sort_sublists"}
{"task_id": 94, "prompt": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    >>> count([True, False, True])\n    2\n    >>> count([False, False])\n    0\n    >>> count([True, True, True])\n    3\n    \"\"\"\n    ", "canonical_solution": "def count(lst):   \r\n    return sum(lst) ", "test": "def check(candidate):\n\tassert count([True,False,True]) == 2\n\tassert count([False,False]) == 0\n\tassert count([True,True,True]) == 3", "entry_point": "count"}
{"task_id": 95, "prompt": "def add_lists(test_list, test_tup):\n    \"\"\"\n    Write a function to add the given list to the given tuples.\n    >>> add_lists([5, 6, 7], (9, 10))\n    (9, 10, 5, 6, 7)\n    >>> add_lists([6, 7, 8], (10, 11))\n    (10, 11, 6, 7, 8)\n    >>> add_lists([7, 8, 9], (11, 12))\n    (11, 12, 7, 8, 9)\n    \"\"\"\n    ", "canonical_solution": "def add_lists(test_list, test_tup):\r\n  res = tuple(list(test_tup) + test_list)\r\n  return (res) ", "test": "def check(candidate):\n\tassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\n\tassert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)\n\tassert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)", "entry_point": "add_lists"}
{"task_id": 96, "prompt": "def count_Hexadecimal(L, R):\n    \"\"\"\n    Write a python function to count hexadecimal numbers for a given range.\n    >>> count_Hexadecimal(10, 15)\n    6\n    >>> count_Hexadecimal(2, 4)\n    0\n    >>> count_Hexadecimal(15, 16)\n    1\n    \"\"\"\n    ", "canonical_solution": "def count_Hexadecimal(L,R) :  \r\n    count = 0;  \r\n    for i in range(L,R + 1) : \r\n        if (i >= 10 and i <= 15) : \r\n            count += 1;  \r\n        elif (i > 15) : \r\n            k = i;  \r\n            while (k != 0) :  \r\n                if (k % 16 >= 10) : \r\n                    count += 1;  \r\n                k = k // 16;  \r\n    return count;  ", "test": "def check(candidate):\n\tassert count_Hexadecimal(10,15) == 6\n\tassert count_Hexadecimal(2,4) == 0\n\tassert count_Hexadecimal(15,16) == 1", "entry_point": "count_Hexadecimal"}
{"task_id": 97, "prompt": "def merge_sorted_list(num1, num2, num3):\n    \"\"\"\n    Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\n    >>> merge_sorted_list([25, 24, 15, 4, 5, 29, 110], [19, 20, 11, 56, 25, 233, 154], [24, 26, 54, 48])\n    [4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n    >>> merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])\n    [1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\n    >>> merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1], [25, 35, 22, 85, 14, 65, 75, 25, 58], [12, 74, 9, 50, 61, 41])\n    [1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]\n    \"\"\"\n    ", "canonical_solution": "import heapq\r\ndef merge_sorted_list(num1,num2,num3):\r\n  num1=sorted(num1)\r\n  num2=sorted(num2)\r\n  num3=sorted(num3)\r\n  result = heapq.merge(num1,num2,num3)\r\n  return list(result)", "test": "def check(candidate):\n\tassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n\tassert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\n\tassert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]", "entry_point": "merge_sorted_list"}
{"task_id": 98, "prompt": "def odd_Equivalent(s, n):\n    \"\"\"\n    Write a python function to find the count of rotations of a binary string with odd value.\n    >>> odd_Equivalent('011001', 6)\n    3\n    >>> odd_Equivalent('11011', 5)\n    4\n    >>> odd_Equivalent('1010', 4)\n    2\n    \"\"\"\n    ", "canonical_solution": "def odd_Equivalent(s,n): \r\n    count=0\r\n    for i in range(0,n): \r\n        if (s[i] == '1'): \r\n            count = count + 1\r\n    return count ", "test": "def check(candidate):\n\tassert odd_Equivalent(\"011001\",6) == 3\n\tassert odd_Equivalent(\"11011\",5) == 4\n\tassert odd_Equivalent(\"1010\",4) == 2", "entry_point": "odd_Equivalent"}
{"task_id": 99, "prompt": "def extract_missing(test_list, strt_val, stop_val):\n    \"\"\"\n    Write a function to extract the ranges that are missing from the given list with the given start range and end range values.\n    >>> extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100)\n    [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n    >>> extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60)\n    [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]\n    >>> extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52)\n    [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]\n    \"\"\"\n    ", "canonical_solution": "def extract_missing(test_list, strt_val, stop_val):\r\n  res = []\r\n  for sub in test_list:\r\n    if sub[0] > strt_val:\r\n      res.append((strt_val, sub[0]))\r\n      strt_val = sub[1]\r\n    if strt_val < stop_val:\r\n      res.append((strt_val, stop_val))\r\n  return (res) ", "test": "def check(candidate):\n\tassert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\n\tassert extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]\n\tassert extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]", "entry_point": "extract_missing"}
{"task_id": 100, "prompt": "def common_in_nested_lists(nestedlist):\n    \"\"\"\n    Write a function to find common elements in given nested lists. * list item * list item * list item * list item\n    >>> common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])\n    [18, 12]\n    >>> common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])\n    [5, 23]\n    >>> common_in_nested_lists([[2, 3, 4, 1], [4, 5], [6, 4, 8], [4, 5], [6, 8, 4]])\n    [4]\n    \"\"\"\n    ", "canonical_solution": "def common_in_nested_lists(nestedlist):\r\n    result = list(set.intersection(*map(set, nestedlist)))\r\n    return result", "test": "def check(candidate):\n\tassert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\n\tassert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]\n\tassert common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]", "entry_point": "common_in_nested_lists"}
{"task_id": 101, "prompt": "def perimeter(diameter, height):\n    \"\"\"\n    Write a python function to find the perimeter of a cylinder.\n    >>> perimeter(2, 4)\n    12\n    >>> perimeter(1, 2)\n    6\n    >>> perimeter(3, 1)\n    8\n    \"\"\"\n    ", "canonical_solution": "def perimeter(diameter,height) : \r\n    return 2*(diameter+height)  ", "test": "def check(candidate):\n\tassert perimeter(2,4) == 12\n\tassert perimeter(1,2) == 6\n\tassert perimeter(3,1) == 8", "entry_point": "perimeter"}
{"task_id": 102, "prompt": "def check_integer(text):\n    \"\"\"\n    Write a function to check if a string represents an integer or not.\n    >>> check_integer('python')\n    False\n    >>> check_integer('1')\n    True\n    >>> check_integer('12345')\n    True\n    \"\"\"\n    ", "canonical_solution": "def check_integer(text):\r\n text = text.strip()\r\n if len(text) < 1:\r\n    return None\r\n else:\r\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\r\n          return True\r\n     elif (text[0] in \"+-\") and \\\r\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\r\n         return True\r\n     else:\r\n        return False", "test": "def check(candidate):\n\tassert check_integer(\"python\")==False\n\tassert check_integer(\"1\")==True\n\tassert check_integer(\"12345\")==True", "entry_point": "check_integer"}
{"task_id": 103, "prompt": "def assign_freq(test_list):\n    \"\"\"\n    Write a function to assign frequency to each tuple in the given tuple list.\n    >>> assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9,), (2, 7)])\n    '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n    >>> assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)])\n    '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'\n    >>> assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)])\n    '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'\n    \"\"\"\n    ", "canonical_solution": "from collections import Counter \r\ndef assign_freq(test_list):\r\n  res = [(*key, val) for key, val in Counter(test_list).items()]\r\n  return (str(res)) ", "test": "def check(candidate):\n\tassert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\n\tassert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'\n\tassert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'", "entry_point": "assign_freq"}
{"task_id": 104, "prompt": "def empty_dit(list1):\n    \"\"\"\n    Write a function to check whether all dictionaries in a list are empty or not.\n    >>> empty_dit([{}, {}, {}])\n    True\n    >>> empty_dit([{1, 2}, {}, {}])\n    False\n    >>> empty_dit({})\n    True\n    \"\"\"\n    ", "canonical_solution": "def empty_dit(list1):\r\n empty_dit=all(not d for d in list1)\r\n return empty_dit", "test": "def check(candidate):\n\tassert empty_dit([{},{},{}])==True\n\tassert empty_dit([{1,2},{},{}])==False\n\tassert empty_dit({})==True", "entry_point": "empty_dit"}
{"task_id": 105, "prompt": "def tuple_to_int(nums):\n    \"\"\"\n    Write a function to convert a given tuple of positive integers into an integer.\n    >>> tuple_to_int((1, 2, 3))\n    123\n    >>> tuple_to_int((4, 5, 6))\n    456\n    >>> tuple_to_int((5, 6, 7))\n    567\n    \"\"\"\n    ", "canonical_solution": "def tuple_to_int(nums):\r\n    result = int(''.join(map(str,nums)))\r\n    return result", "test": "def check(candidate):\n\tassert tuple_to_int((1,2,3))==123\n\tassert tuple_to_int((4,5,6))==456\n\tassert tuple_to_int((5,6,7))==567", "entry_point": "tuple_to_int"}
{"task_id": 106, "prompt": "def list_to_float(test_list):\n    \"\"\"\n    Write a function to convert all possible convertible elements in the list to float.\n    >>> list_to_float([('3', '4'), ('1', '26.45'), ('7.32', '8'), ('4', '8')])\n    '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n    >>> list_to_float([('4', '4'), ('2', '27'), ('4.12', '9'), ('7', '11')])\n    '[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]'\n    >>> list_to_float([('6', '78'), ('5', '26.45'), ('1.33', '4'), ('82', '13')])\n    '[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]'\n    \"\"\"\n    ", "canonical_solution": "def list_to_float(test_list):\r\n  res = []\r\n  for tup in test_list:\r\n    temp = []\r\n    for ele in tup:\r\n      if ele.isalpha():\r\n        temp.append(ele)\r\n      else:\r\n        temp.append(float(ele))\r\n    res.append((temp[0],temp[1])) \r\n  return (str(res)) ", "test": "def check(candidate):\n\tassert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\n\tassert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == '[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]'\n\tassert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == '[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]'", "entry_point": "list_to_float"}
{"task_id": 107, "prompt": "def string_to_list(string):\n    \"\"\"\n    [link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\n    >>> string_to_list('python programming')\n    ['python', 'programming']\n    >>> string_to_list('lists tuples strings')\n    ['lists', 'tuples', 'strings']\n    >>> string_to_list('write a program')\n    ['write', 'a', 'program']\n    \"\"\"\n    ", "canonical_solution": "def string_to_list(string): \r\n    lst = list(string.split(\" \")) \r\n    return lst", "test": "def check(candidate):\n\tassert string_to_list(\"python programming\")==['python','programming']\n\tassert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']\n\tassert string_to_list(\"write a program\")==['write','a','program']", "entry_point": "string_to_list"}
{"task_id": 108, "prompt": "def search(arr, n):\n    \"\"\"\n    Write a python function to find the element that appears only once in a sorted array.\n    >>> search([1, 1, 2, 2, 3], 5)\n    3\n    >>> search([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8], 11)\n    8\n    >>> search([1, 2, 2, 3, 3, 4, 4], 7)\n    1\n    \"\"\"\n    ", "canonical_solution": "def search(arr,n) :\r\n    XOR = 0\r\n    for i in range(n) :\r\n        XOR = XOR ^ arr[i]\r\n    return (XOR)", "test": "def check(candidate):\n\tassert search([1,1,2,2,3],5) == 3\n\tassert search([1,1,3,3,4,4,5,5,7,7,8],11) == 8\n\tassert search([1,2,2,3,3,4,4],7) == 1", "entry_point": "search"}
{"task_id": 109, "prompt": "def max_product_tuple(list1):\n    \"\"\"\n    Write a function to find the maximum product from the pairs of tuples within a given list.\n    >>> max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)])\n    36\n    >>> max_product_tuple([(10, 20), (15, 2), (5, 10)])\n    200\n    >>> max_product_tuple([(11, 44), (10, 15), (20, 5), (12, 9)])\n    484\n    \"\"\"\n    ", "canonical_solution": "def max_product_tuple(list1):\r\n    result_max = max([abs(x * y) for x, y in list1] )\r\n    return result_max", "test": "def check(candidate):\n\tassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\n\tassert max_product_tuple([(10,20), (15,2), (5,10)] )==200\n\tassert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484", "entry_point": "max_product_tuple"}
{"task_id": 110, "prompt": "def check_triplet(A, n, sum, count):\n    \"\"\"\n    Write a function to find the triplet with sum of the given array\n    >>> check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0)\n    True\n    >>> check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0)\n    False\n    >>> check_triplet([10, 4, 2, 3, 5], 5, 15, 0)\n    True\n    \"\"\"\n    ", "canonical_solution": "def check_triplet(A, n, sum, count):\r\n    if count == 3 and sum == 0:\r\n        return True\r\n    if count == 3 or n == 0 or sum < 0:\r\n        return False\r\n    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\\\r\n           check_triplet(A, n - 1, sum, count)", "test": "def check(candidate):\n\tassert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\n\tassert check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) == False\n\tassert check_triplet([10, 4, 2, 3, 5], 5, 15, 0) == True", "entry_point": "check_triplet"}
{"task_id": 111, "prompt": "def smartNumber(n):\n    \"\"\"\n    Write a function to find n\u2019th smart number.\n    >>> smartNumber(1)\n    30\n    >>> smartNumber(50)\n    273\n    >>> smartNumber(1000)\n    2664\n    \"\"\"\n    ", "canonical_solution": "MAX = 3000 \r\ndef smartNumber(n): \r\n\tprimes = [0] * MAX \r\n\tresult = [] \r\n\tfor i in range(2, MAX): \r\n\t\tif (primes[i] == 0): \r\n\t\t\tprimes[i] = 1 \r\n\t\t\tj = i * 2 \r\n\t\t\twhile (j < MAX): \r\n\t\t\t\tprimes[j] -= 1 \r\n\t\t\t\tif ( (primes[j] + 3) == 0): \r\n\t\t\t\t\tresult.append(j) \r\n\t\t\t\tj = j + i \r\n\tresult.sort() \r\n\treturn result[n - 1] ", "test": "def check(candidate):\n\tassert smartNumber(1) == 30\n\tassert smartNumber(50) == 273\n\tassert smartNumber(1000) == 2664", "entry_point": "smartNumber"}
{"task_id": 112, "prompt": "def amicable_numbers_sum(limit):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    >>> amicable_numbers_sum(999)\n    504\n    >>> amicable_numbers_sum(9999)\n    31626\n    >>> amicable_numbers_sum(99)\n    0\n    \"\"\"\n    ", "canonical_solution": "def amicable_numbers_sum(limit):\r\n    if not isinstance(limit, int):\r\n        return \"Input is not an integer!\"\r\n    if limit < 1:\r\n        return \"Input must be bigger than 0!\"\r\n    amicables = set()\r\n    for num in range(2, limit+1):\r\n        if num in amicables:\r\n            continue\r\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\r\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\r\n        if num == sum_fact2 and num != sum_fact:\r\n            amicables.add(num)\r\n            amicables.add(sum_fact2)\r\n    return sum(amicables)", "test": "def check(candidate):\n\tassert amicable_numbers_sum(999)==504\n\tassert amicable_numbers_sum(9999)==31626\n\tassert amicable_numbers_sum(99)==0", "entry_point": "amicable_numbers_sum"}
{"task_id": 113, "prompt": "def angle_complex(a, b):\n    \"\"\"\n    Write a function to get the angle of a complex number.\n    >>> angle_complex(0, 1j)\n    1.5707963267948966\n    >>> angle_complex(2, 1j)\n    0.4636476090008061\n    >>> angle_complex(0, 2j)\n    1.5707963267948966\n    \"\"\"\n    ", "canonical_solution": "import cmath\r\ndef angle_complex(a,b):\r\n  cn=complex(a,b)\r\n  angle=cmath.phase(a+b)\r\n  return angle", "test": "def check(candidate):\n\tassert angle_complex(0,1j)==1.5707963267948966 \n\tassert angle_complex(2,1j)==0.4636476090008061\n\tassert angle_complex(0,2j)==1.5707963267948966", "entry_point": "angle_complex"}
{"task_id": 114, "prompt": "def find_length(string, n):\n    \"\"\"\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    >>> find_length('11000010001', 11)\n    6\n    >>> find_length('10111', 5)\n    1\n    >>> find_length('11011101100101', 14)\n    2\n    \"\"\"\n    ", "canonical_solution": "def find_length(string, n): \r\n\tcurrent_sum = 0\r\n\tmax_sum = 0\r\n\tfor i in range(n): \r\n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \r\n\t\tif current_sum < 0: \r\n\t\t\tcurrent_sum = 0\r\n\t\tmax_sum = max(current_sum, max_sum) \r\n\treturn max_sum if max_sum else 0", "test": "def check(candidate):\n\tassert find_length(\"11000010001\", 11) == 6\n\tassert find_length(\"10111\", 5) == 1\n\tassert find_length(\"11011101100101\", 14) == 2 ", "entry_point": "find_length"}
{"task_id": 115, "prompt": "def sum(a, b):\n    \"\"\"\n    Write a python function to find the sum of common divisors of two given numbers.\n    >>> sum(10, 15)\n    6\n    >>> sum(100, 150)\n    93\n    >>> sum(4, 6)\n    3\n    \"\"\"\n    ", "canonical_solution": "def sum(a,b): \r\n    sum = 0\r\n    for i in range (1,min(a,b)): \r\n        if (a % i == 0 and b % i == 0): \r\n            sum += i \r\n    return sum", "test": "def check(candidate):\n\tassert sum(10,15) == 6\n\tassert sum(100,150) == 93\n\tassert sum(4,6) == 3", "entry_point": "sum"}
{"task_id": 116, "prompt": "def multiply_int(x, y):\n    \"\"\"\n    Write a function to multiply two integers without using the * operator in python.\n    >>> multiply_int(10, 20)\n    200\n    >>> multiply_int(5, 10)\n    50\n    >>> multiply_int(4, 8)\n    32\n    \"\"\"\n    ", "canonical_solution": "def multiply_int(x, y):\r\n    if y < 0:\r\n        return -multiply_int(x, -y)\r\n    elif y == 0:\r\n        return 0\r\n    elif y == 1:\r\n        return x\r\n    else:\r\n        return x + multiply_int(x, y - 1)", "test": "def check(candidate):\n\tassert multiply_int(10,20)==200\n\tassert multiply_int(5,10)==50\n\tassert multiply_int(4,8)==32", "entry_point": "multiply_int"}
{"task_id": 117, "prompt": "def long_words(n, str):\n    \"\"\"\n    Write a function to shortlist words that are longer than n from a given list of words.\n    >>> long_words(3, 'python is a programming language')\n    ['python', 'programming', 'language']\n    >>> long_words(2, 'writing a program')\n    ['writing', 'program']\n    >>> long_words(5, 'sorting list')\n    ['sorting']\n    \"\"\"\n    ", "canonical_solution": "def long_words(n, str):\r\n    word_len = []\r\n    txt = str.split(\" \")\r\n    for x in txt:\r\n        if len(x) > n:\r\n            word_len.append(x)\r\n    return word_len\t", "test": "def check(candidate):\n\tassert long_words(3,\"python is a programming language\")==['python','programming','language']\n\tassert long_words(2,\"writing a program\")==['writing','program']\n\tassert long_words(5,\"sorting list\")==['sorting']", "entry_point": "long_words"}
{"task_id": 118, "prompt": "def magic_square_test(my_matrix):\n    \"\"\"\n    Write a function to calculate magic square.\n    >>> magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])\n    True\n    >>> magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])\n    True\n    >>> magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])\n    False\n    \"\"\"\n    ", "canonical_solution": "def magic_square_test(my_matrix):\r\n    iSize = len(my_matrix[0])\r\n    sum_list = []\r\n    sum_list.extend([sum (lines) for lines in my_matrix])   \r\n    for col in range(iSize):\r\n        sum_list.append(sum(row[col] for row in my_matrix))\r\n    result1 = 0\r\n    for i in range(0,iSize):\r\n        result1 +=my_matrix[i][i]\r\n    sum_list.append(result1)      \r\n    result2 = 0\r\n    for i in range(iSize-1,-1,-1):\r\n        result2 +=my_matrix[i][i]\r\n    sum_list.append(result2)\r\n    if len(set(sum_list))>1:\r\n        return False\r\n    return True", "test": "def check(candidate):\n\tassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\n\tassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True\n\tassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False", "entry_point": "magic_square_test"}
{"task_id": 119, "prompt": "def max_occurrences(nums):\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list.\n    >>> max_occurrences([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2])\n    (2, 5)\n    >>> max_occurrences([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 16, 18])\n    (8, 2)\n    >>> max_occurrences([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10])\n    (20, 3)\n    \"\"\"\n    ", "canonical_solution": "from collections import defaultdict\r\ndef max_occurrences(nums):\r\n    dict = defaultdict(int)\r\n    for i in nums:\r\n        dict[i] += 1\r\n    result = max(dict.items(), key=lambda x: x[1]) \r\n    return result", "test": "def check(candidate):\n\tassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\n\tassert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)\n\tassert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)", "entry_point": "max_occurrences"}
{"task_id": 120, "prompt": "def reverse_vowels(str1):\n    \"\"\"\n    Write a python function to reverse only the vowels of a given string.\n    >>> reverse_vowels('Python')\n    'Python'\n    >>> reverse_vowels('USA')\n    'ASU'\n    >>> reverse_vowels('ab')\n    'ab'\n    \"\"\"\n    ", "canonical_solution": "def reverse_vowels(str1):\r\n\tvowels = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tvowels += char\r\n\tresult_string = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tresult_string += vowels[-1]\r\n\t\t\tvowels = vowels[:-1]\r\n\t\telse:\r\n\t\t\tresult_string += char\r\n\treturn result_string", "test": "def check(candidate):\n\tassert reverse_vowels(\"Python\") == \"Python\"\n\tassert reverse_vowels(\"USA\") == \"ASU\"\n\tassert reverse_vowels(\"ab\") == \"ab\"", "entry_point": "reverse_vowels"}
{"task_id": 121, "prompt": "def tup_string(tup1):\n    \"\"\"\n    Write a function to convert tuple to a string.\n    >>> tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))\n    'exercises'\n    >>> tup_string(('p', 'y', 't', 'h', 'o', 'n'))\n    'python'\n    >>> tup_string(('p', 'r', 'o', 'g', 'r', 'a', 'm'))\n    'program'\n    \"\"\"\n    ", "canonical_solution": "def tup_string(tup1):\r\n  str =  ''.join(tup1)\r\n  return str", "test": "def check(candidate):\n\tassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\n\tassert tup_string(('p','y','t','h','o','n'))==(\"python\")\n\tassert tup_string(('p','r','o','g','r','a','m'))==(\"program\")", "entry_point": "tup_string"}
{"task_id": 122, "prompt": "def sum_negativenum(nums):\n    \"\"\"\n    Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\n    >>> sum_negativenum([2, 4, (- 6), (- 9), 11, (- 12), 14, (- 5), 17])\n    (- 32)\n    >>> sum_negativenum([10, 15, (- 14), 13, (- 18), 12, (- 20)])\n    (- 52)\n    >>> sum_negativenum([19, (- 65), 57, 39, 152, (- 639), 121, 44, 90, (- 190)])\n    (- 894)\n    \"\"\"\n    ", "canonical_solution": "def sum_negativenum(nums):\r\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\r\n  return sum(sum_negativenum)", "test": "def check(candidate):\n\tassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\n\tassert sum_negativenum([10,15,-14,13,-18,12,-20])==-52\n\tassert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894", "entry_point": "sum_negativenum"}
{"task_id": 123, "prompt": "def check_last(arr, n, p):\n    \"\"\"\n    Write a python function to check whether the last element of given array is even or odd after performing an operation p times.\n    >>> check_last([5, 7, 10], 3, 1)\n    'ODD'\n    >>> check_last([2, 3], 2, 3)\n    'EVEN'\n    >>> check_last([1, 2, 3], 3, 1)\n    'ODD'\n    \"\"\"\n    ", "canonical_solution": "def check_last (arr,n,p): \r\n    _sum = 0\r\n    for i in range(n): \r\n        _sum = _sum + arr[i] \r\n    if p == 1: \r\n        if _sum % 2 == 0: \r\n            return \"ODD\"\r\n        else: \r\n            return \"EVEN\"\r\n    return \"EVEN\"\r\n      ", "test": "def check(candidate):\n\tassert check_last([5,7,10],3,1) == \"ODD\"\n\tassert check_last([2,3],2,3) == \"EVEN\"\n\tassert check_last([1,2,3],3,1) == \"ODD\"", "entry_point": "check_last"}
{"task_id": 124, "prompt": "def hexagonal_num(n):\n    \"\"\"\n    Write a function to find the nth hexagonal number.\n    >>> hexagonal_num(10)\n    190\n    >>> hexagonal_num(5)\n    45\n    >>> hexagonal_num(7)\n    91\n    \"\"\"\n    ", "canonical_solution": "def hexagonal_num(n): \r\n\treturn n*(2*n - 1) ", "test": "def check(candidate):\n\tassert hexagonal_num(10) == 190\n\tassert hexagonal_num(5) == 45\n\tassert hexagonal_num(7) == 91", "entry_point": "hexagonal_num"}
{"task_id": 125, "prompt": "def cal_electbill(units):\n    \"\"\"\n    Write a function to calculate electricity bill.\n    >>> cal_electbill(75)\n    246.25\n    >>> cal_electbill(265)\n    1442.75\n    >>> cal_electbill(100)\n    327.5\n    \"\"\"\n    ", "canonical_solution": "def cal_electbill(units):\r\n if(units < 50):\r\n    amount = units * 2.60\r\n    surcharge = 25\r\n elif(units <= 100):\r\n    amount = 130 + ((units - 50) * 3.25)\r\n    surcharge = 35\r\n elif(units <= 200):\r\n    amount = 130 + 162.50 + ((units - 100) * 5.26)\r\n    surcharge = 45\r\n else:\r\n    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)\r\n    surcharge = 75\r\n total = amount + surcharge\r\n return total", "test": "def check(candidate):\n\tassert cal_electbill(75)==246.25\n\tassert cal_electbill(265)==1442.75\n\tassert cal_electbill(100)==327.5", "entry_point": "cal_electbill"}
{"task_id": 126, "prompt": "def zero_count(nums):\n    \"\"\"\n    Write a function to find the ration of zeroes in an array of integers.\n    >>> zero_count([0, 1, 2, (- 1), (- 5), 6, 0, (- 3), (- 2), 3, 4, 6, 8])\n    0.15\n    >>> zero_count([2, 1, 2, (- 1), (- 5), 6, 4, (- 3), (- 2), 3, 4, 6, 8])\n    0.0\n    >>> zero_count([2, 4, (- 6), (- 9), 11, (- 12), 14, (- 5), 17])\n    0.0\n    \"\"\"\n    ", "canonical_solution": "from array import array\r\ndef zero_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x == 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)", "test": "def check(candidate):\n\tassert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\n\tassert zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.00\n\tassert zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.00", "entry_point": "zero_count"}
{"task_id": 127, "prompt": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    >>> is_Sum_Of_Powers_Of_Two(10)\n    True\n    >>> is_Sum_Of_Powers_Of_Two(7)\n    False\n    >>> is_Sum_Of_Powers_Of_Two(14)\n    True\n    \"\"\"\n    ", "canonical_solution": "def is_Sum_Of_Powers_Of_Two(n): \r\n    if (n % 2 == 1): \r\n        return False\r\n    else: \r\n        return True", "test": "def check(candidate):\n\tassert is_Sum_Of_Powers_Of_Two(10) == True\n\tassert is_Sum_Of_Powers_Of_Two(7) == False\n\tassert is_Sum_Of_Powers_Of_Two(14) == True", "entry_point": "is_Sum_Of_Powers_Of_Two"}
{"task_id": 128, "prompt": "def circle_circumference(r):\n    \"\"\"\n    Write a function to find the circumference of a circle.\n    >>> circle_circumference(10)\n    62.830000000000005\n    >>> circle_circumference(5)\n    31.415000000000003\n    >>> circle_circumference(4)\n    25.132\n    \"\"\"\n    ", "canonical_solution": "def circle_circumference(r):\r\n  perimeter=2*3.1415*r\r\n  return perimeter", "test": "def check(candidate):\n\tassert circle_circumference(10)==62.830000000000005\n\tassert circle_circumference(5)==31.415000000000003\n\tassert circle_circumference(4)==25.132", "entry_point": "circle_circumference"}
{"task_id": 129, "prompt": "def extract_singly(test_list):\n    \"\"\"\n    Write a function to extract elements that occur singly in the given tuple list.\n    >>> extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])\n    [3, 4, 5, 7, 1]\n    >>> extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)])\n    [1, 2, 3, 4, 7, 8]\n    >>> extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)])\n    [7, 8, 9, 10, 11, 12]\n    \"\"\"\n    ", "canonical_solution": "def extract_singly(test_list):\r\n  res = []\r\n  temp = set()\r\n  for inner in test_list:\r\n    for ele in inner:\r\n      if not ele in temp:\r\n        temp.add(ele)\r\n        res.append(ele)\r\n  return (res) ", "test": "def check(candidate):\n\tassert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\n\tassert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]\n\tassert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]", "entry_point": "extract_singly"}
{"task_id": 130, "prompt": "def pancake_sort(nums):\n    \"\"\"\n    Write a function to sort a list of elements using pancake sort.\n    >>> pancake_sort([15, 79, 25, 38, 69])\n    [15, 25, 38, 69, 79]\n    >>> pancake_sort([98, 12, 54, 36, 85])\n    [12, 36, 54, 85, 98]\n    >>> pancake_sort([41, 42, 32, 12, 23])\n    [12, 23, 32, 41, 42]\n    \"\"\"\n    ", "canonical_solution": "def pancake_sort(nums):\r\n    arr_len = len(nums)\r\n    while arr_len > 1:\r\n        mi = nums.index(max(nums[0:arr_len]))\r\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\r\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\r\n        arr_len -= 1\r\n    return nums", "test": "def check(candidate):\n\tassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\n\tassert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]\n\tassert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]", "entry_point": "pancake_sort"}
{"task_id": 131, "prompt": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Write a function to count the same pair in three given lists.\n    >>> count_samepair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9], [2, 1, 3, 1, 2, 6, 7, 9])\n    3\n    >>> count_samepair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 8], [2, 1, 3, 1, 2, 6, 7, 8])\n    4\n    >>> count_samepair([1, 2, 3, 4, 2, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 8], [2, 1, 3, 1, 2, 6, 7, 8])\n    5\n    \"\"\"\n    ", "canonical_solution": "def count_samepair(list1,list2,list3):\r\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\r\n    return result", "test": "def check(candidate):\n\tassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\n\tassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4\n\tassert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5", "entry_point": "count_samepair"}
{"task_id": 132, "prompt": "def find_lists(Input):\n    \"\"\"\n    Write a function to find number of lists present in the given tuple.\n    >>> find_lists(([1, 2, 3, 4], [5, 6, 7, 8]))\n    2\n    >>> find_lists(([1, 2], [3, 4], [5, 6]))\n    3\n    >>> find_lists([9, 8, 7, 6, 5, 4, 3, 2, 1])\n    1\n    \"\"\"\n    ", "canonical_solution": "def find_lists(Input): \r\n\tif isinstance(Input, list): \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn len(Input) ", "test": "def check(candidate):\n\tassert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\n\tassert find_lists(([1, 2], [3, 4], [5, 6]))  == 3\n\tassert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1", "entry_point": "find_lists"}
{"task_id": 133, "prompt": "def sum_Pairs(arr, n):\n    \"\"\"\n    Write a python function to find the sum of absolute differences in all pairs of the given array.\n    >>> sum_Pairs([1, 8, 9, 15, 16], 5)\n    74\n    >>> sum_Pairs([1, 2, 3, 4], 4)\n    10\n    >>> sum_Pairs([1, 2, 3, 4, 5, 7, 9, 11, 14], 9)\n    188\n    \"\"\"\n    ", "canonical_solution": "def sum_Pairs(arr,n): \r\n    sum = 0\r\n    for i in range(n - 1,-1,-1): \r\n        sum += i*arr[i] - (n-1-i) * arr[i] \r\n    return sum", "test": "def check(candidate):\n\tassert sum_Pairs([1,8,9,15,16],5) == 74\n\tassert sum_Pairs([1,2,3,4],4) == 10\n\tassert sum_Pairs([1,2,3,4,5,7,9,11,14],9) == 188", "entry_point": "sum_Pairs"}
{"task_id": 134, "prompt": "def max_Abs_Diff(arr, n):\n    \"\"\"\n    Write a python function to find the maximum difference between any two elements in a given array.\n    >>> max_Abs_Diff((2, 1, 5, 3), 4)\n    4\n    >>> max_Abs_Diff((9, 3, 2, 5, 1), 5)\n    8\n    >>> max_Abs_Diff((3, 2, 1), 3)\n    2\n    \"\"\"\n    ", "canonical_solution": "def max_Abs_Diff(arr,n): \r\n    minEle = arr[0] \r\n    maxEle = arr[0] \r\n    for i in range(1, n): \r\n        minEle = min(minEle,arr[i]) \r\n        maxEle = max(maxEle,arr[i]) \r\n    return (maxEle - minEle) ", "test": "def check(candidate):\n\tassert max_Abs_Diff((2,1,5,3),4) == 4\n\tassert max_Abs_Diff((9,3,2,5,1),5) == 8\n\tassert max_Abs_Diff((3,2,1),3) == 2", "entry_point": "max_Abs_Diff"}
{"task_id": 135, "prompt": "def ascii_value_string(str1):\n    \"\"\"\n    Write a function to find the ascii value of total characters in a string.\n    >>> ascii_value_string('python')\n    112\n    >>> ascii_value_string('Program')\n    80\n    >>> ascii_value_string('Language')\n    76\n    \"\"\"\n    ", "canonical_solution": "def ascii_value_string(str1):\r\n  for i in range(len(str1)):\r\n   return ord(str1[i])", "test": "def check(candidate):\n\tassert ascii_value_string(\"python\")==112\n\tassert ascii_value_string(\"Program\")==80\n\tassert ascii_value_string(\"Language\")==76", "entry_point": "ascii_value_string"}
{"task_id": 136, "prompt": "def max_path_sum(tri, m, n):\n    \"\"\"\n    Write a function to find the maximum total path sum in the given triangle.\n    >>> max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2)\n    14\n    >>> max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2)\n    24\n    >>> max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2)\n    53\n    \"\"\"\n    ", "canonical_solution": "def max_path_sum(tri, m, n): \r\n\tfor i in range(m-1, -1, -1): \r\n\t\tfor j in range(i+1): \r\n\t\t\tif (tri[i+1][j] > tri[i+1][j+1]): \r\n\t\t\t\ttri[i][j] += tri[i+1][j] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] += tri[i+1][j+1] \r\n\treturn tri[0][0]", "test": "def check(candidate):\n\tassert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\n\tassert max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24 \n\tassert max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53", "entry_point": "max_path_sum"}
{"task_id": 137, "prompt": "def sum_digits_twoparts(N):\n    \"\"\"\n    Write a function to divide a number into two parts such that the sum of digits is maximum.\n    >>> sum_digits_twoparts(35)\n    17\n    >>> sum_digits_twoparts(7)\n    7\n    >>> sum_digits_twoparts(100)\n    19\n    \"\"\"\n    ", "canonical_solution": "def sum_digits_single(x) : \r\n    ans = 0\r\n    while x : \r\n        ans += x % 10\r\n        x //= 10  \r\n    return ans \r\ndef closest(x) : \r\n    ans = 0\r\n    while (ans * 10 + 9 <= x) : \r\n        ans = ans * 10 + 9  \r\n    return ans   \r\ndef sum_digits_twoparts(N) : \r\n    A = closest(N)  \r\n    return sum_digits_single(A) + sum_digits_single(N - A) ", "test": "def check(candidate):\n\tassert sum_digits_twoparts(35)==17\n\tassert sum_digits_twoparts(7)==7\n\tassert sum_digits_twoparts(100)==19", "entry_point": "sum_digits_twoparts"}
{"task_id": 138, "prompt": "def longest_subseq_with_diff_one(arr, n):\n    \"\"\"\n    Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\n    >>> longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7)\n    6\n    >>> longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7)\n    3\n    >>> longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8)\n    7\n    \"\"\"\n    ", "canonical_solution": "def longest_subseq_with_diff_one(arr, n): \r\n\tdp = [1 for i in range(n)] \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): \r\n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \r\n\tresult = 1\r\n\tfor i in range(n): \r\n\t\tif (result < dp[i]): \r\n\t\t\tresult = dp[i] \r\n\treturn result", "test": "def check(candidate):\n\tassert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\n\tassert longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) == 3\n\tassert longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7", "entry_point": "longest_subseq_with_diff_one"}
{"task_id": 139, "prompt": "def does_Contain_B(a, b, c):\n    \"\"\"\n    Write a python function to find whether the given number is present in the infinite sequence or not.\n    >>> does_Contain_B(1, 7, 3)\n    True\n    >>> does_Contain_B(1, (- 3), 5)\n    False\n    >>> does_Contain_B(3, 2, 5)\n    False\n    \"\"\"\n    ", "canonical_solution": "def does_Contain_B(a,b,c): \r\n    if (a == b): \r\n        return True\r\n    if ((b - a) * c > 0 and (b - a) % c == 0): \r\n        return True\r\n    return False", "test": "def check(candidate):\n\tassert does_Contain_B(1,7,3) == True\n\tassert does_Contain_B(1,-3,5) == False\n\tassert does_Contain_B(3,2,5) == False", "entry_point": "does_Contain_B"}
{"task_id": 140, "prompt": "def is_coprime(x, y):\n    \"\"\"\n    Write a python function to check whether the given number is co-prime or not.\n    >>> is_coprime(17, 13)\n    True\n    >>> is_coprime(15, 21)\n    False\n    >>> is_coprime(25, 45)\n    False\n    \"\"\"\n    ", "canonical_solution": "def gcd(p,q):\r\n    while q != 0:\r\n        p, q = q,p%q\r\n    return p\r\ndef is_coprime(x,y):\r\n    return gcd(x,y) == 1", "test": "def check(candidate):\n\tassert is_coprime(17,13) == True\n\tassert is_coprime(15,21) == False\n\tassert is_coprime(25,45) == False", "entry_point": "is_coprime"}
{"task_id": 141, "prompt": "def merge_sort(x):\n    \"\"\"\n    Write a function to sort the given array by using merge sort.\n    >>> merge_sort([3, 4, 2, 6, 5, 7, 1, 9])\n    [1, 2, 3, 4, 5, 6, 7, 9]\n    >>> merge_sort([7, 25, 45, 78, 11, 33, 19])\n    [7, 11, 19, 25, 33, 45, 78]\n    >>> merge_sort([3, 1, 4, 9, 8])\n    [1, 3, 4, 8, 9]\n    \"\"\"\n    ", "canonical_solution": "def merge(a,b):\r\n    c = []\r\n    while len(a) != 0 and len(b) != 0:\r\n        if a[0] < b[0]:\r\n            c.append(a[0])\r\n            a.remove(a[0])\r\n        else:\r\n            c.append(b[0])\r\n            b.remove(b[0])\r\n    if len(a) == 0:\r\n        c += b\r\n    else:\r\n        c += a\r\n    return c\r\ndef merge_sort(x):\r\n    if len(x) == 0 or len(x) == 1:\r\n        return x\r\n    else:\r\n        middle = len(x)//2\r\n        a = merge_sort(x[:middle])\r\n        b = merge_sort(x[middle:])\r\n        return merge(a,b)\r\n", "test": "def check(candidate):\n\tassert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\n\tassert merge_sort([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78]\n\tassert merge_sort([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9]", "entry_point": "merge_sort"}
{"task_id": 142, "prompt": "def parabola_vertex(a, b, c):\n    \"\"\"\n    Write a function to find the vertex of a parabola.\n    >>> parabola_vertex(5, 3, 2)\n    ((- 0.3), 1.55)\n    >>> parabola_vertex(9, 8, 4)\n    ((- 0.4444444444444444), 2.2222222222222223)\n    >>> parabola_vertex(2, 4, 6)\n    ((- 1.0), 4.0)\n    \"\"\"\n    ", "canonical_solution": "def parabola_vertex(a, b, c): \r\n  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\r\n  return vertex", "test": "def check(candidate):\n\tassert parabola_vertex(5,3,2)==(-0.3, 1.55)\n\tassert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)\n\tassert parabola_vertex(2,4,6)==(-1.0, 4.0)", "entry_point": "parabola_vertex"}
{"task_id": 143, "prompt": "def specified_element(nums, N):\n    \"\"\"\n    Write a function to extract every specified element from a given two dimensional list.\n    >>> specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 0)\n    [1, 4, 7]\n    >>> specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 2)\n    [3, 6, 9]\n    >>> specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 3)\n    [2, 2, 5]\n    \"\"\"\n    ", "canonical_solution": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result", "test": "def check(candidate):\n\tassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\n\tassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]\n\tassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]", "entry_point": "specified_element"}
{"task_id": 144, "prompt": "def even_bit_toggle_number(n):\n    \"\"\"\n    Write a python function to toggle all even bits of a given number.\n    >>> even_bit_toggle_number(10)\n    0\n    >>> even_bit_toggle_number(20)\n    30\n    >>> even_bit_toggle_number(30)\n    20\n    \"\"\"\n    ", "canonical_solution": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n \r\n    while (temp > 0) :     \r\n        if (count % 2 == 1) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res ", "test": "def check(candidate):\n\tassert even_bit_toggle_number(10) == 0\n\tassert even_bit_toggle_number(20) == 30\n\tassert even_bit_toggle_number(30) == 20", "entry_point": "even_bit_toggle_number"}
{"task_id": 145, "prompt": "def tuple_int_str(tuple_str):\n    \"\"\"\n    Write a function to convert a tuple of string values to a tuple of integer values.\n    >>> tuple_int_str((('333', '33'), ('1416', '55')))\n    ((333, 33), (1416, 55))\n    >>> tuple_int_str((('999', '99'), ('1000', '500')))\n    ((999, 99), (1000, 500))\n    >>> tuple_int_str((('666', '66'), ('1500', '555')))\n    ((666, 66), (1500, 555))\n    \"\"\"\n    ", "canonical_solution": "def tuple_int_str(tuple_str):\r\n    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)\r\n    return result", "test": "def check(candidate):\n\tassert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\n\tassert tuple_int_str((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))\n\tassert tuple_int_str((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))", "entry_point": "tuple_int_str"}
{"task_id": 146, "prompt": "def encode_list(list1):\n    \"\"\"\n    Write a function to reflect the run-length encoding from a list.\n    >>> encode_list([1, 1, 2, 3, 4, 4.3, 5, 1])\n    [[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n    >>> encode_list('automatically')\n    [[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]\n    >>> encode_list('python')\n    [[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]\n    \"\"\"\n    ", "canonical_solution": "from itertools import groupby\r\ndef encode_list(list1):\r\n    return [[len(list(group)), key] for key, group in groupby(list1)]", "test": "def check(candidate):\n\tassert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\n\tassert encode_list('automatically')==[[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]\n\tassert encode_list('python')==[[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]", "entry_point": "encode_list"}
{"task_id": 147, "prompt": "def min_Ops(arr, n, k):\n    \"\"\"\n    Write a python function to find k number of operations required to make all elements equal.\n    >>> min_Ops([2, 2, 2, 2], 4, 3)\n    0\n    >>> min_Ops([4, 2, 6, 8], 4, 3)\n    (- 1)\n    >>> min_Ops([21, 33, 9, 45, 63], 5, 6)\n    24\n    \"\"\"\n    ", "canonical_solution": "def min_Ops(arr,n,k): \r\n    max1 = max(arr) \r\n    res = 0\r\n    for i in range(0,n):  \r\n        if ((max1 - arr[i]) % k != 0): \r\n            return -1 \r\n        else: \r\n            res += (max1 - arr[i]) / k \r\n    return int(res) ", "test": "def check(candidate):\n\tassert min_Ops([2,2,2,2],4,3) == 0\n\tassert min_Ops([4,2,6,8],4,3) == -1\n\tassert min_Ops([21,33,9,45,63],5,6) == 24", "entry_point": "min_Ops"}
{"task_id": 148, "prompt": "def month_season(month, days):\n    \"\"\"\n    Write a function to print the season for the given month and day.\n    >>> month_season('January', 4)\n    'winter'\n    >>> month_season('October', 28)\n    'autumn'\n    >>> month_season('June', 6)\n    'spring'\n    \"\"\"\n    ", "canonical_solution": "def month_season(month,days):\r\n if month in ('January', 'February', 'March'):\r\n\t season = 'winter'\r\n elif month in ('April', 'May', 'June'):\r\n\t season = 'spring'\r\n elif month in ('July', 'August', 'September'):\r\n\t season = 'summer'\r\n else:\r\n\t season = 'autumn'\r\n if (month == 'March') and (days > 19):\r\n\t season = 'spring'\r\n elif (month == 'June') and (days > 20):\r\n\t season = 'summer'\r\n elif (month == 'September') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'October') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'November') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'December') and (days > 20):\r\n\t season = 'winter'\r\n return season", "test": "def check(candidate):\n\tassert month_season('January',4)==('winter')\n\tassert month_season('October',28)==('autumn')\n\tassert month_season('June',6)==('spring')", "entry_point": "month_season"}
{"task_id": 149, "prompt": "def solution(a, b, n):\n    \"\"\"\n    Write a function to find x and y that satisfies ax + by = n.\n    >>> solution(2, 3, 7)\n    ('x = ', 2, ', y = ', 1)\n    >>> solution(4, 2, 7)\n    'No solution'\n    >>> solution(1, 13, 17)\n    ('x = ', 4, ', y = ', 1)\n    \"\"\"\n    ", "canonical_solution": "def solution (a, b, n): \r\n\ti = 0\r\n\twhile i * a <= n: \r\n\t\tif (n - (i * a)) % b == 0: \r\n\t\t\treturn (\"x = \",i ,\", y = \", \r\n\t\t\tint((n - (i * a)) / b)) \r\n\t\t\treturn 0\r\n\t\ti = i + 1\r\n\treturn (\"No solution\") ", "test": "def check(candidate):\n\tassert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\n\tassert solution(4, 2, 7) == 'No solution'\n\tassert solution(1, 13, 17) == ('x = ', 4, ', y = ', 1)", "entry_point": "solution"}
{"task_id": 150, "prompt": "def remove_elements(list1, list2):\n    \"\"\"\n    Write a function to remove all elements from a given list present in another list.\n    >>> remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8])\n    [1, 3, 5, 7, 9, 10]\n    >>> remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7])\n    [2, 4, 6, 8, 9, 10]\n    >>> remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7])\n    [1, 2, 3, 4, 6, 8, 9, 10]\n    \"\"\"\n    ", "canonical_solution": "def remove_elements(list1, list2):\r\n    result = [x for x in list1 if x not in list2]\r\n    return result", "test": "def check(candidate):\n\tassert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\n\tassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]\n\tassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10]", "entry_point": "remove_elements"}
{"task_id": 151, "prompt": "def sum_series(n):\n    \"\"\"\n    Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\n    >>> sum_series(6)\n    12\n    >>> sum_series(10)\n    30\n    >>> sum_series(9)\n    25\n    \"\"\"\n    ", "canonical_solution": "def sum_series(n):\r\n  if n < 1:\r\n    return 0\r\n  else:\r\n    return n + sum_series(n - 2)", "test": "def check(candidate):\n\tassert sum_series(6)==12\n\tassert sum_series(10)==30\n\tassert sum_series(9)==25", "entry_point": "sum_series"}
{"task_id": 152, "prompt": "def area_polygon(s, l):\n    \"\"\"\n    Write a function to calculate the area of a regular polygon.\n    >>> area_polygon(4, 20)\n    400.00000000000006\n    >>> area_polygon(10, 15)\n    1731.1969896610804\n    >>> area_polygon(9, 7)\n    302.90938549487214\n    \"\"\"\n    ", "canonical_solution": "from math import tan, pi\r\ndef area_polygon(s,l):\r\n  area = s * (l ** 2) / (4 * tan(pi / s))\r\n  return area", "test": "def check(candidate):\n\tassert area_polygon(4,20)==400.00000000000006\n\tassert area_polygon(10,15)==1731.1969896610804\n\tassert area_polygon(9,7)==302.90938549487214", "entry_point": "area_polygon"}
{"task_id": 153, "prompt": "def areEquivalent(num1, num2):\n    \"\"\"\n    Write a python function to check whether the sum of divisors are same or not.\n    >>> areEquivalent(36, 57)\n    False\n    >>> areEquivalent(2, 4)\n    False\n    >>> areEquivalent(23, 47)\n    True\n    \"\"\"\n    ", "canonical_solution": "import math \r\ndef divSum(n): \r\n    sum = 1; \r\n    i = 2; \r\n    while(i * i <= n): \r\n        if (n % i == 0): \r\n            sum = (sum + i +math.floor(n / i)); \r\n        i += 1; \r\n    return sum; \r\ndef areEquivalent(num1,num2): \r\n    return divSum(num1) == divSum(num2); ", "test": "def check(candidate):\n\tassert areEquivalent(36,57) == False\n\tassert areEquivalent(2,4) == False\n\tassert areEquivalent(23,47) == True", "entry_point": "areEquivalent"}
{"task_id": 154, "prompt": "def count_char_position(str1):\n    \"\"\"\n    Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\n    >>> count_char_position('xbcefg')\n    2\n    >>> count_char_position('ABcED')\n    3\n    >>> count_char_position('AbgdeF')\n    5\n    \"\"\"\n    ", "canonical_solution": "def count_char_position(str1): \r\n    count_chars = 0\r\n    for i in range(len(str1)):\r\n        if ((i == ord(str1[i]) - ord('A')) or \r\n            (i == ord(str1[i]) - ord('a'))): \r\n            count_chars += 1\r\n    return count_chars ", "test": "def check(candidate):\n\tassert count_char_position(\"xbcefg\") == 2\n\tassert count_char_position(\"ABcED\") == 3\n\tassert count_char_position(\"AbgdeF\") == 5", "entry_point": "count_char_position"}
{"task_id": 155, "prompt": "def find_even_Pair(A, N):\n    \"\"\"\n    Write a python function to count the pairs with xor as an even number.\n    >>> find_even_Pair([5, 4, 7, 2, 1], 5)\n    4\n    >>> find_even_Pair([7, 2, 8, 1, 0, 5, 11], 7)\n    9\n    >>> find_even_Pair([1, 2, 3], 3)\n    1\n    \"\"\"\n    ", "canonical_solution": "def find_even_Pair(A,N): \r\n    evenPair = 0\r\n    for i in range(0,N): \r\n        for j in range(i+1,N): \r\n            if ((A[i] ^ A[j]) % 2 == 0): \r\n                evenPair+=1\r\n    return evenPair; ", "test": "def check(candidate):\n\tassert find_even_Pair([5,4,7,2,1],5) == 4\n\tassert find_even_Pair([7,2,8,1,0,5,11],7) == 9\n\tassert find_even_Pair([1,2,3],3) == 1", "entry_point": "find_even_Pair"}
{"task_id": 156, "prompt": "def next_Power_Of_2(n):\n    \"\"\"\n    Write a python function to find smallest power of 2 greater than or equal to n.\n    >>> next_Power_Of_2(0)\n    1\n    >>> next_Power_Of_2(5)\n    8\n    >>> next_Power_Of_2(17)\n    32\n    \"\"\"\n    ", "canonical_solution": "def next_Power_Of_2(n): \r\n    count = 0; \r\n    if (n and not(n & (n - 1))): \r\n        return n   \r\n    while( n != 0): \r\n        n >>= 1\r\n        count += 1\r\n    return 1 << count; ", "test": "def check(candidate):\n\tassert next_Power_Of_2(0) == 1\n\tassert next_Power_Of_2(5) == 8\n\tassert next_Power_Of_2(17) == 32", "entry_point": "next_Power_Of_2"}
{"task_id": 157, "prompt": "def frequency(a, x):\n    \"\"\"\n    Write a python function to find the frequency of a number in a given array.\n    >>> frequency([1, 2, 3], 4)\n    0\n    >>> frequency([1, 2, 2, 3, 3, 3, 4], 3)\n    3\n    >>> frequency([0, 1, 2, 3, 1, 2], 1)\n    2\n    \"\"\"\n    ", "canonical_solution": "def frequency(a,x): \r\n    count = 0  \r\n    for i in a: \r\n        if i == x: count += 1\r\n    return count ", "test": "def check(candidate):\n\tassert frequency([1,2,3],4) == 0\n\tassert frequency([1,2,2,3,3,3,4],3) == 3\n\tassert frequency([0,1,2,3,1,2],1) == 2", "entry_point": "frequency"}
{"task_id": 158, "prompt": "def get_pell(n):\n    \"\"\"\n    Write a function to calculate the nth pell number.\n    >>> get_pell(4)\n    12\n    >>> get_pell(7)\n    169\n    >>> get_pell(8)\n    408\n    \"\"\"\n    ", "canonical_solution": "def get_pell(n): \r\n\tif (n <= 2): \r\n\t\treturn n \r\n\ta = 1\r\n\tb = 2\r\n\tfor i in range(3, n+1): \r\n\t\tc = 2 * b + a \r\n\t\ta = b \r\n\t\tb = c \r\n\treturn b ", "test": "def check(candidate):\n\tassert get_pell(4) == 12\n\tassert get_pell(7) == 169\n\tassert get_pell(8) == 408", "entry_point": "get_pell"}
{"task_id": 159, "prompt": "def sum_range_list(list1, m, n):\n    \"\"\"\n    Write a function to find sum of the numbers in a list between the indices of a specified range.\n    >>> sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10)\n    29\n    >>> sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 5, 7)\n    16\n    >>> sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 7, 10)\n    38\n    \"\"\"\n    ", "canonical_solution": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += list1[i]                                                                                                                                                                                                  \r\n    return sum_range   ", "test": "def check(candidate):\n\tassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\n\tassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16\n\tassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38", "entry_point": "sum_range_list"}
{"task_id": 160, "prompt": "def perimeter_pentagon(a):\n    \"\"\"\n    Write a function to find the perimeter of a pentagon.\n    >>> perimeter_pentagon(5)\n    25\n    >>> perimeter_pentagon(10)\n    50\n    >>> perimeter_pentagon(15)\n    75\n    \"\"\"\n    ", "canonical_solution": "import math\r\ndef perimeter_pentagon(a):\r\n  perimeter=(5*a)\r\n  return perimeter", "test": "def check(candidate):\n\tassert perimeter_pentagon(5)==25\n\tassert perimeter_pentagon(10)==50\n\tassert perimeter_pentagon(15)==75", "entry_point": "perimeter_pentagon"}
{"task_id": 161, "prompt": "def count_occurance(s):\n    \"\"\"\n    Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\n    >>> count_occurance('letstdlenstdporstd')\n    3\n    >>> count_occurance('truststdsolensporsd')\n    1\n    >>> count_occurance('makestdsostdworthit')\n    2\n    \"\"\"\n    ", "canonical_solution": "def count_occurance(s):\r\n  count=0\r\n  for i in range(len(s)):\r\n    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):\r\n      count = count + 1\r\n  return count", "test": "def check(candidate):\n\tassert count_occurance(\"letstdlenstdporstd\") == 3\n\tassert count_occurance(\"truststdsolensporsd\") == 1\n\tassert count_occurance(\"makestdsostdworthit\") == 2", "entry_point": "count_occurance"}
{"task_id": 162, "prompt": "def remove_splchar(text):\n    \"\"\"\n    Write a function to remove everything except alphanumeric characters from a string.\n    >>> remove_splchar('python  @#&^%$*program123')\n    'pythonprogram123'\n    >>> remove_splchar('python %^$@!^&*()  programming24%$^^()    language')\n    'pythonprogramming24language'\n    >>> remove_splchar('python   ^%&^()(+_)(_^&67)                  program')\n    'python67program'\n    \"\"\"\n    ", "canonical_solution": "import re\r\ndef remove_splchar(text): \r\n pattern = re.compile('[\\W_]+')\r\n return (pattern.sub('', text))", "test": "def check(candidate):\n\tassert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\n\tassert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')\n\tassert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')", "entry_point": "remove_splchar"}
{"task_id": 163, "prompt": "def group_keyvalue(l):\n    \"\"\"\n    Write a function to group a sequence of key-value pairs into a dictionary of lists.\n    >>> group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])\n    {'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n    >>> group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])\n    {'python': [1, 2, 3, 4, 5]}\n    >>> group_keyvalue([('yellow', 100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])\n    {'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}\n    \"\"\"\n    ", "canonical_solution": "def group_keyvalue(l):\r\n    result = {}\r\n    for k, v in l:\r\n         result.setdefault(k, []).append(v)\r\n    return result", "test": "def check(candidate):\n\tassert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\n\tassert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}\n\tassert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}", "entry_point": "group_keyvalue"}
{"task_id": 164, "prompt": "def is_valid_parenthese(str1):\n    \"\"\"\n    Write a function to verify validity of a string of parentheses.\n    >>> is_valid_parenthese('(){}[]')\n    True\n    >>> is_valid_parenthese('()[{)}')\n    False\n    >>> is_valid_parenthese('()')\n    True\n    \"\"\"\n    ", "canonical_solution": "def is_valid_parenthese( str1):\r\n        stack, pchar = [], {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\r\n        for parenthese in str1:\r\n            if parenthese in pchar:\r\n                stack.append(parenthese)\r\n            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:\r\n                return False\r\n        return len(stack) == 0", "test": "def check(candidate):\n\tassert is_valid_parenthese(\"(){}[]\")==True\n\tassert is_valid_parenthese(\"()[{)}\")==False\n\tassert is_valid_parenthese(\"()\")==True", "entry_point": "is_valid_parenthese"}
{"task_id": 165, "prompt": "def perimeter_triangle(a, b, c):\n    \"\"\"\n    Write a function to find the perimeter of a triangle.\n    >>> perimeter_triangle(10, 20, 30)\n    60\n    >>> perimeter_triangle(3, 4, 5)\n    12\n    >>> perimeter_triangle(25, 35, 45)\n    105\n    \"\"\"\n    ", "canonical_solution": "def perimeter_triangle(a,b,c):\r\n  perimeter=a+b+c\r\n  return perimeter", "test": "def check(candidate):\n\tassert perimeter_triangle(10,20,30)==60\n\tassert perimeter_triangle(3,4,5)==12\n\tassert perimeter_triangle(25,35,45)==105", "entry_point": "perimeter_triangle"}
{"task_id": 166, "prompt": "def answer(L, R):\n    \"\"\"\n    Write a python function to find two distinct numbers such that their lcm lies within the given range.\n    >>> answer(3, 8)\n    (3, 6)\n    >>> answer(2, 6)\n    (2, 4)\n    >>> answer(1, 3)\n    (1, 2)\n    \"\"\"\n    ", "canonical_solution": "def answer(L,R): \r\n    if (2 * L <= R): \r\n        return (L ,2*L)\r\n    else: \r\n        return (-1) ", "test": "def check(candidate):\n\tassert answer(3,8) == (3,6)\n\tassert answer(2,6) == (2,4)\n\tassert answer(1,3) == (1,2)", "entry_point": "answer"}
{"task_id": 167, "prompt": "def string_literals(patterns, text):\n    \"\"\"\n    Write a function to search some literals strings in a string.\n    >>> string_literals(['language'], 'python language')\n    'Matched!'\n    >>> string_literals(['program'], 'python language')\n    'Not Matched!'\n    >>> string_literals(['python'], 'programming language')\n    'Not Matched!'\n    \"\"\"\n    ", "canonical_solution": "import re\r\ndef string_literals(patterns,text):\r\n  for pattern in patterns:\r\n     if re.search(pattern,  text):\r\n       return ('Matched!')\r\n     else:\r\n       return ('Not Matched!')", "test": "def check(candidate):\n\tassert string_literals(['language'],'python language')==('Matched!')\n\tassert string_literals(['program'],'python language')==('Not Matched!')\n\tassert string_literals(['python'],'programming language')==('Not Matched!')", "entry_point": "string_literals"}
{"task_id": 168, "prompt": "def is_num_keith(x):\n    \"\"\"\n    Write a function to find if the given number is a keith number or not.\n    >>> is_num_keith(14)\n    True\n    >>> is_num_keith(12)\n    False\n    >>> is_num_keith(197)\n    True\n    \"\"\"\n    ", "canonical_solution": "def is_num_keith(x): \r\n\tterms = [] \r\n\ttemp = x \r\n\tn = 0 \r\n\twhile (temp > 0): \r\n\t\tterms.append(temp % 10) \r\n\t\ttemp = int(temp / 10) \r\n\t\tn+=1 \r\n\tterms.reverse() \r\n\tnext_term = 0 \r\n\ti = n \r\n\twhile (next_term < x): \r\n\t\tnext_term = 0 \r\n\t\tfor j in range(1,n+1): \r\n\t\t\tnext_term += terms[i - j] \r\n\t\tterms.append(next_term) \r\n\t\ti+=1 \r\n\treturn (next_term == x) ", "test": "def check(candidate):\n\tassert is_num_keith(14) == True\n\tassert is_num_keith(12) == False\n\tassert is_num_keith(197) == True", "entry_point": "is_num_keith"}
{"task_id": 169, "prompt": "def distance_lat_long(slat, slon, elat, elon):\n    \"\"\"\n    Write a function to calculate distance between two points using latitude and longitude.\n    >>> distance_lat_long(23.5, 67.5, 25.5, 69.5)\n    12179.372041317429\n    >>> distance_lat_long(10.5, 20.5, 30.5, 40.5)\n    6069.397933300514\n    >>> distance_lat_long(10, 20, 30, 40)\n    6783.751974994595\n    \"\"\"\n    ", "canonical_solution": "from math import radians, sin, cos, acos\r\ndef distance_lat_long(slat,slon,elat,elon):\r\n dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))\r\n return dist", "test": "def check(candidate):\n\tassert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\n\tassert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514\n\tassert distance_lat_long(10,20,30,40)==6783.751974994595", "entry_point": "distance_lat_long"}
{"task_id": 170, "prompt": "def common_prefix(arr, n):\n    \"\"\"\n    Write a function to find the longest common prefix in the given set of strings.\n    >>> common_prefix(['tablets', 'tables', 'taxi', 'tamarind'], 4)\n    'ta'\n    >>> common_prefix(['apples', 'ape', 'april'], 3)\n    'ap'\n    >>> common_prefix(['teens', 'teenager', 'teenmar'], 3)\n    'teen'\n    \"\"\"\n    ", "canonical_solution": "def common_prefix_util(str1, str2): \r\n\tresult = \"\"; \r\n\tn1 = len(str1) \r\n\tn2 = len(str2) \r\n\ti = 0\r\n\tj = 0\r\n\twhile i <= n1 - 1 and j <= n2 - 1: \r\n\t\tif (str1[i] != str2[j]): \r\n\t\t\tbreak\r\n\t\tresult += str1[i] \r\n\t\ti += 1\r\n\t\tj += 1\r\n\treturn (result) \r\ndef common_prefix (arr, n): \r\n\tprefix = arr[0] \r\n\tfor i in range (1, n): \r\n\t\tprefix = common_prefix_util(prefix, arr[i]) \r\n\treturn (prefix) ", "test": "def check(candidate):\n\tassert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\n\tassert common_prefix([\"apples\", \"ape\", \"april\"], 3) == 'ap'\n\tassert common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3) == 'teen'", "entry_point": "common_prefix"}
{"task_id": 171, "prompt": "def find_character(string):\n    \"\"\"\n    Write a function to find uppercase, lowercase, special character and numeric values using regex.\n    >>> find_character('ThisIsGeeksforGeeks')\n    (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n    >>> find_character('Hithere2')\n    (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])\n    >>> find_character('HeyFolks32')\n    (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])\n    \"\"\"\n    ", "canonical_solution": "import re\r\ndef find_character(string):\r\n  uppercase_characters = re.findall(r\"[A-Z]\", string) \r\n  lowercase_characters = re.findall(r\"[a-z]\", string) \r\n  numerical_characters = re.findall(r\"[0-9]\", string) \r\n  special_characters = re.findall(r\"[, .!?]\", string) \r\n  return uppercase_characters, lowercase_characters, numerical_characters, special_characters", "test": "def check(candidate):\n\tassert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\n\tassert find_character(\"Hithere2\") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])\n\tassert find_character(\"HeyFolks32\") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])", "entry_point": "find_character"}
{"task_id": 172, "prompt": "def count_pairs(arr, n, k):\n    \"\"\"\n    Write a function to count all the distinct pairs having a difference of k in any array.\n    >>> count_pairs([1, 5, 3, 4, 2], 5, 3)\n    2\n    >>> count_pairs([8, 12, 16, 4, 0, 20], 6, 4)\n    5\n    >>> count_pairs([2, 4, 1, 3, 4], 5, 2)\n    3\n    \"\"\"\n    ", "canonical_solution": "def count_pairs(arr, n, k):\r\n  count=0;\r\n  for i in range(0,n):\r\n    for j in range(i+1, n):\r\n      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:\r\n        count += 1\r\n  return count", "test": "def check(candidate):\n\tassert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\n\tassert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5\n\tassert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3", "entry_point": "count_pairs"}
{"task_id": 173, "prompt": "def greater_specificnum(list, num):\n    \"\"\"\n    Write a function to find all the values in a list that are greater than a specified number.\n    >>> greater_specificnum([220, 330, 500], 200)\n    True\n    >>> greater_specificnum([12, 17, 21], 20)\n    False\n    >>> greater_specificnum([1, 2, 3, 4], 10)\n    False\n    \"\"\"\n    ", "canonical_solution": "def greater_specificnum(list,num):\r\n greater_specificnum=all(x >= num for x in list)\r\n return greater_specificnum", "test": "def check(candidate):\n\tassert greater_specificnum([220, 330, 500],200)==True\n\tassert greater_specificnum([12, 17, 21],20)==False\n\tassert greater_specificnum([1,2,3,4],10)==False", "entry_point": "greater_specificnum"}
{"task_id": 174, "prompt": "def parabola_focus(a, b, c):\n    \"\"\"\n    Write a function to find the focus of a parabola.\n    >>> parabola_focus(5, 3, 2)\n    ((- 0.3), 1.6)\n    >>> parabola_focus(9, 8, 4)\n    ((- 0.4444444444444444), 2.25)\n    >>> parabola_focus(2, 4, 6)\n    ((- 1.0), 4.125)\n    \"\"\"\n    ", "canonical_solution": "def parabola_focus(a, b, c): \r\n  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))\r\n  return focus", "test": "def check(candidate):\n\tassert parabola_focus(5,3,2)==(-0.3, 1.6)\n\tassert parabola_focus(9,8,4)==(-0.4444444444444444, 2.25)\n\tassert parabola_focus(2,4,6)==(-1.0, 4.125)", "entry_point": "parabola_focus"}
{"task_id": 175, "prompt": "def check_literals(text, patterns):\n    \"\"\"\n    Write a function to search some literals strings in a string by using regex.\n    >>> check_literals('The quick brown fox jumps over the lazy dog.', ['fox'])\n    'Matched!'\n    >>> check_literals('The quick brown fox jumps over the lazy dog.', ['horse'])\n    'Not Matched!'\n    >>> check_literals('The quick brown fox jumps over the lazy dog.', ['lazy'])\n    'Matched!'\n    \"\"\"\n    ", "canonical_solution": "import re\r\ndef check_literals(text, patterns):\r\n  for pattern in patterns:\r\n    if re.search(pattern,  text):\r\n        return ('Matched!')\r\n    else:\r\n        return ('Not Matched!')", "test": "def check(candidate):\n\tassert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\n\tassert check_literals('The quick brown fox jumps over the lazy dog.',['horse']) == 'Not Matched!'\n\tassert check_literals('The quick brown fox jumps over the lazy dog.',['lazy']) == 'Matched!'", "entry_point": "check_literals"}
{"task_id": 176, "prompt": "def longest_common_subsequence(X, Y, m, n):\n    \"\"\"\n    Write a function to find the longest common subsequence for the given two sequences.\n    >>> longest_common_subsequence('AGGTAB', 'GXTXAYB', 6, 7)\n    4\n    >>> longest_common_subsequence('ABCDGH', 'AEDFHR', 6, 6)\n    3\n    >>> longest_common_subsequence('AXYT', 'AYZX', 4, 4)\n    2\n    \"\"\"\n    ", "canonical_solution": "def longest_common_subsequence(X, Y, m, n): \r\n    if m == 0 or n == 0: \r\n       return 0 \r\n    elif X[m-1] == Y[n-1]: \r\n       return 1 + longest_common_subsequence(X, Y, m-1, n-1) \r\n    else: \r\n       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))", "test": "def check(candidate):\n\tassert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\n\tassert longest_common_subsequence(\"ABCDGH\" , \"AEDFHR\", 6, 6) == 3\n\tassert longest_common_subsequence(\"AXYT\" , \"AYZX\", 4, 4) == 2", "entry_point": "longest_common_subsequence"}
{"task_id": 177, "prompt": "def prod_Square(n):\n    \"\"\"\n    Write a python function to check whether the given number can be represented by product of two squares or not.\n    >>> prod_Square(25)\n    False\n    >>> prod_Square(30)\n    False\n    >>> prod_Square(16)\n    True\n    \"\"\"\n    ", "canonical_solution": "def prod_Square(n):\r\n    for i in range(2,(n) + 1):\r\n        if (i*i < (n+1)):\r\n            for j in range(2,n + 1):\r\n                if ((i*i*j*j) == n):\r\n                    return True;\r\n    return False;", "test": "def check(candidate):\n\tassert prod_Square(25) == False\n\tassert prod_Square(30) == False\n\tassert prod_Square(16) == True", "entry_point": "prod_Square"}
{"task_id": 178, "prompt": "def first_Missing_Positive(arr, n):\n    \"\"\"\n    Write a python function to find the first missing positive number.\n    >>> first_Missing_Positive([1, 2, 3, (- 1), 5], 5)\n    4\n    >>> first_Missing_Positive([0, (- 1), (- 2), 1, 5, 8], 6)\n    2\n    >>> first_Missing_Positive([0, 1, 2, 5, (- 8)], 5)\n    3\n    \"\"\"\n    ", "canonical_solution": "def first_Missing_Positive(arr,n): \r\n    ptr = 0\r\n    for i in range(n):\r\n        if arr[i] == 1:\r\n            ptr = 1\r\n            break\r\n    if ptr == 0:\r\n        return(1)\r\n    for i in range(n):\r\n        if arr[i] <= 0 or arr[i] > n:\r\n            arr[i] = 1\r\n    for i in range(n):\r\n        arr[(arr[i] - 1) % n] += n\r\n    for i in range(n):\r\n        if arr[i] <= n:\r\n            return(i + 1)\r\n    return(n + 1)", "test": "def check(candidate):\n\tassert first_Missing_Positive([1,2,3,-1,5],5) == 4\n\tassert first_Missing_Positive([0,-1,-2,1,5,8],6) == 2\n\tassert first_Missing_Positive([0,1,2,5,-8],5) == 3", "entry_point": "first_Missing_Positive"}
{"task_id": 179, "prompt": "def count_Intgral_Points(x1, y1, x2, y2):\n    \"\"\"\n    Write a python function to count the number of integral co-ordinates that lie inside a square.\n    >>> count_Intgral_Points(1, 1, 4, 4)\n    4\n    >>> count_Intgral_Points(1, 2, 1, 2)\n    1\n    >>> count_Intgral_Points(4, 2, 6, 4)\n    1\n    \"\"\"\n    ", "canonical_solution": "def count_Intgral_Points(x1,y1,x2,y2): \r\n    return ((y2 - y1 - 1) * (x2 - x1 - 1)) ", "test": "def check(candidate):\n\tassert count_Intgral_Points(1,1,4,4) == 4\n\tassert count_Intgral_Points(1,2,1,2) == 1\n\tassert count_Intgral_Points(4,2,6,4) == 1", "entry_point": "count_Intgral_Points"}
{"task_id": 180, "prompt": "def check_monthnumber(monthname3):\n    \"\"\"\n    Write a function to check whether the given month name contains 30 days or not.\n    >>> check_monthnumber('February')\n    False\n    >>> check_monthnumber('June')\n    True\n    >>> check_monthnumber('April')\n    True\n    \"\"\"\n    ", "canonical_solution": "def check_monthnumber(monthname3):\r\n  if monthname3 ==\"April\" or monthname3== \"June\" or monthname3== \"September\" or monthname3== \"November\":\r\n    return True\r\n  else:\r\n    return False", "test": "def check(candidate):\n\tassert check_monthnumber(\"February\")==False\n\tassert check_monthnumber(\"June\")==True\n\tassert check_monthnumber(\"April\")==True", "entry_point": "check_monthnumber"}
{"task_id": 181, "prompt": "def check_String(str):\n    \"\"\"\n    Write a python function to check whether a string has atleast one letter and one number.\n    >>> check_String('thishasboth29')\n    True\n    >>> check_String('python')\n    False\n    >>> check_String('string')\n    False\n    \"\"\"\n    ", "canonical_solution": "def check_String(str): \r\n    flag_l = False\r\n    flag_n = False\r\n    for i in str: \r\n        if i.isalpha(): \r\n            flag_l = True  \r\n        if i.isdigit(): \r\n            flag_n = True\r\n    return flag_l and flag_n ", "test": "def check(candidate):\n\tassert check_String('thishasboth29') == True\n\tassert check_String('python') == False\n\tassert check_String ('string') == False", "entry_point": "check_String"}
{"task_id": 182, "prompt": "def remove_tuple(test_tup):\n    \"\"\"\n    Write a function to remove the duplicates from the given tuple.\n    >>> remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3))\n    (1, 2, 3, 5)\n    >>> remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8))\n    (2, 3, 4, 5, 6, 7, 8)\n    >>> remove_tuple((11, 12, 13, 11, 11, 12, 14, 13))\n    (11, 12, 13, 14)\n    \"\"\"\n    ", "canonical_solution": "def remove_tuple(test_tup):\r\n  res = tuple(set(test_tup))\r\n  return (res) ", "test": "def check(candidate):\n\tassert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\n\tassert remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) == (2, 3, 4, 5, 6, 7, 8)\n\tassert remove_tuple((11, 12, 13, 11, 11, 12, 14, 13)) == (11, 12, 13, 14)", "entry_point": "remove_tuple"}
{"task_id": 183, "prompt": "def octal_To_Decimal(n):\n    \"\"\"\n    Write a python function to convert octal number to decimal number.\n    >>> octal_To_Decimal(25)\n    21\n    >>> octal_To_Decimal(30)\n    24\n    >>> octal_To_Decimal(40)\n    32\n    \"\"\"\n    ", "canonical_solution": "def octal_To_Decimal(n):  \r\n    num = n; \r\n    dec_value = 0; \r\n    base = 1; \r\n    temp = num; \r\n    while (temp): \r\n        last_digit = temp % 10; \r\n        temp = int(temp / 10); \r\n        dec_value += last_digit*base; \r\n        base = base * 8; \r\n    return dec_value; ", "test": "def check(candidate):\n\tassert octal_To_Decimal(25) == 21\n\tassert octal_To_Decimal(30) == 24\n\tassert octal_To_Decimal(40) == 32", "entry_point": "octal_To_Decimal"}
{"task_id": 184, "prompt": "def first(arr, x, n):\n    \"\"\"\n    Write a python function to find the first position of an element in a sorted array.\n    >>> first([1, 2, 3, 4, 5, 6, 6], 6, 6)\n    5\n    >>> first([1, 2, 2, 2, 3, 2, 2, 4, 2], 2, 9)\n    1\n    >>> first([1, 2, 3], 1, 3)\n    0\n    \"\"\"\n    ", "canonical_solution": "def first(arr,x,n): \r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            high = mid - 1\r\n    return res", "test": "def check(candidate):\n\tassert first([1,2,3,4,5,6,6],6,6) == 5\n\tassert first([1,2,2,2,3,2,2,4,2],2,9) == 1\n\tassert first([1,2,3],1,3) == 0", "entry_point": "first"}
{"task_id": 185, "prompt": "def remove_tuples(test_list, K):\n    \"\"\"\n    Write a function to remove all the tuples with length k.\n    >>> remove_tuples([(4, 5), (4,), (8, 6, 7), (1,), (3, 4, 6, 7)], 1)\n    [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n    >>> remove_tuples([(4, 5), (4, 5), (6, 7), (1, 2, 3), (3, 4, 6, 7)], 2)\n    [(1, 2, 3), (3, 4, 6, 7)]\n    >>> remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1,), (3, 6, 7)], 3)\n    [(4, 3), (1,)]\n    \"\"\"\n    ", "canonical_solution": "def remove_tuples(test_list, K):\r\n  res = [ele for ele in test_list if len(ele) != K]\r\n  return (res) ", "test": "def check(candidate):\n\tassert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\n\tassert remove_tuples([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2) == [(1, 2, 3), (3, 4, 6, 7)]\n\tassert remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3) == [(4, 3), (1,)]", "entry_point": "remove_tuples"}
{"task_id": 186, "prompt": "def find_exponentio(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the exponentiation of the given two tuples.\n    >>> find_exponentio((10, 4, 5, 6), (5, 6, 7, 5))\n    (100000, 4096, 78125, 7776)\n    >>> find_exponentio((11, 5, 6, 7), (6, 7, 8, 6))\n    (1771561, 78125, 1679616, 117649)\n    >>> find_exponentio((12, 6, 7, 8), (7, 8, 9, 7))\n    (35831808, 1679616, 40353607, 2097152)\n    \"\"\"\n    ", "canonical_solution": "def find_exponentio(test_tup1, test_tup2):\r\n  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res)\r\n", "test": "def check(candidate):\n\tassert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\n\tassert find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)\n\tassert find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152)", "entry_point": "find_exponentio"}
{"task_id": 187, "prompt": "def largest_triangle(a, b):\n    \"\"\"\n    Write a function to find the largest triangle that can be inscribed in an ellipse.\n    >>> largest_triangle(4, 2)\n    10.392304845413264\n    >>> largest_triangle(5, 7)\n    4.639421805988064\n    >>> largest_triangle(9, 1)\n    105.2220865598093\n    \"\"\"\n    ", "canonical_solution": "import math\r\ndef largest_triangle(a,b): \r\n    if (a < 0 or b < 0): \r\n        return -1 \r\n    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b);  \r\n    return area ", "test": "def check(candidate):\n\tassert largest_triangle(4,2)==10.392304845413264\n\tassert largest_triangle(5,7)==4.639421805988064\n\tassert largest_triangle(9,1)==105.2220865598093", "entry_point": "largest_triangle"}
{"task_id": 188, "prompt": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find highest power of 2 less than or equal to given number.\n    >>> highest_Power_of_2(10)\n    8\n    >>> highest_Power_of_2(19)\n    16\n    >>> highest_Power_of_2(32)\n    32\n    \"\"\"\n    ", "canonical_solution": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1):  \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break;      \r\n    return res; ", "test": "def check(candidate):\n\tassert highest_Power_of_2(10) == 8\n\tassert highest_Power_of_2(19) == 16\n\tassert highest_Power_of_2(32) == 32", "entry_point": "highest_Power_of_2"}
{"task_id": 189, "prompt": "def position_max(list1):\n    \"\"\"\n    Write a function to find all index positions of the maximum values in a given list.\n    >>> position_max([12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54])\n    [7]\n    >>> position_max([1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5])\n    [7, 8, 9, 10]\n    >>> position_max([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12])\n    [11]\n    \"\"\"\n    ", "canonical_solution": "def position_max(list1):\r\n    max_val = max(list1)\r\n    max_result = [i for i, j in enumerate(list1) if j == max_val]\r\n    return max_result", "test": "def check(candidate):\n\tassert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\n\tassert position_max([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]\n\tassert position_max([2,1,5,6,8,3,4,9,10,11,8,12])==[11]", "entry_point": "position_max"}
{"task_id": 190, "prompt": "def chkList(lst):\n    \"\"\"\n    Write a python function to check whether the elements in a list are same or not.\n    >>> chkList(['one', 'one', 'one'])\n    True\n    >>> chkList(['one', 'Two', 'Three'])\n    False\n    >>> chkList(['bigdata', 'python', 'Django'])\n    False\n    \"\"\"\n    ", "canonical_solution": "def chkList(lst): \r\n    return len(set(lst)) == 1", "test": "def check(candidate):\n\tassert chkList(['one','one','one']) == True\n\tassert chkList(['one','Two','Three']) == False\n\tassert chkList(['bigdata','python','Django']) == False", "entry_point": "chkList"}
{"task_id": 191, "prompt": "def remove_even(str1):\n    \"\"\"\n    Write a function to remove even characters in a string.\n    >>> remove_even('python')\n    'pto'\n    >>> remove_even('program')\n    'porm'\n    >>> remove_even('language')\n    'lnug'\n    \"\"\"\n    ", "canonical_solution": "def remove_even(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 != 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2", "test": "def check(candidate):\n\tassert remove_even(\"python\")==(\"pto\")\n\tassert remove_even(\"program\")==(\"porm\")\n\tassert remove_even(\"language\")==(\"lnug\")", "entry_point": "remove_even"}
{"task_id": 192, "prompt": "def hamming_Distance(n1, n2):\n    \"\"\"\n    Write a python function to find the hamming distance between given two integers.\n    >>> hamming_Distance(4, 8)\n    2\n    >>> hamming_Distance(2, 4)\n    2\n    >>> hamming_Distance(1, 2)\n    2\n    \"\"\"\n    ", "canonical_solution": "def hamming_Distance(n1,n2) : \r\n    x = n1 ^ n2  \r\n    setBits = 0\r\n    while (x > 0) : \r\n        setBits += x & 1\r\n        x >>= 1\r\n    return setBits  ", "test": "def check(candidate):\n\tassert hamming_Distance(4,8) == 2\n\tassert hamming_Distance(2,4) == 2\n\tassert hamming_Distance(1,2) == 2", "entry_point": "hamming_Distance"}
{"task_id": 193, "prompt": "def count(s, c):\n    \"\"\"\n    Write a python function to count the occurrence of a given character in a string.\n    >>> count('abcc', 'c')\n    2\n    >>> count('ababca', 'a')\n    3\n    >>> count('mnmm0pm', 'm')\n    4\n    \"\"\"\n    ", "canonical_solution": "def count(s,c) : \r\n    res = 0 \r\n    for i in range(len(s)) : \r\n        if (s[i] == c): \r\n            res = res + 1\r\n    return res ", "test": "def check(candidate):\n\tassert count(\"abcc\",\"c\") == 2\n\tassert count(\"ababca\",\"a\") == 3\n\tassert count(\"mnmm0pm\",\"m\") == 4", "entry_point": "count"}
{"task_id": 194, "prompt": "def inversion_elements(test_tup):\n    \"\"\"\n    Write a function to find the inversions of tuple elements in the given tuple list.\n    >>> inversion_elements((7, 8, 9, 1, 10, 7))\n    ((- 8), (- 9), (- 10), (- 2), (- 11), (- 8))\n    >>> inversion_elements((2, 4, 5, 6, 1, 7))\n    ((- 3), (- 5), (- 6), (- 7), (- 2), (- 8))\n    >>> inversion_elements((8, 9, 11, 14, 12, 13))\n    ((- 9), (- 10), (- 12), (- 15), (- 13), (- 14))\n    \"\"\"\n    ", "canonical_solution": "def inversion_elements(test_tup):\r\n  res = tuple(list(map(lambda x: ~x, list(test_tup))))\r\n  return (res) ", "test": "def check(candidate):\n\tassert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\n\tassert inversion_elements((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)\n\tassert inversion_elements((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)", "entry_point": "inversion_elements"}
{"task_id": 195, "prompt": "def concatenate_elements(test_tup):\n    \"\"\"\n    Write a function to perform the adjacent element concatenation in the given tuples.\n    >>> concatenate_elements(('DSP ', 'IS ', 'BEST ', 'FOR ', 'ALL ', 'UTS'))\n    ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n    >>> concatenate_elements(('RES ', 'IS ', 'BEST ', 'FOR ', 'ALL ', 'QESR'))\n    ('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')\n    >>> concatenate_elements(('MSAM', 'IS ', 'BEST ', 'FOR ', 'ALL ', 'SKD'))\n    ('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')\n    \"\"\"\n    ", "canonical_solution": "def concatenate_elements(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) ", "test": "def check(candidate):\n\tassert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\n\tassert concatenate_elements((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\")) == ('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')\n\tassert concatenate_elements((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\")) == ('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')", "entry_point": "concatenate_elements"}
{"task_id": 196, "prompt": "def find_longest_repeating_subseq(str):\n    \"\"\"\n    Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\n    >>> find_longest_repeating_subseq('AABEBCDD')\n    3\n    >>> find_longest_repeating_subseq('aabb')\n    2\n    >>> find_longest_repeating_subseq('aab')\n    1\n    \"\"\"\n    ", "canonical_solution": "def find_longest_repeating_subseq(str): \r\n\tn = len(str) \r\n\tdp = [[0 for k in range(n+1)] for l in range(n+1)] \r\n\tfor i in range(1, n+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\tif (str[i-1] == str[j-1] and i != j): \r\n\t\t\t\tdp[i][j] = 1 + dp[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\tdp[i][j] = max(dp[i][j-1], dp[i-1][j]) \r\n\treturn dp[n][n]", "test": "def check(candidate):\n\tassert find_longest_repeating_subseq(\"AABEBCDD\") == 3\n\tassert find_longest_repeating_subseq(\"aabb\") == 2\n\tassert find_longest_repeating_subseq(\"aab\") == 1", "entry_point": "find_longest_repeating_subseq"}
{"task_id": 197, "prompt": "def is_decimal(num):\n    \"\"\"\n    Write a function to check the given decimal with a precision of 2 by using regex.\n    >>> is_decimal('123.11')\n    True\n    >>> is_decimal('0.21')\n    True\n    >>> is_decimal('123.1214')\n    False\n    \"\"\"\n    ", "canonical_solution": "import re\r\ndef is_decimal(num):\r\n  num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n  result = num_fetch.search(num)\r\n  return bool(result)", "test": "def check(candidate):\n\tassert is_decimal('123.11') == True\n\tassert is_decimal('0.21') == True\n\tassert is_decimal('123.1214') == False", "entry_point": "is_decimal"}
{"task_id": 198, "prompt": "def heap_replace(heap, a):\n    \"\"\"\n    Write a function to delete the smallest element from the given heap and then insert a new item.\n    >>> heap_replace([25, 44, 68, 21, 39, 23, 89], 21)\n    [21, 25, 23, 44, 39, 68, 89]\n    >>> heap_replace([25, 44, 68, 21, 39, 23, 89], 110)\n    [23, 25, 68, 44, 39, 110, 89]\n    >>> heap_replace([25, 44, 68, 21, 39, 23, 89], 500)\n    [23, 25, 68, 44, 39, 500, 89]\n    \"\"\"\n    ", "canonical_solution": "import heapq as hq\r\ndef heap_replace(heap,a):\r\n  hq.heapify(heap)\r\n  hq.heapreplace(heap, a)\r\n  return heap", "test": "def check(candidate):\n\tassert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\n\tassert heap_replace([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]\n\tassert heap_replace([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89]", "entry_point": "heap_replace"}
{"task_id": 199, "prompt": "def is_allowed_specific_char(string):\n    \"\"\"\n    Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\n    >>> is_allowed_specific_char('ABCDEFabcdef123450')\n    True\n    >>> is_allowed_specific_char('*&%@#!}{')\n    False\n    >>> is_allowed_specific_char('HELLOhowareyou98765')\n    True\n    \"\"\"\n    ", "canonical_solution": "import re\r\ndef is_allowed_specific_char(string):\r\n    get_char = re.compile(r'[^a-zA-Z0-9.]')\r\n    string = get_char.search(string)\r\n    return not bool(string)", "test": "def check(candidate):\n\tassert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\n\tassert is_allowed_specific_char(\"*&%@#!}{\") == False\n\tassert is_allowed_specific_char(\"HELLOhowareyou98765\") == True", "entry_point": "is_allowed_specific_char"}
{"task_id": 200, "prompt": "def count_Num(n):\n    \"\"\"\n    Write a python function to count numbers whose oth and nth bits are set.\n    >>> count_Num(2)\n    1\n    >>> count_Num(3)\n    2\n    >>> count_Num(1)\n    1\n    \"\"\"\n    ", "canonical_solution": "def count_Num(n): \r\n    if (n == 1): \r\n        return 1\r\n    count = pow(2,n - 2) \r\n    return count ", "test": "def check(candidate):\n\tassert count_Num(2) == 1\n\tassert count_Num(3) == 2\n\tassert count_Num(1) == 1", "entry_point": "count_Num"}
{"task_id": 201, "prompt": "def fourth_Power_Sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of n natural numbers.\n    >>> fourth_Power_Sum(2)\n    17\n    >>> fourth_Power_Sum(4)\n    354\n    >>> fourth_Power_Sum(6)\n    2275\n    \"\"\"\n    ", "canonical_solution": "import math  \r\ndef fourth_Power_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n+1) : \r\n        sum = sum + (i*i*i*i) \r\n    return sum", "test": "def check(candidate):\n\tassert fourth_Power_Sum(2) == 17\n\tassert fourth_Power_Sum(4) == 354\n\tassert fourth_Power_Sum(6) == 2275", "entry_point": "fourth_Power_Sum"}
{"task_id": 202, "prompt": "def concatenate_strings(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the concatenation of two string tuples.\n    >>> concatenate_strings(('Manjeet', 'Nikhil', 'Akshat'), (' Singh', ' Meherwal', ' Garg'))\n    ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n    >>> concatenate_strings(('Shaik', 'Ayesha', 'Sanya'), (' Dawood', ' Begum', ' Singh'))\n    ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')\n    >>> concatenate_strings(('Harpreet', 'Priyanka', 'Muskan'), ('Kour', ' Agarwal', 'Sethi'))\n    ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')\n    \"\"\"\n    ", "canonical_solution": "def concatenate_strings(test_tup1, test_tup2):\r\n  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ", "test": "def check(candidate):\n\tassert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\n\tassert concatenate_strings((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\")) == ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')\n\tassert concatenate_strings((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\")) == ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')", "entry_point": "concatenate_strings"}
{"task_id": 203, "prompt": "def degree_radian(radian):\n    \"\"\"\n    Write a function to convert radians to degrees.\n    >>> degree_radian(90)\n    5156.620156177409\n    >>> degree_radian(60)\n    3437.746770784939\n    >>> degree_radian(120)\n    6875.493541569878\n    \"\"\"\n    ", "canonical_solution": "import math\r\ndef degree_radian(radian):\r\n degree = radian*(180/math.pi)\r\n return degree", "test": "def check(candidate):\n\tassert degree_radian(90)==5156.620156177409\n\tassert degree_radian(60)==3437.746770784939\n\tassert degree_radian(120)==6875.493541569878", "entry_point": "degree_radian"}
{"task_id": 204, "prompt": "def decode_list(alist):\n    \"\"\"\n    Write a function to decode a run-length encoded given list.\n    >>> decode_list([[2, 1], 2, 3, [2, 4], 5, 1])\n    [1, 1, 2, 3, 4, 4, 5, 1]\n    >>> decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])\n    ['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']\n    >>> decode_list(['p', 'y', 't', 'h', 'o', 'n'])\n    ['p', 'y', 't', 'h', 'o', 'n']\n    \"\"\"\n    ", "canonical_solution": "def decode_list(alist):\r\n    def aux(g):\r\n        if isinstance(g, list):\r\n            return [(g[1], range(g[0]))]\r\n        else:\r\n            return [(g, [0])]\r\n    return [x for g in alist for x, R in aux(g) for i in R]", "test": "def check(candidate):\n\tassert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\n\tassert decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']\n\tassert decode_list(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']", "entry_point": "decode_list"}
{"task_id": 205, "prompt": "def check_subset_list(list1, list2):\n    \"\"\"\n    Write a function to check if a nested list is a subset of another nested list.\n    >>> check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])\n    False\n    >>> check_subset_list([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])\n    True\n    >>> check_subset_list([['a', 'b'], ['e'], ['c', 'd']], [['g']])\n    False\n    \"\"\"\n    ", "canonical_solution": "def check_subset_list(list1, list2): \r\n    l1, l2 = list1[0], list2[0] \r\n    exist = True\r\n    for i in list2: \r\n        if i not in list1: \r\n            exist = False\r\n    return exist ", "test": "def check(candidate):\n\tassert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\n\tassert check_subset_list([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])==True\n\tassert check_subset_list([['a', 'b'], ['e'], ['c', 'd']],[['g']])==False", "entry_point": "check_subset_list"}
{"task_id": 206, "prompt": "def first_Repeated_Char(str):\n    \"\"\"\n    Write a python function to find the first repeated character in a given string.\n    >>> first_Repeated_Char('Google')\n    'o'\n    >>> first_Repeated_Char('data')\n    'a'\n    >>> first_Repeated_Char('python')\n    '\\x00'\n    \"\"\"\n    ", "canonical_solution": "def first_Repeated_Char(str): \r\n    h = {}\r\n    for ch in str:\r\n        if ch in h: \r\n            return ch;\r\n        else: \r\n            h[ch] = 0\r\n    return '\\0'", "test": "def check(candidate):\n\tassert first_Repeated_Char(\"Google\") == \"o\"\n\tassert first_Repeated_Char(\"data\") == \"a\"\n\tassert first_Repeated_Char(\"python\") == '\\0'", "entry_point": "first_Repeated_Char"}
{"task_id": 207, "prompt": "def min_Operations(A, B):\n    \"\"\"\n    Write a python function to find the minimum operations required to make two numbers equal.\n    >>> min_Operations(2, 4)\n    1\n    >>> min_Operations(4, 10)\n    4\n    >>> min_Operations(1, 4)\n    3\n    \"\"\"\n    ", "canonical_solution": "import math   \r\ndef min_Operations(A,B):  \r\n    if (A > B): \r\n        swap(A,B)  \r\n    B = B // math.gcd(A,B);  \r\n    return B - 1", "test": "def check(candidate):\n\tassert min_Operations(2,4) == 1\n\tassert min_Operations(4,10) == 4\n\tassert min_Operations(1,4) == 3", "entry_point": "min_Operations"}
{"task_id": 208, "prompt": "def extract_min_max(test_tup, K):\n    \"\"\"\n    Write a function to extract maximum and minimum k elements in the given tuple.\n    >>> extract_min_max((5, 20, 3, 7, 6, 8), 2)\n    (3, 5, 8, 20)\n    >>> extract_min_max((4, 5, 6, 1, 2, 7), 3)\n    (1, 2, 4, 5, 6, 7)\n    >>> extract_min_max((2, 3, 4, 8, 9, 11, 7), 4)\n    (2, 3, 4, 7, 8, 9, 11)\n    \"\"\"\n    ", "canonical_solution": "\r\ndef extract_min_max(test_tup, K):\r\n  res = []\r\n  test_tup = list(test_tup)\r\n  temp = sorted(test_tup)\r\n  for idx, val in enumerate(temp):\r\n    if idx < K or idx >= len(temp) - K:\r\n      res.append(val)\r\n  res = tuple(res)\r\n  return (res) ", "test": "def check(candidate):\n\tassert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\n\tassert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)\n\tassert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)", "entry_point": "extract_min_max"}
{"task_id": 209, "prompt": "def replace_max_specialchar(text, n):\n    \"\"\"\n    Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\n    >>> replace_max_specialchar('Python language, Programming language.', 2)\n    'Python:language: Programming language.'\n    >>> replace_max_specialchar('a b c,d e f', 3)\n    'a:b:c:d e f'\n    >>> replace_max_specialchar('ram reshma,ram rahim', 1)\n    'ram:reshma,ram rahim'\n    \"\"\"\n    ", "canonical_solution": "import re\r\ndef replace_max_specialchar(text,n):\r\n return (re.sub(\"[ ,.]\", \":\", text, n))", "test": "def check(candidate):\n\tassert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\n\tassert replace_max_specialchar('a b c,d e f',3)==('a:b:c:d e f')\n\tassert replace_max_specialchar('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')", "entry_point": "replace_max_specialchar"}
{"task_id": 210, "prompt": "def first_even(nums):\n    \"\"\"\n    Write a python function to find the first even number in a given list of numbers.\n    >>> first_even([1, 3, 5, 7, 4, 1, 6, 8])\n    4\n    >>> first_even([2, 3, 4])\n    2\n    >>> first_even([5, 6, 7])\n    6\n    \"\"\"\n    ", "canonical_solution": "def first_even(nums):\r\n    first_even = next((el for el in nums if el%2==0),-1)\r\n    return first_even", "test": "def check(candidate):\n\tassert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\n\tassert first_even([2, 3, 4]) == 2\n\tassert first_even([5, 6, 7]) == 6", "entry_point": "first_even "}
{"task_id": 211, "prompt": "def check_type(test_tuple):\n    \"\"\"\n    Write a function to check if all the elements in tuple have same data type or not.\n    >>> check_type((5, 6, 7, 3, 5, 6))\n    True\n    >>> check_type((1, 2, '4'))\n    False\n    >>> check_type((3, 2, 1, 4, 5))\n    True\n    \"\"\"\n    ", "canonical_solution": "def check_type(test_tuple):\r\n  res = True\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, type(test_tuple[0])):\r\n      res = False\r\n      break\r\n  return (res) ", "test": "def check(candidate):\n\tassert check_type((5, 6, 7, 3, 5, 6) ) == True\n\tassert check_type((1, 2, \"4\") ) == False\n\tassert check_type((3, 2, 1, 4, 5) ) == True", "entry_point": "check_type"}
{"task_id": 212, "prompt": "def is_majority(arr, n, x):\n    \"\"\"\n    Write a function to check for majority element in the given sorted array.\n    >>> is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3)\n    True\n    >>> is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4)\n    False\n    >>> is_majority([1, 1, 1, 2, 2], 5, 1)\n    True\n    \"\"\"\n    ", "canonical_solution": "def is_majority(arr, n, x):\r\n\ti = binary_search(arr, 0, n-1, x)\r\n\tif i == -1:\r\n\t\treturn False\r\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False\r\ndef binary_search(arr, low, high, x):\r\n\tif high >= low:\r\n\t\tmid = (low + high)//2 \r\n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\r\n\t\t\treturn mid\r\n\t\telif x > arr[mid]:\r\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\r\n\t\telse:\r\n\t\t\treturn binary_search(arr, low, (mid -1), x)\r\n\treturn -1", "test": "def check(candidate):\n\tassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\n\tassert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\n\tassert is_majority([1, 1, 1, 2, 2], 5, 1) == True", "entry_point": "is_majority"}
{"task_id": 213, "prompt": "def count_Set_Bits(n):\n    \"\"\"\n    Write a python function to count set bits of a given number.\n    >>> count_Set_Bits(2)\n    1\n    >>> count_Set_Bits(4)\n    1\n    >>> count_Set_Bits(6)\n    2\n    \"\"\"\n    ", "canonical_solution": "def count_Set_Bits(n): \r\n    count = 0\r\n    while (n): \r\n        count += n & 1\r\n        n >>= 1\r\n    return count ", "test": "def check(candidate):\n\tassert count_Set_Bits(2) == 1\n\tassert count_Set_Bits(4) == 1\n\tassert count_Set_Bits(6) == 2", "entry_point": "count_Set_Bits"}
{"task_id": 214, "prompt": "def find_Min(arr, low, high):\n    \"\"\"\n    Write a python function to find the minimum element in a sorted and rotated array.\n    >>> find_Min([1, 2, 3, 4, 5], 0, 4)\n    1\n    >>> find_Min([4, 6, 8], 0, 2)\n    4\n    >>> find_Min([2, 3, 5, 7, 9], 0, 4)\n    2\n    \"\"\"\n    ", "canonical_solution": "def find_Min(arr,low,high): \r\n    while (low < high): \r\n        mid = low + (high - low) // 2;   \r\n        if (arr[mid] == arr[high]): \r\n            high -= 1; \r\n        elif (arr[mid] > arr[high]): \r\n            low = mid + 1; \r\n        else: \r\n            high = mid; \r\n    return arr[high]; ", "test": "def check(candidate):\n\tassert find_Min([1,2,3,4,5],0,4) == 1\n\tassert find_Min([4,6,8],0,2) == 4\n\tassert find_Min([2,3,5,7,9],0,4) == 2", "entry_point": "find_Min"}
{"task_id": 215, "prompt": "def odd_values_string(str):\n    \"\"\"\n    Write a python function to remove the characters which have odd index values of a given string.\n    >>> odd_values_string('abcdef')\n    'ace'\n    >>> odd_values_string('python')\n    'pto'\n    >>> odd_values_string('data')\n    'dt'\n    \"\"\"\n    ", "canonical_solution": "def odd_values_string(str):\r\n  result = \"\" \r\n  for i in range(len(str)):\r\n    if i % 2 == 0:\r\n      result = result + str[i]\r\n  return result", "test": "def check(candidate):\n\tassert odd_values_string('abcdef') == 'ace'\n\tassert odd_values_string('python') == 'pto'\n\tassert odd_values_string('data') == 'dt'", "entry_point": "odd_values_string"}
{"task_id": 216, "prompt": "def min_of_three(a, b, c):\n    \"\"\"\n    Write a function to find minimum of three numbers.\n    >>> min_of_three(10, 20, 0)\n    0\n    >>> min_of_three(19, 15, 18)\n    15\n    >>> min_of_three((- 10), (- 20), (- 30))\n    (- 30)\n    \"\"\"\n    ", "canonical_solution": "def min_of_three(a,b,c): \r\n      if (a <= b) and (a <= c): \r\n        smallest = a \r\n      elif (b <= a) and (b <= c): \r\n        smallest = b \r\n      else: \r\n        smallest = c \r\n      return smallest ", "test": "def check(candidate):\n\tassert min_of_three(10,20,0)==0\n\tassert min_of_three(19,15,18)==15\n\tassert min_of_three(-10,-20,-30)==-30", "entry_point": "min_of_three"}
{"task_id": 217, "prompt": "def all_Bits_Set_In_The_Given_Range(n, l, r):\n    \"\"\"\n    Write a python function to check whether all the bits are unset in the given range or not.\n    >>> all_Bits_Set_In_The_Given_Range(4, 1, 2)\n    True\n    >>> all_Bits_Set_In_The_Given_Range(17, 2, 4)\n    True\n    >>> all_Bits_Set_In_The_Given_Range(39, 4, 6)\n    False\n    \"\"\"\n    ", "canonical_solution": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \r\n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \r\n    new_num = n & num\r\n    if (new_num == 0): \r\n        return True\r\n    return False", "test": "def check(candidate):\n\tassert all_Bits_Set_In_The_Given_Range(4,1,2) == True\n\tassert all_Bits_Set_In_The_Given_Range(17,2,4) == True\n\tassert all_Bits_Set_In_The_Given_Range(39,4,6) == False", "entry_point": "all_Bits_Set_In_The_Given_Range"}
{"task_id": 218, "prompt": "def re_arrange_array(arr, n):\n    \"\"\"\n    Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\n    >>> re_arrange_array([(- 1), 2, (- 3), 4, 5, 6, (- 7), 8, 9], 9)\n    [(- 1), (- 3), (- 7), 4, 5, 6, 2, 8, 9]\n    >>> re_arrange_array([12, (- 14), (- 26), 13, 15], 5)\n    [(- 14), (- 26), 12, 13, 15]\n    >>> re_arrange_array([10, 24, 36, (- 42), (- 39), (- 78), 85], 7)\n    [(- 42), (- 39), (- 78), 10, 24, 36, 85]\n    \"\"\"\n    ", "canonical_solution": "def re_arrange_array(arr, n):\r\n  j=0\r\n  for i in range(0, n):\r\n    if (arr[i] < 0):\r\n      temp = arr[i]\r\n      arr[i] = arr[j]\r\n      arr[j] = temp\r\n      j = j + 1\r\n  return arr", "test": "def check(candidate):\n\tassert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\n\tassert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]\n\tassert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]", "entry_point": "re_arrange_array"}
{"task_id": 219, "prompt": "def replace_blank(str1, char):\n    \"\"\"\n    Write a function to replace blank spaces with any character in a string.\n    >>> replace_blank('hello people', '@')\n    'hello@people'\n    >>> replace_blank('python program language', '$')\n    'python$program$language'\n    >>> replace_blank('blank space', '-')\n    'blank-space'\n    \"\"\"\n    ", "canonical_solution": "def replace_blank(str1,char):\r\n str2 = str1.replace(' ', char)\r\n return str2", "test": "def check(candidate):\n\tassert replace_blank(\"hello people\",'@')==(\"hello@people\")\n\tassert replace_blank(\"python program language\",'$')==(\"python$program$language\")\n\tassert replace_blank(\"blank space\",\"-\")==(\"blank-space\")", "entry_point": "replace_blank"}
{"task_id": 220, "prompt": "def max_sum(tri, n):\n    \"\"\"\n    Write a function to find the maximum sum in the given right triangle of numbers.\n    >>> max_sum([[1], [2, 1], [3, 3, 2]], 3)\n    6\n    >>> max_sum([[1], [1, 2], [4, 1, 12]], 3)\n    15\n    >>> max_sum([[2], [3, 2], [13, 23, 12]], 3)\n    28\n    \"\"\"\n    ", "canonical_solution": "def max_sum(tri, n): \r\n\tif n > 1: \r\n\t\ttri[1][1] = tri[1][1]+tri[0][0] \r\n\t\ttri[1][0] = tri[1][0]+tri[0][0] \r\n\tfor i in range(2, n): \r\n\t\ttri[i][0] = tri[i][0] + tri[i-1][0] \r\n\t\ttri[i][i] = tri[i][i] + tri[i-1][i-1] \r\n\t\tfor j in range(1, i): \r\n\t\t\tif tri[i][j]+tri[i-1][j-1] >= tri[i][j]+tri[i-1][j]: \r\n\t\t\t\ttri[i][j] = tri[i][j] + tri[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] = tri[i][j]+tri[i-1][j] \r\n\treturn (max(tri[n-1]))", "test": "def check(candidate):\n\tassert max_sum([[1], [2,1], [3,3,2]], 3) == 6\n\tassert max_sum([[1], [1, 2], [4, 1, 12]], 3) == 15 \n\tassert max_sum([[2], [3,2], [13,23,12]], 3) == 28", "entry_point": "max_sum"}
{"task_id": 221, "prompt": "def larg_nnum(list1, n):\n    \"\"\"\n    Write a function to get the n largest items from a dataset.\n    >>> larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2)\n    [100, 90]\n    >>> larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 5)\n    [100, 90, 80, 70, 60]\n    >>> larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 3)\n    [100, 90, 80]\n    \"\"\"\n    ", "canonical_solution": "import heapq\r\ndef larg_nnum(list1,n):\r\n largest=heapq.nlargest(n,list1)\r\n return largest", "test": "def check(candidate):\n\tassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\n\tassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[100,90,80,70,60]\n\tassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[100,90,80]", "entry_point": "larg_nnum"}
{"task_id": 222, "prompt": "def lateralsuface_cylinder(r, h):\n    \"\"\"\n    Write a function to find the lateral surface area of a cylinder.\n    >>> lateralsuface_cylinder(10, 5)\n    314.15000000000003\n    >>> lateralsuface_cylinder(4, 5)\n    125.66000000000001\n    >>> lateralsuface_cylinder(4, 10)\n    251.32000000000002\n    \"\"\"\n    ", "canonical_solution": "def lateralsuface_cylinder(r,h):\r\n  lateralsurface= 2*3.1415*r*h\r\n  return lateralsurface", "test": "def check(candidate):\n\tassert lateralsuface_cylinder(10,5)==314.15000000000003\n\tassert lateralsuface_cylinder(4,5)==125.66000000000001\n\tassert lateralsuface_cylinder(4,10)==251.32000000000002", "entry_point": "lateralsuface_cylinder"}
{"task_id": 223, "prompt": "def volume_cube(l):\n    \"\"\"\n    Write a function to find the volume of a cube.\n    >>> volume_cube(3)\n    27\n    >>> volume_cube(2)\n    8\n    >>> volume_cube(5)\n    125\n    \"\"\"\n    ", "canonical_solution": "def volume_cube(l):\r\n  volume = l * l * l\r\n  return volume", "test": "def check(candidate):\n\tassert volume_cube(3)==27\n\tassert volume_cube(2)==8\n\tassert volume_cube(5)==125", "entry_point": "volume_cube"}
{"task_id": 224, "prompt": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    >>> even_bit_set_number(10)\n    10\n    >>> even_bit_set_number(20)\n    30\n    >>> even_bit_set_number(30)\n    30\n    \"\"\"\n    ", "canonical_solution": "def even_bit_set_number(n): \r\n    count = 0;res = 0;temp = n \r\n    while(temp > 0): \r\n        if (count % 2 == 1): \r\n            res |= (1 << count)\r\n        count+=1\r\n        temp >>= 1\r\n    return (n | res) ", "test": "def check(candidate):\n\tassert even_bit_set_number(10) == 10\n\tassert even_bit_set_number(20) == 30\n\tassert even_bit_set_number(30) == 30", "entry_point": "even_bit_set_number"}
{"task_id": 225, "prompt": "def No_of_Triangle(N, K):\n    \"\"\"\n    Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\n    >>> No_of_Triangle(4, 2)\n    7\n    >>> No_of_Triangle(4, 3)\n    3\n    >>> No_of_Triangle(1, 3)\n    (- 1)\n    \"\"\"\n    ", "canonical_solution": "def No_of_Triangle(N,K):\r\n    if (N < K):\r\n        return -1;\r\n    else:\r\n        Tri_up = 0;\r\n        Tri_up = ((N - K + 1) *(N - K + 2)) // 2;\r\n        Tri_down = 0;\r\n        Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) // 2;\r\n        return Tri_up + Tri_down;", "test": "def check(candidate):\n\tassert No_of_Triangle(4,2) == 7\n\tassert No_of_Triangle(4,3) == 3\n\tassert No_of_Triangle(1,3) == -1", "entry_point": "No_of_Triangle"}
{"task_id": 226, "prompt": "def check_occurences(test_list):\n    \"\"\"\n    Write a function to check the occurrences of records which occur similar times in the given tuples.\n    >>> check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)])\n    {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n    >>> check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)])\n    {(2, 4): 2, (3, 6): 2, (4, 7): 1}\n    >>> check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)])\n    {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}\n    \"\"\"\n    ", "canonical_solution": "from collections import Counter \r\ndef check_occurences(test_list):\r\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\r\n  return  (res) ", "test": "def check(candidate):\n\tassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n\tassert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}\n\tassert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}", "entry_point": "check_occurences"}
{"task_id": 227, "prompt": "def number_of_substrings(str):\n    \"\"\"\n    Write a python function to count number of non-empty substrings of a given string.\n    >>> number_of_substrings('abc')\n    6\n    >>> number_of_substrings('abcd')\n    10\n    >>> number_of_substrings('abcde')\n    15\n    \"\"\"\n    ", "canonical_solution": "def number_of_substrings(str): \r\n\tstr_len = len(str); \r\n\treturn int(str_len * (str_len + 1) / 2); ", "test": "def check(candidate):\n\tassert number_of_substrings(\"abc\") == 6\n\tassert number_of_substrings(\"abcd\") == 10\n\tassert number_of_substrings(\"abcde\") == 15", "entry_point": "number_of_substrings"}
{"task_id": 228, "prompt": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\n    >>> get_total_number_of_sequences(10, 4)\n    4\n    >>> get_total_number_of_sequences(5, 2)\n    6\n    >>> get_total_number_of_sequences(16, 3)\n    84\n    \"\"\"\n    ", "canonical_solution": "def get_total_number_of_sequences(m,n): \r\n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tif i==0 or j==0: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif i<j: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif j==1: \r\n\t\t\t\tT[i][j]=i \r\n\t\t\telse: \r\n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \r\n\treturn T[m][n]", "test": "def check(candidate):\n\tassert get_total_number_of_sequences(10, 4) == 4\n\tassert get_total_number_of_sequences(5, 2) == 6\n\tassert get_total_number_of_sequences(16, 3) == 84", "entry_point": "get_total_number_of_sequences"}
{"task_id": 229, "prompt": "def replace_list(list1, list2):\n    \"\"\"\n    Write a function to replace the last element of the list with another list.\n    >>> replace_list([1, 3, 5, 7, 9, 10], [2, 4, 6, 8])\n    [1, 3, 5, 7, 9, 2, 4, 6, 8]\n    >>> replace_list([1, 2, 3, 4, 5], [5, 6, 7, 8])\n    [1, 2, 3, 4, 5, 6, 7, 8]\n    >>> replace_list(['red', 'blue', 'green'], ['yellow'])\n    ['red', 'blue', 'yellow']\n    \"\"\"\n    ", "canonical_solution": "def replace_list(list1,list2):\r\n list1[-1:] = list2\r\n replace_list=list1\r\n return replace_list\r\n", "test": "def check(candidate):\n\tassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\n\tassert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]\n\tassert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]", "entry_point": "replace_list"}
{"task_id": 230, "prompt": "def array_3d(m, n, o):\n    \"\"\"\n    Write a function to generate a 3d array having each element as '*'.\n    >>> array_3d(6, 4, 3)\n    [[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n    >>> array_3d(5, 3, 4)\n    [[['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]\n    >>> array_3d(1, 2, 3)\n    [[['*'], ['*']], [['*'], ['*']], [['*'], ['*']]]\n    \"\"\"\n    ", "canonical_solution": "def array_3d(m,n,o):\r\n array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]\r\n return array_3d", "test": "def check(candidate):\n\tassert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\n\tassert array_3d(5,3,4)==[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*','*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]\n\tassert array_3d(1,2,3)==[[['*'],['*']],[['*'],['*']],[['*'],['*']]]", "entry_point": "array_3d"}
{"task_id": 231, "prompt": "def count_charac(str1):\n    \"\"\"\n    Write a function to count total characters in a string.\n    >>> count_charac('python programming')\n    18\n    >>> count_charac('language')\n    8\n    >>> count_charac('words')\n    5\n    \"\"\"\n    ", "canonical_solution": "def count_charac(str1):\r\n total = 0\r\n for i in str1:\r\n    total = total + 1\r\n return total", "test": "def check(candidate):\n\tassert count_charac(\"python programming\")==18\n\tassert count_charac(\"language\")==8\n\tassert count_charac(\"words\")==5", "entry_point": "count_charac"}
{"task_id": 232, "prompt": "def sort_on_occurence(lst):\n    \"\"\"\n    Write a function to sort the given list based on the occurrence of first element of tuples.\n    >>> sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')])\n    [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n    >>> sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')])\n    [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]\n    >>> sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')])\n    [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]\n    \"\"\"\n    ", "canonical_solution": "def sort_on_occurence(lst): \r\n\tdct = {} \r\n\tfor i, j in lst: \r\n\t\tdct.setdefault(i, []).append(j) \r\n\treturn ([(i, *dict.fromkeys(j), len(j)) \r\n\t\t\t\tfor i, j in dct.items()]) ", "test": "def check(candidate):\n\tassert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\n\tassert sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]) == [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]\n\tassert sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]) == [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]", "entry_point": "sort_on_occurence"}
{"task_id": 233, "prompt": "def next_Perfect_Square(N):\n    \"\"\"\n    Write a python function to find the next perfect square greater than a given number.\n    >>> next_Perfect_Square(35)\n    36\n    >>> next_Perfect_Square(6)\n    9\n    >>> next_Perfect_Square(9)\n    16\n    \"\"\"\n    ", "canonical_solution": "import math  \r\ndef next_Perfect_Square(N): \r\n    nextN = math.floor(math.sqrt(N)) + 1\r\n    return nextN * nextN ", "test": "def check(candidate):\n\tassert next_Perfect_Square(35) == 36\n\tassert next_Perfect_Square(6) == 9\n\tassert next_Perfect_Square(9) == 16", "entry_point": "next_Perfect_Square"}
{"task_id": 234, "prompt": "def max_sum(arr, n):\n    \"\"\"\n    Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.\n    >>> max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9)\n    194\n    >>> max_sum([80, 60, 30, 40, 20, 10], 6)\n    210\n    >>> max_sum([2, 3, 14, 16, 21, 23, 29, 30], 8)\n    138\n    \"\"\"\n    ", "canonical_solution": "def max_sum(arr, n): \r\n\tMSIBS = arr[:] \r\n\tfor i in range(n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \r\n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \r\n\tMSDBS = arr[:] \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(1, i): \r\n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \r\n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \r\n\tmax_sum = float(\"-Inf\") \r\n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \r\n\t\tmax_sum = max(max_sum, i + j - k) \r\n\treturn max_sum", "test": "def check(candidate):\n\tassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\n\tassert max_sum([80, 60, 30, 40, 20, 10], 6) == 210\n\tassert max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138", "entry_point": "max_sum"}
{"task_id": 235, "prompt": "def babylonian_squareroot(number):\n    \"\"\"\n    Write a function for computing square roots using the babylonian method.\n    >>> babylonian_squareroot(10)\n    3.162277660168379\n    >>> babylonian_squareroot(2)\n    1.414213562373095\n    >>> babylonian_squareroot(9)\n    3.0\n    \"\"\"\n    ", "canonical_solution": "def babylonian_squareroot(number):\r\n    if(number == 0):\r\n        return 0;\r\n    g = number/2.0;\r\n    g2 = g + 1;\r\n    while(g != g2):\r\n        n = number/ g;\r\n        g2 = g;\r\n        g = (g + n)/2;\r\n    return g;", "test": "def check(candidate):\n\tassert babylonian_squareroot(10)==3.162277660168379\n\tassert babylonian_squareroot(2)==1.414213562373095\n\tassert babylonian_squareroot(9)==3.0", "entry_point": "babylonian_squareroot"}
{"task_id": 236, "prompt": "def lps(str):\n    \"\"\"\n    Write a function to find the longest palindromic subsequence in the given string.\n    >>> lps('TENS FOR TENS')\n    5\n    >>> lps('CARDIO FOR CARDS')\n    7\n    >>> lps('PART OF THE JOURNEY IS PART')\n    9\n    \"\"\"\n    ", "canonical_solution": "def lps(str): \r\n\tn = len(str) \r\n\tL = [[0 for x in range(n)] for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tL[i][i] = 1\r\n\tfor cl in range(2, n+1): \r\n\t\tfor i in range(n-cl+1): \r\n\t\t\tj = i+cl-1\r\n\t\t\tif str[i] == str[j] and cl == 2: \r\n\t\t\t\tL[i][j] = 2\r\n\t\t\telif str[i] == str[j]: \r\n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\r\n\t\t\telse: \r\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \r\n\treturn L[0][n-1]", "test": "def check(candidate):\n\tassert lps(\"TENS FOR TENS\") == 5 \n\tassert lps(\"CARDIO FOR CARDS\") == 7\n\tassert lps(\"PART OF THE JOURNEY IS PART\") == 9 ", "entry_point": "lps"}
{"task_id": 237, "prompt": "def harmonic_sum(n):\n    \"\"\"\n    Write a function to calculate the harmonic sum of n-1.\n    >>> harmonic_sum(7)\n    2.5928571428571425\n    >>> harmonic_sum(4)\n    2.083333333333333\n    >>> harmonic_sum(19)\n    3.547739657143682\n    \"\"\"\n    ", "canonical_solution": "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1)) ", "test": "def check(candidate):\n\tassert harmonic_sum(7) == 2.5928571428571425\n\tassert harmonic_sum(4) == 2.083333333333333\n\tassert harmonic_sum(19) == 3.547739657143682", "entry_point": "harmonic_sum"}
{"task_id": 238, "prompt": "def intersection_array(array_nums1, array_nums2):\n    \"\"\"\n    Write a function to find the intersection of two arrays using lambda function.\n    >>> intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9])\n    [1, 2, 8, 9]\n    >>> intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9])\n    [3, 5, 7, 9]\n    >>> intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40])\n    [10]\n    \"\"\"\n    ", "canonical_solution": "def intersection_array(array_nums1,array_nums2):\r\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \r\n return result", "test": "def check(candidate):\n\tassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\n\tassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]\n\tassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]", "entry_point": "intersection_array"}
{"task_id": 239, "prompt": "def count_X(tup, x):\n    \"\"\"\n    Write a python function to count the occcurences of an element in a tuple.\n    >>> count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 4)\n    0\n    >>> count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 10)\n    3\n    >>> count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 8)\n    4\n    \"\"\"\n    ", "canonical_solution": "def count_X(tup, x): \r\n    count = 0\r\n    for ele in tup: \r\n        if (ele == x): \r\n            count = count + 1\r\n    return count ", "test": "def check(candidate):\n\tassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\n\tassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3\n\tassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4", "entry_point": "count_X"}
{"task_id": 240, "prompt": "def insert_element(list, element):\n    \"\"\"\n    Write a function to insert an element before each element of a list.\n    >>> insert_element(['Red', 'Green', 'Black'], 'c')\n    ['c', 'Red', 'c', 'Green', 'c', 'Black']\n    >>> insert_element(['python', 'java'], 'program')\n    ['program', 'python', 'program', 'java']\n    >>> insert_element(['happy', 'sad'], 'laugh')\n    ['laugh', 'happy', 'laugh', 'sad']\n    \"\"\"\n    ", "canonical_solution": "def insert_element(list,element):\r\n list = [v for elt in list for v in (element, elt)]\r\n return list", "test": "def check(candidate):\n\tassert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \n\tassert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] \n\tassert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] ", "entry_point": "insert_element"}
{"task_id": 241, "prompt": "def convert(numbers):\n    \"\"\"\n    Write a python function to convert complex numbers to polar coordinates.\n    >>> convert(1)\n    (1.0, 0.0)\n    >>> convert(4)\n    (4.0, 0.0)\n    >>> convert(5)\n    (5.0, 0.0)\n    \"\"\"\n    ", "canonical_solution": "import cmath  \r\ndef convert(numbers):    \r\n  num = cmath.polar(numbers)  \r\n  return (num) ", "test": "def check(candidate):\n\tassert convert(1) == (1.0, 0.0)\n\tassert convert(4) == (4.0,0.0)\n\tassert convert(5) == (5.0,0.0)", "entry_point": "convert"}
{"task_id": 242, "prompt": "def count_integer(list1):\n    \"\"\"\n    Write a python function to count integers from a given list.\n    >>> count_integer([1, 2, 'abc', 1.2])\n    2\n    >>> count_integer([1, 2, 3])\n    3\n    >>> count_integer([1, 1.2, 4, 5.1])\n    2\n    \"\"\"\n    ", "canonical_solution": "def count_integer(list1):\r\n    ctr = 0\r\n    for i in list1:\r\n        if isinstance(i, int):\r\n            ctr = ctr + 1\r\n    return ctr", "test": "def check(candidate):\n\tassert count_integer([1,2,'abc',1.2]) == 2\n\tassert count_integer([1,2,3]) == 3\n\tassert count_integer([1,1.2,4,5.1]) == 2", "entry_point": "count_integer"}
{"task_id": 243, "prompt": "def words_ae(text):\n    \"\"\"\n    Write a function to find all words starting with 'a' or 'e' in a given string.\n    >>> words_ae('python programe')\n    ['ame']\n    >>> words_ae('python programe language')\n    ['ame', 'anguage']\n    >>> words_ae('assert statement')\n    ['assert', 'atement']\n    \"\"\"\n    ", "canonical_solution": "import re\r\ndef words_ae(text):\r\n list = re.findall(\"[ae]\\w+\", text)\r\n return list", "test": "def check(candidate):\n\tassert words_ae(\"python programe\")==['ame']\n\tassert words_ae(\"python programe language\")==['ame','anguage']\n\tassert words_ae(\"assert statement\")==['assert', 'atement']", "entry_point": "words_ae"}
{"task_id": 244, "prompt": "def combinations_colors(l, n):\n    \"\"\"\n    Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\n    >>> combinations_colors(['Red', 'Green', 'Blue'], 1)\n    [('Red',), ('Green',), ('Blue',)]\n    >>> combinations_colors(['Red', 'Green', 'Blue'], 2)\n    [('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]\n    >>> combinations_colors(['Red', 'Green', 'Blue'], 3)\n    [('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]\n    \"\"\"\n    ", "canonical_solution": "from itertools import combinations_with_replacement \r\ndef combinations_colors(l, n):\r\n    return list(combinations_with_replacement(l,n))\r", "test": "def check(candidate):\n\tassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\n\tassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]\n\tassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]", "entry_point": "combinations_colors"}
{"task_id": 245, "prompt": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function to count the number of prime numbers less than a given non-negative number.\n    >>> count_Primes_nums(5)\n    2\n    >>> count_Primes_nums(10)\n    4\n    >>> count_Primes_nums(100)\n    25\n    \"\"\"\n    ", "canonical_solution": "def count_Primes_nums(n):\r\n    ctr = 0\r\n    for num in range(n):\r\n        if num <= 1:\r\n            continue\r\n        for i in range(2,num):\r\n            if (num % i) == 0:\r\n                break\r\n        else:\r\n            ctr += 1\r\n    return ctr", "test": "def check(candidate):\n\tassert count_Primes_nums(5) == 2\n\tassert count_Primes_nums(10) == 4\n\tassert count_Primes_nums(100) == 25", "entry_point": "count_Primes_nums"}
{"task_id": 246, "prompt": "def swap_numbers(a, b):\n    \"\"\"\n    Write a function to swap two numbers.\n    >>> swap_numbers(10, 20)\n    (20, 10)\n    >>> swap_numbers(15, 17)\n    (17, 15)\n    >>> swap_numbers(100, 200)\n    (200, 100)\n    \"\"\"\n    ", "canonical_solution": "def swap_numbers(a,b):\r\n temp = a\r\n a = b\r\n b = temp\r\n return (a,b)", "test": "def check(candidate):\n\tassert swap_numbers(10,20)==(20,10)\n\tassert swap_numbers(15,17)==(17,15)\n\tassert swap_numbers(100,200)==(200,100)", "entry_point": "swap_numbers"}
{"task_id": 247, "prompt": "def count_odd(array_nums):\n    \"\"\"\n    Write a function to find number of odd elements in the given list using lambda function.\n    >>> count_odd([1, 2, 3, 5, 7, 8, 10])\n    4\n    >>> count_odd([10, 15, 14, 13, (- 18), 12, (- 20)])\n    2\n    >>> count_odd([1, 2, 4, 8, 9])\n    2\n    \"\"\"\n    ", "canonical_solution": "def count_odd(array_nums):\r\n   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))\r\n   return count_odd", "test": "def check(candidate):\n\tassert count_odd([1, 2, 3, 5, 7, 8, 10])==4\n\tassert count_odd([10,15,14,13,-18,12,-20])==2\n\tassert count_odd([1, 2, 4, 8, 9])==2", "entry_point": "count_odd"}
{"task_id": 248, "prompt": "def maximize_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n    >>> maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))\n    ((6, 7), (4, 9), (2, 9), (7, 10))\n    >>> maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4)))\n    ((7, 8), (5, 10), (3, 10), (8, 11))\n    >>> maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5)))\n    ((8, 9), (6, 11), (4, 11), (9, 12))\n    \"\"\"\n    ", "canonical_solution": "def maximize_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ", "test": "def check(candidate):\n\tassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\tassert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))\n\tassert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))", "entry_point": "maximize_elements"}
{"task_id": 249, "prompt": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    >>> newman_prime(3)\n    7\n    >>> newman_prime(4)\n    17\n    >>> newman_prime(5)\n    41\n    \"\"\"\n    ", "canonical_solution": "def newman_prime(n): \r\n\tif n == 0 or n == 1: \r\n\t\treturn 1\r\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)", "test": "def check(candidate):\n\tassert newman_prime(3) == 7 \n\tassert newman_prime(4) == 17\n\tassert newman_prime(5) == 41", "entry_point": "newman_prime"}
{"task_id": 250, "prompt": "def division_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform mathematical division operation across the given tuples.\n    >>> division_elements((10, 4, 6, 9), (5, 2, 3, 3))\n    (2, 2, 2, 3)\n    >>> division_elements((12, 6, 8, 16), (6, 3, 4, 4))\n    (2, 2, 2, 4)\n    >>> division_elements((20, 14, 36, 18), (5, 7, 6, 9))\n    (4, 2, 6, 2)\n    \"\"\"\n    ", "canonical_solution": "def division_elements(test_tup1, test_tup2):\r\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ", "test": "def check(candidate):\n\tassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\n\tassert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)\n\tassert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)", "entry_point": "division_elements"}
{"task_id": 251, "prompt": "def split_two_parts(list1, L):\n    \"\"\"\n    Write a function to split a given list into two parts where the length of the first part of the list is given.\n    >>> split_two_parts([1, 1, 2, 3, 4, 4, 5, 1], 3)\n    ([1, 1, 2], [3, 4, 4, 5, 1])\n    >>> split_two_parts(['a', 'b', 'c', 'd'], 2)\n    (['a', 'b'], ['c', 'd'])\n    >>> split_two_parts(['p', 'y', 't', 'h', 'o', 'n'], 4)\n    (['p', 'y', 't', 'h'], ['o', 'n'])\n    \"\"\"\n    ", "canonical_solution": "def split_two_parts(list1, L):\r\n    return list1[:L], list1[L:]", "test": "def check(candidate):\n\tassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\n\tassert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])\n\tassert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])", "entry_point": "split_two_parts"}
{"task_id": 252, "prompt": "def merge_dict(d1, d2):\n    \"\"\"\n    Write a function to merge two dictionaries.\n    >>> merge_dict({'a': 100, 'b': 200}, {'x': 300, 'y': 200})\n    {'x': 300, 'y': 200, 'a': 100, 'b': 200}\n    >>> merge_dict({'a': 900, 'b': 900, 'd': 900}, {'a': 900, 'b': 900, 'd': 900})\n    {'a': 900, 'b': 900, 'd': 900, 'a': 900, 'b': 900, 'd': 900}\n    >>> merge_dict({'a': 10, 'b': 20}, {'x': 30, 'y': 40})\n    {'x': 30, 'y': 40, 'a': 10, 'b': 20}\n    \"\"\"\n    ", "canonical_solution": "def merge_dict(d1,d2):\r\n d = d1.copy()\r\n d.update(d2)\r\n return d", "test": "def check(candidate):\n\tassert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\n\tassert merge_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}\n\tassert merge_dict({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}", "entry_point": "merge_dict"}
{"task_id": 253, "prompt": "def dog_age(h_age):\n    \"\"\"\n    Write a function to calculate a dog's age in dog's years.\n    >>> dog_age(12)\n    61\n    >>> dog_age(15)\n    73\n    >>> dog_age(24)\n    109\n    \"\"\"\n    ", "canonical_solution": "def dog_age(h_age):\r\n if h_age < 0:\r\n \texit()\r\n elif h_age <= 2:\r\n\t d_age = h_age * 10.5\r\n else:\r\n\t d_age = 21 + (h_age - 2)*4\r\n return d_age", "test": "def check(candidate):\n\tassert dog_age(12)==61\n\tassert dog_age(15)==73\n\tassert dog_age(24)==109", "entry_point": "dog_age"}
{"task_id": 254, "prompt": "def list_split(S, step):\n    \"\"\"\n    Write a function to split a list for every nth element.\n    >>> list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3)\n    [['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n    >>> list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 3)\n    [[1, 4, 7, 10, 13], [2, 5, 8, 11, 14], [3, 6, 9, 12]]\n    >>> list_split(['python', 'java', 'C', 'C++', 'DBMS', 'SQL'], 2)\n    [['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]\n    \"\"\"\n    ", "canonical_solution": "def list_split(S, step):\r\n    return [S[i::step] for i in range(step)]", "test": "def check(candidate):\n\tassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \n\tassert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] \n\tassert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] ", "entry_point": "list_split"}
{"task_id": 255, "prompt": "def lateralsurface_cube(l):\n    \"\"\"\n    Write a function to find the lateral surface area of a cube.\n    >>> lateralsurface_cube(5)\n    100\n    >>> lateralsurface_cube(9)\n    324\n    >>> lateralsurface_cube(10)\n    400\n    \"\"\"\n    ", "canonical_solution": "def lateralsurface_cube(l):\r\n  LSA = 4 * (l * l)\r\n  return LSA", "test": "def check(candidate):\n\tassert lateralsurface_cube(5)==100\n\tassert lateralsurface_cube(9)==324\n\tassert lateralsurface_cube(10)==400", "entry_point": "lateralsurface_cube"}
{"task_id": 256, "prompt": "def square_Sum(n):\n    \"\"\"\n    Write a python function to find the sum of squares of first n odd natural numbers.\n    >>> square_Sum(2)\n    10\n    >>> square_Sum(3)\n    35\n    >>> square_Sum(4)\n    84\n    \"\"\"\n    ", "canonical_solution": "def square_Sum(n):  \r\n    return int(n*(4*n*n-1)/3) ", "test": "def check(candidate):\n\tassert square_Sum(2) == 10\n\tassert square_Sum(3) == 35\n\tassert square_Sum(4) == 84", "entry_point": "square_Sum"}
{"task_id": 257, "prompt": "def find_star_num(n):\n    \"\"\"\n    Write a function to find the n'th star number.\n    >>> find_star_num(3)\n    37\n    >>> find_star_num(4)\n    73\n    >>> find_star_num(5)\n    121\n    \"\"\"\n    ", "canonical_solution": "def find_star_num(n): \r\n\treturn (6 * n * (n - 1) + 1) ", "test": "def check(candidate):\n\tassert find_star_num(3) == 37\n\tassert find_star_num(4) == 73\n\tassert find_star_num(5) == 121", "entry_point": "find_star_num"}
{"task_id": 258, "prompt": "def ascii_value(k):\n    \"\"\"\n    Write a function to find the ascii value of a character.\n    >>> ascii_value('A')\n    65\n    >>> ascii_value('R')\n    82\n    >>> ascii_value('S')\n    83\n    \"\"\"\n    ", "canonical_solution": "def ascii_value(k):\r\n  ch=k\r\n  return ord(ch)", "test": "def check(candidate):\n\tassert ascii_value('A')==65\n\tassert ascii_value('R')==82\n\tassert ascii_value('S')==83", "entry_point": "ascii_value"}
{"task_id": 259, "prompt": "def sum_even_and_even_index(arr, n):\n    \"\"\"\n    Write a python function to find the sum of even numbers at even positions.\n    >>> sum_even_and_even_index([5, 6, 12, 1, 18, 8], 6)\n    30\n    >>> sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18], 10)\n    26\n    >>> sum_even_and_even_index([5, 6, 12, 1], 4)\n    12\n    \"\"\"\n    ", "canonical_solution": "def sum_even_and_even_index(arr,n):  \r\n    i = 0\r\n    sum = 0\r\n    for i in range(0,n,2): \r\n        if (arr[i] % 2 == 0) : \r\n            sum += arr[i]  \r\n    return sum", "test": "def check(candidate):\n\tassert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\n\tassert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10) == 26\n\tassert sum_even_and_even_index([5, 6, 12, 1],4) == 12", "entry_point": "sum_even_and_even_index"}
{"task_id": 260, "prompt": "def even_Power_Sum(n):\n    \"\"\"\n    Write a python function to find the sum of fifth power of first n even natural numbers.\n    >>> even_Power_Sum(2)\n    1056\n    >>> even_Power_Sum(3)\n    8832\n    >>> even_Power_Sum(1)\n    32\n    \"\"\"\n    ", "canonical_solution": "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n+1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j*j); \r\n    return sum; ", "test": "def check(candidate):\n\tassert even_Power_Sum(2) == 1056\n\tassert even_Power_Sum(3) == 8832\n\tassert even_Power_Sum(1) == 32", "entry_point": "even_Power_Sum"}
{"task_id": 261, "prompt": "def rear_extract(test_list):\n    \"\"\"\n    Write a function to perfom the rear element extraction from list of tuples records.\n    >>> rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)])\n    [21, 20, 19]\n    >>> rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)])\n    [36, 25, 45]\n    >>> rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)])\n    [14, 36, 56]\n    \"\"\"\n    ", "canonical_solution": "def rear_extract(test_list):\r\n  res = [lis[-1] for lis in test_list]\r\n  return (res) ", "test": "def check(candidate):\n\tassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\n\tassert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]\n\tassert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]", "entry_point": "rear_extract"}
{"task_id": 262, "prompt": "def substract_elements(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to substract the contents of one tuple with corresponding index of other tuple.\n    >>> substract_elements((10, 4, 5), (2, 5, 18))\n    (8, (- 1), (- 13))\n    >>> substract_elements((11, 2, 3), (24, 45, 16))\n    ((- 13), (- 43), (- 13))\n    >>> substract_elements((7, 18, 9), (10, 11, 12))\n    ((- 3), 7, (- 3))\n    \"\"\"\n    ", "canonical_solution": "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\r\n  return (res) ", "test": "def check(candidate):\n\tassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\n\tassert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)\n\tassert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)", "entry_point": "substract_elements"}
{"task_id": 263, "prompt": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function to find sum of even index binomial coefficients.\n    >>> even_binomial_Coeff_Sum(4)\n    8\n    >>> even_binomial_Coeff_Sum(6)\n    32\n    >>> even_binomial_Coeff_Sum(2)\n    2\n    \"\"\"\n    ", "canonical_solution": "import math  \r\ndef even_binomial_Coeff_Sum( n): \r\n    return (1 << (n - 1)) ", "test": "def check(candidate):\n\tassert even_binomial_Coeff_Sum(4) == 8\n\tassert even_binomial_Coeff_Sum(6) == 32\n\tassert even_binomial_Coeff_Sum(2) == 2", "entry_point": "even_binomial_Coeff_Sum"}
{"task_id": 264, "prompt": "def get_Position(a, n, m):\n    \"\"\"\n    Write a python function to find the position of the last removed element from the given array.\n    >>> get_Position([2, 5, 4], 3, 2)\n    2\n    >>> get_Position([4, 3], 2, 2)\n    2\n    >>> get_Position([1, 2, 3, 4], 4, 1)\n    4\n    \"\"\"\n    ", "canonical_solution": "import math as mt \r\ndef get_Position(a,n,m): \r\n    for i in range(n): \r\n        a[i] = (a[i] // m + (a[i] % m != 0))  \r\n    result,maxx = -1,-1\r\n    for i in range(n - 1,-1,-1): \r\n        if (maxx < a[i]): \r\n            maxx = a[i] \r\n            result = i \r\n    return result + 1", "test": "def check(candidate):\n\tassert get_Position([2,5,4],3,2) == 2\n\tassert get_Position([4,3],2,2) == 2\n\tassert get_Position([1,2,3,4],4,1) == 4", "entry_point": "get_Position"}
{"task_id": 265, "prompt": "def volume_cylinder(r, h):\n    \"\"\"\n    Write a function to find the volume of a cylinder.\n    >>> volume_cylinder(10, 5)\n    1570.7500000000002\n    >>> volume_cylinder(4, 5)\n    251.32000000000002\n    >>> volume_cylinder(4, 10)\n    502.64000000000004\n    \"\"\"\n    ", "canonical_solution": "def volume_cylinder(r,h):\r\n  volume=3.1415*r*r*h\r\n  return volume", "test": "def check(candidate):\n\tassert volume_cylinder(10,5)==1570.7500000000002\n\tassert volume_cylinder(4,5)==251.32000000000002\n\tassert volume_cylinder(4,10)==502.64000000000004", "entry_point": "volume_cylinder"}
{"task_id": 266, "prompt": "def dict_filter(dict, n):\n    \"\"\"\n    Write a function to filter a dictionary based on values.\n    >>> dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 170)\n    {'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n    >>> dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 180)\n    {'Alden Cantrell': 180, 'Pierre Cox': 190}\n    >>> dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 190)\n    {'Pierre Cox': 190}\n    \"\"\"\n    ", "canonical_solution": "def dict_filter(dict,n):\r\n result = {key:value for (key, value) in dict.items() if value >=n}\r\n return result", "test": "def check(candidate):\n\tassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\tassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}\n\tassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}", "entry_point": "dict_filter"}
{"task_id": 267, "prompt": "def count_first_elements(test_tup):\n    \"\"\"\n    Write a function to find the element count that occurs before the record in the given tuple.\n    >>> count_first_elements((1, 5, 7, (4, 6), 10))\n    3\n    >>> count_first_elements((2, 9, (5, 7), 11))\n    2\n    >>> count_first_elements((11, 15, 5, 8, (2, 3), 8))\n    4\n    \"\"\"\n    ", "canonical_solution": "def count_first_elements(test_tup):\r\n  for count, ele in enumerate(test_tup):\r\n    if isinstance(ele, tuple):\r\n      break\r\n  return (count) ", "test": "def check(candidate):\n\tassert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\n\tassert count_first_elements((2, 9, (5, 7), 11) ) == 2\n\tassert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4", "entry_point": "count_first_elements"}
{"task_id": 268, "prompt": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    >>> is_num_decagonal(3)\n    27\n    >>> is_num_decagonal(7)\n    175\n    >>> is_num_decagonal(10)\n    370\n    \"\"\"\n    ", "canonical_solution": "def is_num_decagonal(n): \r\n\treturn 4 * n * n - 3 * n ", "test": "def check(candidate):\n\tassert is_num_decagonal(3) == 27\n\tassert is_num_decagonal(7) == 175\n\tassert is_num_decagonal(10) == 370", "entry_point": "is_num_decagonal"}
{"task_id": 269, "prompt": "def sequential_search(dlist, item):\n    \"\"\"\n    Write a function to search an element in the given array by using sequential search.\n    >>> sequential_search([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31)\n    (True, 3)\n    >>> sequential_search([12, 32, 45, 62, 35, 47, 44, 61], 61)\n    (True, 7)\n    >>> sequential_search([9, 10, 17, 19, 22, 39, 48, 56], 48)\n    (True, 6)\n    \"\"\"\n    ", "canonical_solution": "def sequential_search(dlist, item):\r\n    pos = 0\r\n    found = False\r\n    while pos < len(dlist) and not found:\r\n        if dlist[pos] == item:\r\n            found = True\r\n        else:\r\n            pos = pos + 1\r\n    return found, pos", "test": "def check(candidate):\n\tassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\n\tassert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)\n\tassert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)", "entry_point": "sequential_search"}
{"task_id": 270, "prompt": "def all_unique(test_list):\n    \"\"\"\n    Write a python function to check if the elements of a given list are unique or not.\n    >>> all_unique([1, 2, 3])\n    True\n    >>> all_unique([1, 2, 1, 2])\n    False\n    >>> all_unique([1, 2, 3, 4, 5])\n    True\n    \"\"\"\n    ", "canonical_solution": "def all_unique(test_list):\r\n    if len(test_list) > len(set(test_list)):\r\n        return False\r\n    return True", "test": "def check(candidate):\n\tassert all_unique([1,2,3]) == True\n\tassert all_unique([1,2,1,2]) == False\n\tassert all_unique([1,2,3,4,5]) == True", "entry_point": "all_unique"}
{"task_id": 271, "prompt": "def sub_list(nums1, nums2):\n    \"\"\"\n    Write a function to substaract two lists using map and lambda function.\n    >>> sub_list([1, 2, 3], [4, 5, 6])\n    [(- 3), (- 3), (- 3)]\n    >>> sub_list([1, 2], [3, 4])\n    [(- 2), (- 2)]\n    >>> sub_list([90, 120], [50, 70])\n    [40, 50]\n    \"\"\"\n    ", "canonical_solution": "def sub_list(nums1,nums2):\r\n  result = map(lambda x, y: x - y, nums1, nums2)\r\n  return list(result)", "test": "def check(candidate):\n\tassert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\n\tassert sub_list([1,2],[3,4])==[-2,-2]\n\tassert sub_list([90,120],[50,70])==[40,50]", "entry_point": "sub_list"}
{"task_id": 272, "prompt": "def validate(n):\n    \"\"\"\n    Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.\n    >>> validate(1234)\n    True\n    >>> validate(51241)\n    False\n    >>> validate(321)\n    True\n    \"\"\"\n    ", "canonical_solution": "def validate(n): \r\n    for i in range(10): \r\n        temp = n;  \r\n        count = 0; \r\n        while (temp): \r\n            if (temp % 10 == i): \r\n                count+=1;  \r\n            if (count > i): \r\n                return False\r\n            temp //= 10; \r\n    return True", "test": "def check(candidate):\n\tassert validate(1234) == True\n\tassert validate(51241) == False\n\tassert validate(321) == True", "entry_point": "validate"}
{"task_id": 273, "prompt": "def check_element(list, element):\n    \"\"\"\n    Write a function to check whether all items of a list are equal to a given string.\n    >>> check_element(['green', 'orange', 'black', 'white'], 'blue')\n    False\n    >>> check_element([1, 2, 3, 4], 7)\n    False\n    >>> check_element(['green', 'green', 'green', 'green'], 'green')\n    True\n    \"\"\"\n    ", "canonical_solution": "def check_element(list,element):\r\n  check_element=all(v== element for v in list)\r\n  return check_element", "test": "def check(candidate):\n\tassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\n\tassert check_element([1,2,3,4],7)==False\n\tassert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True", "entry_point": "check_element"}
{"task_id": 274, "prompt": "def text_match_two_three(text):\n    \"\"\"\n    Write a function that matches a string that has an a followed by two to three 'b'.\n    >>> text_match_two_three('ac')\n    'Not matched!'\n    >>> text_match_two_three('dc')\n    'Not matched!'\n    >>> text_match_two_three('abbbba')\n    'Found a match!'\n    \"\"\"\n    ", "canonical_solution": "import re\r\ndef text_match_two_three(text):\r\n        patterns = 'ab{2,3}'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "test": "def check(candidate):\n\tassert text_match_two_three(\"ac\")==('Not matched!')\n\tassert text_match_two_three(\"dc\")==('Not matched!')\n\tassert text_match_two_three(\"abbbba\")==('Found a match!')", "entry_point": "text_match_two_three"}
{"task_id": 275, "prompt": "def max_sub_array_sum_repeated(a, n, k):\n    \"\"\"\n    Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\n    >>> max_sub_array_sum_repeated([10, 20, (- 30), (- 1)], 4, 3)\n    30\n    >>> max_sub_array_sum_repeated([(- 1), 10, 20], 3, 2)\n    59\n    >>> max_sub_array_sum_repeated([(- 1), (- 2), (- 3)], 3, 3)\n    (- 1)\n    \"\"\"\n    ", "canonical_solution": "def max_sub_array_sum_repeated(a, n, k): \r\n\tmax_so_far = -2147483648\r\n\tmax_ending_here = 0\r\n\tfor i in range(n*k): \r\n\t\tmax_ending_here = max_ending_here + a[i%n] \r\n\t\tif (max_so_far < max_ending_here): \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\tif (max_ending_here < 0): \r\n\t\t\tmax_ending_here = 0\r\n\treturn max_so_far", "test": "def check(candidate):\n\tassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\n\tassert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59\n\tassert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1", "entry_point": "max_sub_array_sum_repeated"}
{"task_id": 276, "prompt": "def square_Sum(n):\n    \"\"\"\n    Write a python function to find the sum of squares of first n even natural numbers.\n    >>> square_Sum(2)\n    20\n    >>> square_Sum(3)\n    56\n    >>> square_Sum(4)\n    120\n    \"\"\"\n    ", "canonical_solution": "def square_Sum(n):  \r\n    return int(2*n*(n+1)*(2*n+1)/3)", "test": "def check(candidate):\n\tassert square_Sum(2) == 20\n\tassert square_Sum(3) == 56\n\tassert square_Sum(4) == 120", "entry_point": "square_Sum"}
{"task_id": 277, "prompt": "def modular_inverse(arr, N, P):\n    \"\"\"\n    Write a function to count array elements having modular inverse under given prime number p equal to itself.\n    >>> modular_inverse([1, 6, 4, 5], 4, 7)\n    2\n    >>> modular_inverse([1, 3, 8, 12, 12], 5, 13)\n    3\n    >>> modular_inverse([2, 3, 4, 5], 4, 6)\n    1\n    \"\"\"\n    ", "canonical_solution": "def modular_inverse(arr, N, P):\r\n\tcurrent_element = 0\r\n\tfor i in range(0, N):\r\n\t\tif ((arr[i] * arr[i]) % P == 1):\r\n\t\t\tcurrent_element = current_element + 1\r\n\treturn current_element", "test": "def check(candidate):\n\tassert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\n\tassert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3\n\tassert modular_inverse([2, 3, 4, 5], 4, 6) == 1", "entry_point": "modular_inverse"}
{"task_id": 278, "prompt": "def odd_Days(N):\n    \"\"\"\n    Write a python function to calculate the number of odd days in a given year.\n    >>> odd_Days(100)\n    5\n    >>> odd_Days(50)\n    6\n    >>> odd_Days(75)\n    2\n    \"\"\"\n    ", "canonical_solution": "def odd_Days(N): \r\n    hund1 = N // 100\r\n    hund4 = N // 400\r\n    leap = N >> 2\r\n    ordd = N - leap \r\n    if (hund1): \r\n        ordd += hund1 \r\n        leap -= hund1 \r\n    if (hund4): \r\n        ordd -= hund4 \r\n        leap += hund4 \r\n    days = ordd + leap * 2\r\n    odd = days % 7\r\n    return odd ", "test": "def check(candidate):\n\tassert odd_Days(100) == 5\n\tassert odd_Days(50) ==6\n\tassert odd_Days(75) == 2", "entry_point": "odd_Days"}
{"task_id": 279, "prompt": "def max_length(list1):\n    \"\"\"\n    Write a function to find the list of lists with maximum length.\n    >>> max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n    (3, [13, 15, 17])\n    >>> max_length([[1], [5, 7], [10, 12, 14, 15]])\n    (4, [10, 12, 14, 15])\n    >>> max_length([[5], [15, 20, 25]])\n    (3, [15, 20, 25])\n    \"\"\"\n    ", "canonical_solution": "def max_length(list1):\r\n    max_length = max(len(x) for x in  list1 )  \r\n    max_list = max((x) for x in   list1)\r\n    return(max_length, max_list)", "test": "def check(candidate):\n\tassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\tassert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])\n\tassert max_length([[5], [15,20,25]])==(3, [15,20,25])", "entry_point": "max_length"}
{"task_id": 280, "prompt": "def count_no_of_ways(n, k):\n    \"\"\"\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    >>> count_no_of_ways(2, 4)\n    16\n    >>> count_no_of_ways(3, 2)\n    6\n    >>> count_no_of_ways(4, 4)\n    228\n    \"\"\"\n    ", "canonical_solution": "def count_no_of_ways(n, k): \r\n\tdp = [0] * (n + 1) \r\n\ttotal = k \r\n\tmod = 1000000007\r\n\tdp[1] = k \r\n\tdp[2] = k * k\t \r\n\tfor i in range(3,n+1): \r\n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \r\n\treturn dp[n]", "test": "def check(candidate):\n\tassert count_no_of_ways(2, 4) == 16\n\tassert count_no_of_ways(3, 2) == 6\n\tassert count_no_of_ways(4, 4) == 228", "entry_point": "count_no_of_ways"}
{"task_id": 281, "prompt": "def find(n, m):\n    \"\"\"\n    Write a python function to find quotient of two numbers.\n    >>> find(10, 3)\n    3\n    >>> find(4, 2)\n    2\n    >>> find(20, 5)\n    4\n    \"\"\"\n    ", "canonical_solution": "def find(n,m):  \r\n    q = n//m \r\n    return (q)", "test": "def check(candidate):\n\tassert find(10,3) == 3\n\tassert find(4,2) == 2\n\tassert find(20,5) == 4", "entry_point": "find"}
{"task_id": 282, "prompt": "def otherside_rightangle(w, h):\n    \"\"\"\n    Write a function to find the third side of a right angled triangle.\n    >>> otherside_rightangle(7, 8)\n    10.63014581273465\n    >>> otherside_rightangle(3, 4)\n    5\n    >>> otherside_rightangle(7, 15)\n    16.55294535724685\n    \"\"\"\n    ", "canonical_solution": "import math\r\ndef otherside_rightangle(w,h):\r\n  s=math.sqrt((w*w)+(h*h))\r\n  return s", "test": "def check(candidate):\n\tassert otherside_rightangle(7,8)==10.63014581273465\n\tassert otherside_rightangle(3,4)==5\n\tassert otherside_rightangle(7,15)==16.55294535724685", "entry_point": "otherside_rightangle"}
{"task_id": 283, "prompt": "def max_val(listval):\n    \"\"\"\n    Write a function to find the maximum value in a given heterogeneous list.\n    >>> max_val(['Python', 3, 2, 4, 5, 'version'])\n    5\n    >>> max_val(['Python', 15, 20, 25])\n    25\n    >>> max_val(['Python', 30, 20, 40, 50, 'version'])\n    50\n    \"\"\"\n    ", "canonical_solution": "def max_val(listval):\r\n     max_val = max(i for i in listval if isinstance(i, int)) \r\n     return(max_val)", "test": "def check(candidate):\n\tassert max_val(['Python', 3, 2, 4, 5, 'version'])==5\n\tassert max_val(['Python', 15, 20, 25])==25\n\tassert max_val(['Python', 30, 20, 40, 50, 'version'])==50", "entry_point": "max_val"}
{"task_id": 284, "prompt": "def sum_div(number):\n    \"\"\"\n    Write a function to return the sum of all divisors of a number.\n    >>> sum_div(8)\n    7\n    >>> sum_div(12)\n    16\n    >>> sum_div(7)\n    1\n    \"\"\"\n    ", "canonical_solution": "def sum_div(number):\r\n    divisors = [1]\r\n    for i in range(2, number):\r\n        if (number % i)==0:\r\n            divisors.append(i)\r\n    return sum(divisors)", "test": "def check(candidate):\n\tassert sum_div(8)==7\n\tassert sum_div(12)==16\n\tassert sum_div(7)==1", "entry_point": "sum_div"}
{"task_id": 285, "prompt": "def get_Inv_Count(arr, n):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    >>> get_Inv_Count([1, 20, 6, 4, 5], 5)\n    5\n    >>> get_Inv_Count([1, 2, 1], 3)\n    1\n    >>> get_Inv_Count([1, 2, 5, 6, 1], 5)\n    3\n    \"\"\"\n    ", "canonical_solution": "def get_Inv_Count(arr,n): \r\n    inv_count = 0\r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] > arr[j]): \r\n                inv_count += 1\r\n    return inv_count ", "test": "def check(candidate):\n\tassert get_Inv_Count([1,20,6,4,5],5) == 5\n\tassert get_Inv_Count([1,2,1],3) == 1\n\tassert get_Inv_Count([1,2,5,6,1],5) == 3", "entry_point": "get_Inv_Count"}
{"task_id": 286, "prompt": "def flatten_list(list1):\n    \"\"\"\n    Write a function to flatten a given nested list structure.\n    >>> flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])\n    [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n    >>> flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])\n    [10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\n    >>> flatten_list([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]])\n    [1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]\n    \"\"\"\n    ", "canonical_solution": "def flatten_list(list1):\r\n    result_list = []\r\n    if not list1: return result_list\r\n    stack = [list(list1)]\r\n    while stack:\r\n        c_num = stack.pop()\r\n        next = c_num.pop()\r\n        if c_num: stack.append(c_num)\r\n        if isinstance(next, list):\r\n            if next: stack.append(list(next))\r\n        else: result_list.append(next)\r\n    result_list.reverse()\r\n    return result_list ", "test": "def check(candidate):\n\tassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n\tassert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\n\tassert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]", "entry_point": "flatten_list"}
{"task_id": 287, "prompt": "def intersection_nested_lists(l1, l2):\n    \"\"\"\n    Write a function to find the nested list elements which are present in another list.\n    >>> intersection_nested_lists([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])\n    [[12], [7, 11], [1, 5, 8]]\n    >>> intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])\n    [[], []]\n    >>> intersection_nested_lists(['john', 'amal', 'joel', 'george'], [['john'], ['jack', 'john', 'mary'], ['howard', 'john'], ['jude']])\n    [['john'], ['john'], ['john'], []]\n    \"\"\"\n    ", "canonical_solution": "def intersection_nested_lists(l1, l2):\r\n    result = [[n for n in lst if n in l1] for lst in l2]\r\n    return result", "test": "def check(candidate):\n\tassert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\n\tassert intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]\n\tassert intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]", "entry_point": "intersection_nested_lists"}
{"task_id": 288, "prompt": "def max_aggregate(stdata):\n    \"\"\"\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    >>> max_aggregate([('Juan Whelan', 90), ('Sabah Colley', 88), ('Peter Nichols', 7), ('Juan Whelan', 122), ('Sabah Colley', 84)])\n    ('Juan Whelan', 212)\n    >>> max_aggregate([('Juan Whelan', 50), ('Sabah Colley', 48), ('Peter Nichols', 37), ('Juan Whelan', 22), ('Sabah Colley', 14)])\n    ('Juan Whelan', 72)\n    >>> max_aggregate([('Juan Whelan', 10), ('Sabah Colley', 20), ('Peter Nichols', 30), ('Juan Whelan', 40), ('Sabah Colley', 50)])\n    ('Sabah Colley', 70)\n    \"\"\"\n    ", "canonical_solution": "from collections import defaultdict\r\ndef max_aggregate(stdata):\r\n    temp = defaultdict(int)\r\n    for name, marks in stdata:\r\n        temp[name] += marks\r\n    return max(temp.items(), key=lambda x: x[1])", "test": "def check(candidate):\n\tassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\n\tassert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)\n\tassert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)", "entry_point": "max_aggregate"}
{"task_id": 289, "prompt": "def count_binary_seq(n):\n    \"\"\"\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    >>> count_binary_seq(1)\n    2.0\n    >>> count_binary_seq(2)\n    6.0\n    >>> count_binary_seq(3)\n    20.0\n    \"\"\"\n    ", "canonical_solution": "def count_binary_seq(n): \r\n\tnCr = 1\r\n\tres = 1\r\n\tfor r in range(1, n + 1): \r\n\t\tnCr = (nCr * (n + 1 - r)) / r \r\n\t\tres += nCr * nCr \r\n\treturn res ", "test": "def check(candidate):\n\tassert count_binary_seq(1) == 2.0\n\tassert count_binary_seq(2) == 6.0\n\tassert count_binary_seq(3) == 20.0", "entry_point": "count_binary_seq"}
{"task_id": 290, "prompt": "def dict_depth(d):\n    \"\"\"\n    Write a function to find the depth of a dictionary.\n    >>> dict_depth({'a': 1, 'b': {'c': {'d': {}}}})\n    4\n    >>> dict_depth({'a': 1, 'b': {'c': 'python'}})\n    2\n    >>> dict_depth({1: 'Sun', 2: {3: {4: 'Mon'}}})\n    3\n    \"\"\"\n    ", "canonical_solution": "def dict_depth(d):\r\n    if isinstance(d, dict):\r\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\r\n    return 0", "test": "def check(candidate):\n\tassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\n\tassert dict_depth({'a':1, 'b': {'c':'python'}})==2\n\tassert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3", "entry_point": "dict_depth"}
{"task_id": 291, "prompt": "def set_Bit_Number(n):\n    \"\"\"\n    Write a python function to find the most significant bit number which is also a set bit.\n    >>> set_Bit_Number(6)\n    4\n    >>> set_Bit_Number(10)\n    8\n    >>> set_Bit_Number(18)\n    16\n    \"\"\"\n    ", "canonical_solution": "def set_Bit_Number(n): \r\n    if (n == 0): \r\n        return 0; \r\n    msb = 0; \r\n    n = int(n / 2); \r\n    while (n > 0): \r\n        n = int(n / 2); \r\n        msb += 1; \r\n    return (1 << msb)", "test": "def check(candidate):\n\tassert set_Bit_Number(6) == 4\n\tassert set_Bit_Number(10) == 8\n\tassert set_Bit_Number(18) == 16", "entry_point": "set_Bit_Number"}
{"task_id": 292, "prompt": "def solve(a, n):\n    \"\"\"\n    Write a python function to check whether the count of inversion of two types are same or not.\n    >>> solve([1, 0, 2], 3)\n    True\n    >>> solve([1, 2, 0], 3)\n    False\n    >>> solve([1, 2, 1], 3)\n    True\n    \"\"\"\n    ", "canonical_solution": "import sys \r\ndef solve(a,n):   \r\n    mx = -sys.maxsize - 1\r\n    for j in range(1,n):  \r\n        if (mx > a[j]):  \r\n            return False  \r\n        mx = max(mx,a[j - 1])    \r\n    return True", "test": "def check(candidate):\n\tassert solve([1,0,2],3) == True\n\tassert solve([1,2,0],3) == False\n\tassert solve([1,2,1],3) == True", "entry_point": "solve"}
{"task_id": 293, "prompt": "def find_Element(arr, ranges, rotations, index):\n    \"\"\"\n    Write a python function to find element at a given index after number of rotations.\n    >>> find_Element([1, 2, 3, 4, 5], [[0, 2], [0, 3]], 2, 1)\n    3\n    >>> find_Element([1, 2, 3, 4], [[0, 1], [0, 2]], 1, 2)\n    3\n    >>> find_Element([1, 2, 3, 4, 5, 6], [[0, 1], [0, 2]], 1, 1)\n    1\n    \"\"\"\n    ", "canonical_solution": "def find_Element(arr,ranges,rotations,index) :  \r\n    for i in range(rotations - 1,-1,-1 ) : \r\n        left = ranges[i][0] \r\n        right = ranges[i][1] \r\n        if (left <= index and right >= index) : \r\n            if (index == left) : \r\n                index = right \r\n            else : \r\n                index = index - 1 \r\n    return arr[index] ", "test": "def check(candidate):\n\tassert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\n\tassert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3\n\tassert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1", "entry_point": "find_Element"}
{"task_id": 294, "prompt": "def start_withp(words):\n    \"\"\"\n    Write a function to match two words from a list of words starting with letter 'p'.\n    >>> start_withp(['Python PHP', 'Java JavaScript', 'c c++'])\n    ('Python', 'PHP')\n    >>> start_withp(['Python Programming', 'Java Programming'])\n    ('Python', 'Programming')\n    >>> start_withp(['Pqrst Pqr', 'qrstuv'])\n    ('Pqrst', 'Pqr')\n    \"\"\"\n    ", "canonical_solution": "import re\r\ndef start_withp(words):\r\n for w in words:\r\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\r\n        if m:\r\n            return m.groups()", "test": "def check(candidate):\n\tassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\n\tassert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')\n\tassert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')", "entry_point": "start_withp"}
{"task_id": 295, "prompt": "def max_sum_increasing_subseq(a, n, index, k):\n    \"\"\"\n    Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\n    >>> max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5], 7, 4, 6)\n    11\n    >>> max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5], 7, 2, 5)\n    7\n    >>> max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4)\n    71\n    \"\"\"\n    ", "canonical_solution": "def max_sum_increasing_subseq(a, n, index, k):\r\n\tdp = [[0 for i in range(n)] \r\n\t\t\tfor i in range(n)]\r\n\tfor i in range(n):\r\n\t\tif a[i] > a[0]:\r\n\t\t\tdp[0][i] = a[i] + a[0]\r\n\t\telse:\r\n\t\t\tdp[0][i] = a[i]\r\n\tfor i in range(1, n):\r\n\t\tfor j in range(n):\r\n\t\t\tif a[j] > a[i] and j > i:\r\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\r\n\t\t\t\telse:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\t\t\telse:\r\n\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\treturn dp[index][k]", "test": "def check(candidate):\n\tassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\n\tassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7\n\tassert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71", "entry_point": "max_sum_increasing_subseq"}
{"task_id": 296, "prompt": "def colon_tuplex(tuplex, m, n):\n    \"\"\"\n    Write a function to get a colon of a tuple.\n    >>> colon_tuplex(('HELLO', 5, [], True), 2, 50)\n    ('HELLO', 5, [50], True)\n    >>> colon_tuplex(('HELLO', 5, [], True), 2, 100)\n    ('HELLO', 5, [100], True)\n    >>> colon_tuplex(('HELLO', 5, [], True), 2, 500)\n    ('HELLO', 5, [500], True)\n    \"\"\"\n    ", "canonical_solution": "from copy import deepcopy\r\ndef colon_tuplex(tuplex,m,n):\r\n  tuplex_colon = deepcopy(tuplex)\r\n  tuplex_colon[m].append(n)\r\n  return tuplex_colon", "test": "def check(candidate):\n\tassert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \n\tassert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))\n\tassert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)", "entry_point": "colon_tuplex"}
{"task_id": 297, "prompt": "def large_product(nums1, nums2, N):\n    \"\"\"\n    Write a function to find the specified number of largest products from two given lists.\n    >>> large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3)\n    [60, 54, 50]\n    >>> large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4)\n    [60, 54, 50, 48]\n    >>> large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5)\n    [60, 54, 50, 48, 45]\n    \"\"\"\n    ", "canonical_solution": "def large_product(nums1, nums2, N):\r\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\r\n    return result", "test": "def check(candidate):\n\tassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\n\tassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]\n\tassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]", "entry_point": "large_product"}
{"task_id": 298, "prompt": "def maximum(a, b):\n    \"\"\"\n    Write a python function to find the maximum of two numbers.\n    >>> maximum(5, 10)\n    10\n    >>> maximum((- 1), (- 2))\n    (- 1)\n    >>> maximum(9, 7)\n    9\n    \"\"\"\n    ", "canonical_solution": "def maximum(a,b):   \r\n    if a >= b: \r\n        return a \r\n    else: \r\n        return b ", "test": "def check(candidate):\n\tassert maximum(5,10) == 10\n\tassert maximum(-1,-2) == -1\n\tassert maximum(9,7) == 9", "entry_point": "maximum"}
{"task_id": 299, "prompt": "def string_to_tuple(str1):\n    \"\"\"\n    Write a function to convert a given string to a tuple.\n    >>> string_to_tuple('python 3.0')\n    ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n    >>> string_to_tuple('item1')\n    ('i', 't', 'e', 'm', '1')\n    >>> string_to_tuple('15.10')\n    ('1', '5', '.', '1', '0')\n    \"\"\"\n    ", "canonical_solution": "def string_to_tuple(str1):\r\n    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result", "test": "def check(candidate):\n\tassert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n\tassert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')\n\tassert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')", "entry_point": "string_to_tuple"}
{"task_id": 300, "prompt": "def set_left_most_unset_bit(n):\n    \"\"\"\n    Write a python function to set the left most unset bit.\n    >>> set_left_most_unset_bit(10)\n    14\n    >>> set_left_most_unset_bit(12)\n    14\n    >>> set_left_most_unset_bit(15)\n    15\n    \"\"\"\n    ", "canonical_solution": "def set_left_most_unset_bit(n): \r\n    if not (n & (n + 1)): \r\n        return n \r\n    pos, temp, count = 0, n, 0 \r\n    while temp: \r\n        if not (temp & 1): \r\n            pos = count      \r\n        count += 1; temp>>=1\r\n    return (n | (1 << (pos))) ", "test": "def check(candidate):\n\tassert set_left_most_unset_bit(10) == 14\n\tassert set_left_most_unset_bit(12) == 14\n\tassert set_left_most_unset_bit(15) == 15", "entry_point": "set_left_most_unset_bit"}
{"task_id": 301, "prompt": "def volume_cone(r, h):\n    \"\"\"\n    Write a function to find the volume of a cone.\n    >>> volume_cone(5, 12)\n    314.15926535897927\n    >>> volume_cone(10, 15)\n    1570.7963267948965\n    >>> volume_cone(19, 17)\n    6426.651371693521\n    \"\"\"\n    ", "canonical_solution": "import math\r\ndef volume_cone(r,h):\r\n  volume = (1.0/3) * math.pi * r * r * h\r\n  return volume", "test": "def check(candidate):\n\tassert volume_cone(5,12)==314.15926535897927\n\tassert volume_cone(10,15)==1570.7963267948965\n\tassert volume_cone(19,17)==6426.651371693521", "entry_point": "volume_cone"}
{"task_id": 302, "prompt": "def pos_nos(list1):\n    \"\"\"\n    Write a python function to print positive numbers in a list.\n    >>> pos_nos([(- 1), (- 2), 1, 2])\n    1\n    >>> pos_nos([3, 4, (- 5)])\n    3\n    >>> pos_nos([(- 2), (- 3), 1])\n    1\n    \"\"\"\n    ", "canonical_solution": "def pos_nos(list1):\r\n  for num in list1: \r\n    if num >= 0: \r\n       return num ", "test": "def check(candidate):\n\tassert pos_nos([-1,-2,1,2]) == 1,2\n\tassert pos_nos([3,4,-5]) == 3,4\n\tassert pos_nos([-2,-3,1]) == 1", "entry_point": "pos_nos"}
{"task_id": 303, "prompt": "def max_sum_rectangular_grid(grid, n):\n    \"\"\"\n    Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\n    >>> max_sum_rectangular_grid([[1, 4, 5], [2, 0, 0]], 3)\n    7\n    >>> max_sum_rectangular_grid([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]], 5)\n    24\n    >>> max_sum_rectangular_grid([[7, 9, 11, 15, 19], [21, 25, 28, 31, 32]], 5)\n    81\n    \"\"\"\n    ", "canonical_solution": "def max_sum_rectangular_grid(grid, n) : \r\n\tincl = max(grid[0][0], grid[1][0]) \r\n\texcl = 0\r\n\tfor i in range(1, n) : \r\n\t\texcl_new = max(excl, incl) \r\n\t\tincl = excl + max(grid[0][i], grid[1][i]) \r\n\t\texcl = excl_new \r\n\treturn max(excl, incl)", "test": "def check(candidate):\n\tassert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\n\tassert max_sum_rectangular_grid([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5) == 24\n\tassert max_sum_rectangular_grid([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5) == 81", "entry_point": "max_sum_rectangular_grid"}
{"task_id": 304, "prompt": "def find_Max_Len_Even(str):\n    \"\"\"\n    Write a python function to find the first maximum length of even word.\n    >>> find_Max_Len_Even('python language')\n    'language'\n    >>> find_Max_Len_Even('maximum even length')\n    'length'\n    >>> find_Max_Len_Even('eve')\n    '-1'\n    \"\"\"\n    ", "canonical_solution": "def find_Max_Len_Even(str): \r\n    n = len(str) \r\n    i = 0\r\n    currlen = 0\r\n    maxlen = 0\r\n    st = -1\r\n    while (i < n): \r\n        if (str[i] == ' '): \r\n            if (currlen % 2 == 0): \r\n                if (maxlen < currlen): \r\n                    maxlen = currlen \r\n                    st = i - currlen \r\n            currlen = 0 \r\n        else : \r\n            currlen += 1\r\n        i += 1\r\n    if (currlen % 2 == 0): \r\n        if (maxlen < currlen): \r\n            maxlen = currlen \r\n            st = i - currlen \r\n    if (st == -1): \r\n        return \"-1\" \r\n    return str[st: st + maxlen] ", "test": "def check(candidate):\n\tassert find_Max_Len_Even(\"python language\") == \"language\"\n\tassert find_Max_Len_Even(\"maximum even length\") == \"length\"\n\tassert find_Max_Len_Even(\"eve\") == \"-1\"", "entry_point": "find_Max_Len_Even"}
{"task_id": 305, "prompt": "def find_last_occurrence(A, x):\n    \"\"\"\n    Write a function to find the index of the last occurrence of a given number in a sorted array.\n    >>> find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5)\n    3\n    >>> find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9)\n    9\n    >>> find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6)\n    6\n    \"\"\"\n    ", "canonical_solution": "def find_last_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            left = mid + 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result ", "test": "def check(candidate):\n\tassert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\n\tassert find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) == 9\n\tassert find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) == 6", "entry_point": "find_last_occurrence"}
{"task_id": 306, "prompt": "def modified_encode(alist):\n    \"\"\"\n    Write a function to reflect the modified run-length encoding from a list.\n    >>> modified_encode([1, 1, 2, 3, 4, 4, 5, 1])\n    [[2, 1], 2, 3, [2, 4], 5, 1]\n    >>> modified_encode('automatically')\n    ['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']\n    >>> modified_encode('python')\n    ['p', 'y', 't', 'h', 'o', 'n']\n    \"\"\"\n    ", "canonical_solution": "from itertools import groupby\r\ndef modified_encode(alist):\r\n        def ctr_ele(el):\r\n            if len(el)>1: return [len(el), el[0]]\r\n            else: return el[0]\r\n        return [ctr_ele(list(group)) for key, group in groupby(alist)]", "test": "def check(candidate):\n\tassert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\n\tassert modified_encode('automatically')==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']\n\tassert modified_encode('python')==['p', 'y', 't', 'h', 'o', 'n']", "entry_point": "modified_encode"}
{"task_id": 307, "prompt": "def max_volume(s):\n    \"\"\"\n    Write a python function to find the maximum volume of a cuboid with given sum of sides.\n    >>> max_volume(8)\n    18\n    >>> max_volume(4)\n    2\n    >>> max_volume(1)\n    0\n    \"\"\"\n    ", "canonical_solution": "def max_volume (s): \r\n    maxvalue = 0\r\n    i = 1\r\n    for i in range(s - 1): \r\n        j = 1\r\n        for j in range(s): \r\n            k = s - i - j \r\n            maxvalue = max(maxvalue, i * j * k)         \r\n    return maxvalue ", "test": "def check(candidate):\n\tassert max_volume(8) == 18\n\tassert max_volume(4) == 2\n\tassert max_volume(1) == 0", "entry_point": "max_volume"}
{"task_id": 308, "prompt": "def find_long_word(text):\n    \"\"\"\n    Write a function to find all five characters long word in the given string by using regex.\n    >>> find_long_word('Please move back to strem')\n    ['strem']\n    >>> find_long_word('4K Ultra HD streaming player')\n    ['Ultra']\n    >>> find_long_word('Streaming Media Player')\n    ['Media']\n    \"\"\"\n    ", "canonical_solution": "import re\r\ndef find_long_word(text):\r\n  return (re.findall(r\"\\b\\w{5}\\b\", text))", "test": "def check(candidate):\n\tassert find_long_word('Please move back to strem') == ['strem']\n\tassert find_long_word('4K Ultra HD streaming player') == ['Ultra']\n\tassert find_long_word('Streaming Media Player') == ['Media']", "entry_point": "find_long_word"}
{"task_id": 309, "prompt": "def sum_difference(n):\n    \"\"\"\n    Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\n    >>> sum_difference(12)\n    5434\n    >>> sum_difference(20)\n    41230\n    >>> sum_difference(54)\n    2151270\n    \"\"\"\n    ", "canonical_solution": "def sum_difference(n):\r\n    sumofsquares = 0\r\n    squareofsum = 0\r\n    for num in range(1, n+1):\r\n        sumofsquares += num * num\r\n        squareofsum += num\r\n    squareofsum = squareofsum ** 2\r\n    return squareofsum - sumofsquares", "test": "def check(candidate):\n\tassert sum_difference(12)==5434\n\tassert sum_difference(20)==41230\n\tassert sum_difference(54)==2151270", "entry_point": "sum_difference"}
{"task_id": 310, "prompt": "def find_demlo(s):\n    \"\"\"\n    Write a function to find the demlo number for the given number.\n    >>> find_demlo('111111')\n    '12345654321'\n    >>> find_demlo('1111')\n    '1234321'\n    >>> find_demlo('13333122222')\n    '123456789101110987654321'\n    \"\"\"\n    ", "canonical_solution": "def find_demlo(s): \r\n\tl = len(s) \r\n\tres = \"\" \r\n\tfor i in range(1,l+1): \r\n\t\tres = res + str(i) \r\n\tfor i in range(l-1,0,-1): \r\n\t\tres = res + str(i) \r\n\treturn res \t", "test": "def check(candidate):\n\tassert find_demlo(\"111111\") == '12345654321'\n\tassert find_demlo(\"1111\") == '1234321'\n\tassert find_demlo(\"13333122222\") == '123456789101110987654321'", "entry_point": "find_demlo"}
{"task_id": 311, "prompt": "def position_min(list1):\n    \"\"\"\n    Write a function to find all index positions of the minimum values in a given list.\n    >>> position_min([12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54])\n    [3, 11]\n    >>> position_min([1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5])\n    [0]\n    >>> position_min([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12])\n    [1]\n    \"\"\"\n    ", "canonical_solution": "def position_min(list1):\r\n    min_val = min(list1)\r\n    min_result = [i for i, j in enumerate(list1) if j == min_val]\r\n    return min_result", "test": "def check(candidate):\n\tassert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\n\tassert position_min([1,2,2,2,4,4,4,5,5,5,5])==[0]\n\tassert position_min([2,1,5,6,8,3,4,9,10,11,8,12])==[1]", "entry_point": "position_min"}
{"task_id": 312, "prompt": "def re_arrange(arr, n):\n    \"\"\"\n    Write a function to re-arrange the given array in alternating positive and negative items.\n    >>> re_arrange([(- 5), (- 2), 5, 2, 4, 7, 1, 8, 0, (- 8)], 10)\n    [(- 5), 5, (- 2), 2, (- 8), 4, 7, 1, 8, 0]\n    >>> re_arrange([1, 2, 3, (- 4), (- 1), 4], 6)\n    [(- 4), 1, (- 1), 2, 3, 4]\n    >>> re_arrange([4, 7, 9, 77, (- 4), 5, (- 3), (- 9)], 8)\n    [(- 4), 4, (- 3), 7, (- 9), 9, 77, 5]\n    \"\"\"\n    ", "canonical_solution": "def right_rotate(arr, n, out_of_place, cur):\r\n\ttemp = arr[cur]\r\n\tfor i in range(cur, out_of_place, -1):\r\n\t\tarr[i] = arr[i - 1]\r\n\tarr[out_of_place] = temp\r\n\treturn arr\r\ndef re_arrange(arr, n):\r\n\tout_of_place = -1\r\n\tfor index in range(n):\r\n\t\tif (out_of_place >= 0):\r\n\t\t\tif ((arr[index] >= 0 and arr[out_of_place] < 0) or\r\n\t\t\t(arr[index] < 0 and arr[out_of_place] >= 0)):\r\n\t\t\t\tarr = right_rotate(arr, n, out_of_place, index)\r\n\t\t\t\tif (index-out_of_place > 2):\r\n\t\t\t\t\tout_of_place += 2\r\n\t\t\t\telse:\r\n\t\t\t\t\tout_of_place = - 1\r\n\t\tif (out_of_place == -1):\r\n\t\t\tif ((arr[index] >= 0 and index % 2 == 0) or\r\n\t\t\t (arr[index] < 0 and index % 2 == 1)):\r\n\t\t\t\tout_of_place = index\r\n\treturn arr", "test": "def check(candidate):\n\tassert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\n\tassert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]\n\tassert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]", "entry_point": "re_arrange"}
{"task_id": 313, "prompt": "def sum_of_alternates(test_tuple):\n    \"\"\"\n    Write a function to extract the sum of alternate chains of tuples.\n    >>> sum_of_alternates((5, 6, 3, 6, 10, 34))\n    (46, 18)\n    >>> sum_of_alternates((1, 2, 3, 4, 5))\n    (6, 9)\n    >>> sum_of_alternates((6, 7, 8, 9, 4, 5))\n    (21, 18)\n    \"\"\"\n    ", "canonical_solution": "def sum_of_alternates(test_tuple):\r\n  sum1 = 0\r\n  sum2 = 0\r\n  for idx, ele in enumerate(test_tuple):\r\n    if idx % 2:\r\n      sum1 += ele\r\n    else:\r\n      sum2 += ele\r\n  return ((sum1),(sum2)) ", "test": "def check(candidate):\n\tassert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\n\tassert sum_of_alternates((1, 2, 3, 4, 5)) == (6, 9)\n\tassert sum_of_alternates((6, 7, 8, 9, 4, 5)) == (21, 18)", "entry_point": "sum_of_alternates"}
{"task_id": 314, "prompt": "def get_Min_Squares(n):\n    \"\"\"\n    Write a python function to find the minimum number of squares whose sum is equal to a given number.\n    >>> get_Min_Squares(6)\n    3\n    >>> get_Min_Squares(2)\n    2\n    >>> get_Min_Squares(4)\n    1\n    \"\"\"\n    ", "canonical_solution": "def get_Min_Squares(n):\r\n    if n <= 3:\r\n        return n;\r\n    res = n \r\n    for x in range(1,n + 1):\r\n        temp = x * x;\r\n        if temp > n:\r\n            break\r\n        else:\r\n            res = min(res,1 + get_Min_Squares(n  - temp)) \r\n    return res;", "test": "def check(candidate):\n\tassert get_Min_Squares(6) == 3\n\tassert get_Min_Squares(2) == 2\n\tassert get_Min_Squares(4) == 1", "entry_point": "get_Min_Squares"}
{"task_id": 315, "prompt": "def most_occurrences(test_list):\n    \"\"\"\n    Write a function to get the word with most number of occurrences in the given strings list.\n    >>> most_occurrences(['UTS is best for RTF', 'RTF love UTS', 'UTS is best'])\n    'UTS'\n    >>> most_occurrences(['Its been a great year', 'this year is so worse', 'this year is okay'])\n    'year'\n    >>> most_occurrences(['Families can be reunited', 'people can be reunited', 'Tasks can be achieved '])\n    'can'\n    \"\"\"\n    ", "canonical_solution": "from collections import defaultdict \r\n\r\ndef most_occurrences(test_list):\r\n  temp = defaultdict(int)\r\n  for sub in test_list:\r\n    for wrd in sub.split():\r\n      temp[wrd] += 1\r\n  res = max(temp, key=temp.get)\r\n  return (str(res)) ", "test": "def check(candidate):\n\tassert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\n\tassert most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"] ) == 'year'\n\tassert most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"] ) == 'can'", "entry_point": "most_occurrences"}
{"task_id": 316, "prompt": "def check_isosceles(x, y, z):\n    \"\"\"\n    Write a function to print check if the triangle is isosceles or not.\n    >>> check_isosceles(6, 8, 12)\n    False\n    >>> check_isosceles(6, 6, 12)\n    True\n    >>> check_isosceles(6, 16, 20)\n    False\n    \"\"\"\n    ", "canonical_solution": "def check_isosceles(x,y,z):\r\n  if x==y or y==z or z==x:\r\n\t   return True\r\n  else:\r\n     return False", "test": "def check(candidate):\n\tassert check_isosceles(6,8,12)==False \n\tassert check_isosceles(6,6,12)==True\n\tassert check_isosceles(6,16,20)==False", "entry_point": "check_isosceles"}
{"task_id": 317, "prompt": "def rotate_left(list1, m, n):\n    \"\"\"\n    Write a function to rotate a given list by specified number of items to the left direction.\n    >>> rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 4)\n    [4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n    >>> rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2, 2)\n    [3, 4, 5, 6, 7, 8, 9, 10, 1, 2]\n    >>> rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 2)\n    [6, 7, 8, 9, 10, 1, 2]\n    \"\"\"\n    ", "canonical_solution": "def rotate_left(list1,m,n):\r\n  result =  list1[m:]+list1[:n]\r\n  return result", "test": "def check(candidate):\n\tassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\n\tassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]\n\tassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]", "entry_point": "rotate_left"}
{"task_id": 318, "prompt": "def neg_count(list):\n    \"\"\"\n    Write a python function to count negative numbers in a list.\n    >>> neg_count([(- 1), (- 2), 3, (- 4), (- 5)])\n    4\n    >>> neg_count([1, 2, 3])\n    0\n    >>> neg_count([1, 2, (- 3), (- 10), 20])\n    2\n    \"\"\"\n    ", "canonical_solution": "def neg_count(list):\r\n  neg_count= 0\r\n  for num in list: \r\n    if num <= 0: \r\n      neg_count += 1\r\n  return neg_count ", "test": "def check(candidate):\n\tassert neg_count([-1,-2,3,-4,-5]) == 4\n\tassert neg_count([1,2,3]) == 0\n\tassert neg_count([1,2,-3,-10,20]) == 2", "entry_point": "neg_count"}
{"task_id": 319, "prompt": "def find_char(text):\n    \"\"\"\n    Write a function to find all three, four, five characters long words in the given string by using regex.\n    >>> find_char('For the four consumer complaints contact manager AKR reddy')\n    ['For', 'the', 'four', 'AKR', 'reddy']\n    >>> find_char('Certain service are subject to change MSR')\n    ['are', 'MSR']\n    >>> find_char('Third party legal desclaimers')\n    ['Third', 'party', 'legal']\n    \"\"\"\n    ", "canonical_solution": "import re\r\ndef find_char(text):\r\n  return (re.findall(r\"\\b\\w{3,5}\\b\", text))", "test": "def check(candidate):\n\tassert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\n\tassert find_char('Certain service are subject to change MSR') == ['are', 'MSR']\n\tassert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']", "entry_point": "find_char"}
{"task_id": 320, "prompt": "def count_unset_bits(n):\n    \"\"\"\n    Write a python function to count unset bits of a given number.\n    >>> count_unset_bits(2)\n    1\n    >>> count_unset_bits(4)\n    2\n    >>> count_unset_bits(6)\n    1\n    \"\"\"\n    ", "canonical_solution": "def count_unset_bits(n): \r\n    count = 0\r\n    x = 1\r\n    while(x < n + 1): \r\n        if ((x & n) == 0): \r\n            count += 1\r\n        x = x << 1\r\n    return count  ", "test": "def check(candidate):\n\tassert count_unset_bits(2) == 1\n\tassert count_unset_bits(4) == 2\n\tassert count_unset_bits(6) == 1", "entry_point": "count_unset_bits"}
{"task_id": 321, "prompt": "def char_frequency(str1):\n    \"\"\"\n    Write a function to count character frequency of a given string.\n    >>> char_frequency('python')\n    {'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n    >>> char_frequency('program')\n    {'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}\n    >>> char_frequency('language')\n    {'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}\n    \"\"\"\n    ", "canonical_solution": "def char_frequency(str1):\r\n    dict = {}\r\n    for n in str1:\r\n        keys = dict.keys()\r\n        if n in keys:\r\n            dict[n] += 1\r\n        else:\r\n            dict[n] = 1\r\n    return dict", "test": "def check(candidate):\n\tassert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\n\tassert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}\n\tassert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}", "entry_point": "char_frequency"}
{"task_id": 322, "prompt": "def Sort(sub_li):\n    \"\"\"\n    Write a python function to sort a list according to the second element in sublist.\n    >>> Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]])\n    [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n    >>> Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]])\n    [['256', 5], ['452', 10], ['135', 15], ['100', 20]]\n    >>> Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]])\n    [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]\n    \"\"\"\n    ", "canonical_solution": "def Sort(sub_li): \r\n    sub_li.sort(key = lambda x: x[1]) \r\n    return sub_li ", "test": "def check(candidate):\n\tassert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\n\tassert Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]]) == [['256', 5], ['452', 10], ['135', 15], ['100', 20]]\n\tassert Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]) == [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]", "entry_point": "Sort"}
{"task_id": 323, "prompt": "def check_Validity(a, b, c):\n    \"\"\"\n    Write a python function to check whether the triangle is valid or not if sides are given.\n    >>> check_Validity(1, 2, 3)\n    False\n    >>> check_Validity(2, 3, 5)\n    False\n    >>> check_Validity(7, 10, 5)\n    True\n    \"\"\"\n    ", "canonical_solution": "def check_Validity(a,b,c):  \r\n    if (a + b <= c) or (a + c <= b) or (b + c <= a) : \r\n        return False\r\n    else: \r\n        return True        ", "test": "def check(candidate):\n\tassert check_Validity(1,2,3) == False\n\tassert check_Validity(2,3,5) == False\n\tassert check_Validity(7,10,5) == True", "entry_point": "check_Validity"}
{"task_id": 324, "prompt": "def ap_sum(a, n, d):\n    \"\"\"\n    Write a function to find the sum of arithmetic progression.\n    >>> ap_sum(1, 5, 2)\n    25\n    >>> ap_sum(2, 6, 4)\n    72\n    >>> ap_sum(1, 4, 5)\n    34\n    \"\"\"\n    ", "canonical_solution": "def ap_sum(a,n,d):\r\n  total = (n * (2 * a + (n - 1) * d)) / 2\r\n  return total", "test": "def check(candidate):\n\tassert ap_sum(1,5,2)==25\n\tassert ap_sum(2,6,4)==72\n\tassert ap_sum(1,4,5)==34", "entry_point": "ap_sum"}
{"task_id": 325, "prompt": "def check_monthnum(monthname1):\n    \"\"\"\n    Write a function to check whether the given month name contains 28 days or not.\n    >>> check_monthnum('February')\n    True\n    >>> check_monthnum('January')\n    False\n    >>> check_monthnum('March')\n    False\n    \"\"\"\n    ", "canonical_solution": "def check_monthnum(monthname1):\r\n  if monthname1 == \"February\":\r\n    return True\r\n  else:\r\n    return False", "test": "def check(candidate):\n\tassert check_monthnum(\"February\")==True\n\tassert check_monthnum(\"January\")==False\n\tassert check_monthnum(\"March\")==False", "entry_point": "check_monthnum"}
{"task_id": 326, "prompt": "def text_match_word(text):\n    \"\"\"\n    Write a function that matches a word at the end of a string, with optional punctuation.\n    >>> text_match_word('python.')\n    'Found a match!'\n    >>> text_match_word('python.')\n    'Found a match!'\n    >>> text_match_word('  lang  .')\n    'Not matched!'\n    \"\"\"\n    ", "canonical_solution": "import re\r\ndef text_match_word(text):\r\n        patterns = '\\w+\\S*$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'", "test": "def check(candidate):\n\tassert text_match_word(\"python.\")==('Found a match!')\n\tassert text_match_word(\"python.\")==('Found a match!')\n\tassert text_match_word(\"  lang  .\")==('Not matched!')", "entry_point": "text_match_word"}
{"task_id": 327, "prompt": "def count_Substring_With_Equal_Ends(s):\n    \"\"\"\n    Write a python function to count the number of substrings with same first and last characters.\n    >>> count_Substring_With_Equal_Ends('aba')\n    4\n    >>> count_Substring_With_Equal_Ends('abcab')\n    7\n    >>> count_Substring_With_Equal_Ends('abc')\n    3\n    \"\"\"\n    ", "canonical_solution": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n):\r\n        for j in range(1,n-i+1): \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; ", "test": "def check(candidate):\n\tassert count_Substring_With_Equal_Ends('aba') == 4\n\tassert count_Substring_With_Equal_Ends('abcab') == 7\n\tassert count_Substring_With_Equal_Ends('abc') == 3", "entry_point": "count_Substring_With_Equal_Ends"}
{"task_id": 328, "prompt": "def find_Divisor(x, y):\n    \"\"\"\n    Write a python function to find the maximum occuring divisor in an interval.\n    >>> find_Divisor(2, 2)\n    2\n    >>> find_Divisor(2, 5)\n    2\n    >>> find_Divisor(5, 10)\n    2\n    \"\"\"\n    ", "canonical_solution": "def find_Divisor(x,y):  \r\n    if (x==y): \r\n        return y \r\n    return 2", "test": "def check(candidate):\n\tassert find_Divisor(2,2) == 2\n\tassert find_Divisor(2,5) == 2\n\tassert find_Divisor(5,10) == 2", "entry_point": "find_Divisor"}
{"task_id": 329, "prompt": "def sum_three_smallest_nums(lst):\n    \"\"\"\n    Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.\n    >>> sum_three_smallest_nums([10, 20, 30, 40, 50, 60, 7])\n    37\n    >>> sum_three_smallest_nums([1, 2, 3, 4, 5])\n    6\n    >>> sum_three_smallest_nums([0, 1, 2, 3, 4, 5])\n    6\n    \"\"\"\n    ", "canonical_solution": "def sum_three_smallest_nums(lst):\r\n\treturn sum(sorted([x for x in lst if x > 0])[:3])", "test": "def check(candidate):\n\tassert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\n\tassert sum_three_smallest_nums([1,2,3,4,5]) == 6\n\tassert sum_three_smallest_nums([0,1,2,3,4,5]) == 6", "entry_point": "sum_three_smallest_nums"}
{"task_id": 330, "prompt": "def set_to_tuple(s):\n    \"\"\"\n    Write a function to convert the given set into ordered tuples.\n    >>> set_to_tuple({1, 2, 3, 4, 5})\n    (1, 2, 3, 4, 5)\n    >>> set_to_tuple({6, 7, 8, 9, 10, 11})\n    (6, 7, 8, 9, 10, 11)\n    >>> set_to_tuple({12, 13, 14, 15, 16})\n    (12, 13, 14, 15, 16)\n    \"\"\"\n    ", "canonical_solution": "def set_to_tuple(s):\r\n  t = tuple(sorted(s))\r\n  return (t)", "test": "def check(candidate):\n\tassert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\n\tassert set_to_tuple({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11)\n\tassert set_to_tuple({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16)", "entry_point": "set_to_tuple"}
{"task_id": 331, "prompt": "def find_minimum_range(list):\n    \"\"\"\n    Write a function to find the smallest range that includes at-least one element from each of the given arrays.\n    >>> find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]])\n    (4, 6)\n    >>> find_minimum_range([[2, 3, 4, 8, 10, 15], [1, 5, 12], [7, 8, 15, 16], [3, 6]])\n    (4, 7)\n    >>> find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]])\n    (5, 7)\n    \"\"\"\n    ", "canonical_solution": "from heapq import heappop, heappush\r\nclass Node:\r\n    def __init__(self, value, list_num, index):\r\n        self.value = value\r\n        self.list_num = list_num\r\n        self.index = index\r\n    def __lt__(self, other):\r\n        return self.value < other.value\r\ndef find_minimum_range(list):\r\n    high = float('-inf')\r\n    p = (0, float('inf'))\r\n    pq = []\r\n    for i in range(len(list)):\r\n        heappush(pq, Node(list[i][0], i, 0))\r\n        high = max(high, list[i][0])\r\n    while True:\r\n        top = heappop(pq)\r\n        low = top.value\r\n        i = top.list_num\r\n        j = top.index\r\n        if high - low < p[1] - p[0]:\r\n            p = (low, high)\r\n        if j == len(list[i]) - 1:\r\n            return p\r\n        heappush(pq, Node(list[i][j + 1], i, j + 1))\r\n        high = max(high, list[i][j + 1])", "test": "def check(candidate):\n\tassert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\n\tassert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)\n\tassert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)", "entry_point": "find_minimum_range"}
{"task_id": 332, "prompt": "def dig_let(s):\n    \"\"\"\n    Write a function to calculate the number of digits and letters in a string.\n    >>> dig_let('python')\n    (6, 0)\n    >>> dig_let('program')\n    (7, 0)\n    >>> dig_let('python3.0')\n    (6, 2)\n    \"\"\"\n    ", "canonical_solution": "def dig_let(s):\r\n d=l=0\r\n for c in s:\r\n    if c.isdigit():\r\n        d=d+1\r\n    elif c.isalpha():\r\n        l=l+1\r\n    else:\r\n        pass\r\n return (l,d)", "test": "def check(candidate):\n\tassert dig_let(\"python\")==(6,0)\n\tassert dig_let(\"program\")==(7,0)\n\tassert dig_let(\"python3.0\")==(6,2)", "entry_point": "dig_let"}
{"task_id": 333, "prompt": "def count_Odd_Squares(n, m):\n    \"\"\"\n    Write a python function to find number of elements with odd factors in a given range.\n    >>> count_Odd_Squares(5, 100)\n    8\n    >>> count_Odd_Squares(8, 65)\n    6\n    >>> count_Odd_Squares(2, 5)\n    1\n    \"\"\"\n    ", "canonical_solution": "def count_Odd_Squares(n,m): \r\n    return int(m**0.5) - int((n-1)**0.5) ", "test": "def check(candidate):\n\tassert count_Odd_Squares(5,100) == 8\n\tassert count_Odd_Squares(8,65) == 6\n\tassert count_Odd_Squares(2,5) == 1", "entry_point": "count_Odd_Squares"}
{"task_id": 334, "prompt": "def diff_consecutivenums(nums):\n    \"\"\"\n    Write a function to find the difference between two consecutive numbers in a given list.\n    >>> diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])\n    [0, 2, 1, 0, 1, 1, 1]\n    >>> diff_consecutivenums([4, 5, 8, 9, 6, 10])\n    [1, 3, 1, (- 3), 4]\n    >>> diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])\n    [1, 1, 1, 1, 0, 0, 0, 1, 2]\n    \"\"\"\n    ", "canonical_solution": "def diff_consecutivenums(nums):\r\n    result = [b-a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result", "test": "def check(candidate):\n\tassert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\n\tassert diff_consecutivenums([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]\n\tassert diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]", "entry_point": "diff_consecutivenums"}
{"task_id": 335, "prompt": "def zigzag(n, k):\n    \"\"\"\n    Write a function to find entringer number e(n, k).\n    >>> zigzag(4, 3)\n    5\n    >>> zigzag(4, 2)\n    4\n    >>> zigzag(3, 1)\n    1\n    \"\"\"\n    ", "canonical_solution": "def zigzag(n, k): \r\n\tif (n == 0 and k == 0): \r\n\t\treturn 1\r\n\tif (k == 0): \r\n\t\treturn 0\r\n\treturn zigzag(n, k - 1) + zigzag(n - 1, n - k)", "test": "def check(candidate):\n\tassert zigzag(4, 3) == 5\n\tassert zigzag(4, 2) == 4\n\tassert zigzag(3, 1) == 1", "entry_point": "zigzag"}
{"task_id": 336, "prompt": "def count_Squares(m, n):\n    \"\"\"\n    Write a python function to count the number of squares in a rectangle.\n    >>> count_Squares(4, 3)\n    20\n    >>> count_Squares(1, 2)\n    2\n    >>> count_Squares(2, 2)\n    5\n    \"\"\"\n    ", "canonical_solution": "def count_Squares(m,n): \r\n    if (n < m): \r\n        temp = m \r\n        m = n \r\n        n = temp \r\n    return n * (n + 1) * (3 * m - n + 1) // 6", "test": "def check(candidate):\n\tassert count_Squares(4,3) == 20\n\tassert count_Squares(1,2) == 2\n\tassert count_Squares(2,2) == 5", "entry_point": "count_Squares"}
{"task_id": 337, "prompt": "def find_ways(M):\n    \"\"\"\n    Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\n    >>> find_ways(4)\n    2\n    >>> find_ways(6)\n    5\n    >>> find_ways(8)\n    14\n    \"\"\"\n    ", "canonical_solution": "def bin_coff(n, r): \r\n\tval = 1\r\n\tif (r > (n - r)): \r\n\t\tr = (n - r) \r\n\tfor i in range(0, r): \r\n\t\tval *= (n - i) \r\n\t\tval //= (i + 1) \r\n\treturn val \r\ndef find_ways(M): \r\n\tn = M // 2\r\n\ta = bin_coff(2 * n, n) \r\n\tb = a // (n + 1) \r\n\treturn (b) ", "test": "def check(candidate):\n\tassert find_ways(4) == 2\n\tassert find_ways(6) == 5\n\tassert find_ways(8) == 14", "entry_point": "find_ways"}
{"task_id": 338, "prompt": "def check(string):\n    \"\"\"\n    Write a python function to check whether the given string is a binary string or not.\n    >>> check('01010101010')\n    'Yes'\n    >>> check('name0')\n    'No'\n    >>> check('101')\n    'Yes'\n    \"\"\"\n    ", "canonical_solution": "def check(string) :\r\n    p = set(string) \r\n    s = {'0', '1'} \r\n    if s == p or p == {'0'} or p == {'1'}: \r\n        return (\"Yes\") \r\n    else : \r\n        return (\"No\") ", "test": "def check(candidate):\n\tassert check(\"01010101010\") == \"Yes\"\n\tassert check(\"name0\") == \"No\"\n\tassert check(\"101\") == \"Yes\"", "entry_point": "check"}
{"task_id": 339, "prompt": "def minimum_Length(s):\n    \"\"\"\n    Write a python function to minimize the length of the string by removing occurrence of only one character.\n    >>> minimum_Length('mnm')\n    1\n    >>> minimum_Length('abcda')\n    3\n    >>> minimum_Length('abcb')\n    2\n    \"\"\"\n    ", "canonical_solution": "def minimum_Length(s) : \r\n    maxOcc = 0\r\n    n = len(s) \r\n    arr = [0]*26\r\n    for i in range(n) : \r\n        arr[ord(s[i]) -ord('a')] += 1\r\n    for i in range(26) : \r\n        if arr[i] > maxOcc : \r\n            maxOcc = arr[i] \r\n    return n - maxOcc ", "test": "def check(candidate):\n\tassert minimum_Length(\"mnm\") == 1\n\tassert minimum_Length(\"abcda\") == 3\n\tassert minimum_Length(\"abcb\") == 2", "entry_point": "minimum_Length"}
{"task_id": 340, "prompt": "def first_Element(arr, n, k):\n    \"\"\"\n    Write a python function to find the first element occurring k times in a given array.\n    >>> first_Element([0, 1, 2, 3, 4, 5], 6, 1)\n    0\n    >>> first_Element([1, 2, 1, 3, 4], 5, 2)\n    1\n    >>> first_Element([2, 3, 4, 3, 5, 7, 1, 2, 3, 5], 10, 2)\n    2\n    \"\"\"\n    ", "canonical_solution": "def first_Element(arr,n,k): \r\n    count_map = {}; \r\n    for i in range(0, n): \r\n        if(arr[i] in count_map.keys()): \r\n            count_map[arr[i]] += 1\r\n        else: \r\n            count_map[arr[i]] = 1\r\n        i += 1\r\n    for i in range(0, n):  \r\n        if (count_map[arr[i]] == k): \r\n            return arr[i] \r\n        i += 1 \r\n    return -1", "test": "def check(candidate):\n\tassert first_Element([0,1,2,3,4,5],6,1) == 0\n\tassert first_Element([1,2,1,3,4],5,2) == 1\n\tassert first_Element([2,3,4,3,5,7,1,2,3,5],10,2) == 2", "entry_point": "first_Element"}
{"task_id": 341, "prompt": "def unique_Characters(str):\n    \"\"\"\n    Write a python function to check whether all the characters in a given string are unique.\n    >>> unique_Characters('aba')\n    False\n    >>> unique_Characters('abc')\n    True\n    >>> unique_Characters('abab')\n    False\n    \"\"\"\n    ", "canonical_solution": "def unique_Characters(str):\r\n    for i in range(len(str)):\r\n        for j in range(i + 1,len(str)): \r\n            if (str[i] == str[j]):\r\n                return False;\r\n    return True;", "test": "def check(candidate):\n\tassert unique_Characters('aba') == False\n\tassert unique_Characters('abc') == True\n\tassert unique_Characters('abab') == False", "entry_point": "unique_Characters"}
{"task_id": 342, "prompt": "def remove_column(list1, n):\n    \"\"\"\n    Write a function to remove a specified column from a given nested list.\n    >>> remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]], 0)\n    [[2, 3], [4, 5], [1, 1]]\n    >>> remove_column([[1, 2, 3], [(- 2), 4, (- 5)], [1, (- 1), 1]], 2)\n    [[1, 2], [(- 2), 4], [1, (- 1)]]\n    >>> remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]], 0)\n    [[3], [7], [3], [15, 17], [7], [11]]\n    \"\"\"\n    ", "canonical_solution": "def remove_column(list1, n):\r\n   for i in list1: \r\n    del i[n] \r\n   return list1", "test": "def check(candidate):\n\tassert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\n\tassert remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[[1, 2], [-2, 4], [1, -1]]\n\tassert remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[[3], [7], [3], [15, 17], [7], [11]]", "entry_point": "remove_column"}
{"task_id": 343, "prompt": "def tn_ap(a, n, d):\n    \"\"\"\n    Write a function to find t-nth term of arithemetic progression.\n    >>> tn_ap(1, 5, 2)\n    9\n    >>> tn_ap(2, 6, 4)\n    22\n    >>> tn_ap(1, 4, 5)\n    16\n    \"\"\"\n    ", "canonical_solution": "def tn_ap(a,n,d):\r\n  tn = a + (n - 1) * d\r\n  return tn", "test": "def check(candidate):\n\tassert tn_ap(1,5,2)==9\n\tassert tn_ap(2,6,4)==22\n\tassert tn_ap(1,4,5)==16", "entry_point": "tn_ap"}
{"task_id": 344, "prompt": "def count_Rectangles(radius):\n    \"\"\"\n    Write a python function to count the number of rectangles in a circle of radius r.\n    >>> count_Rectangles(2)\n    8\n    >>> count_Rectangles(1)\n    1\n    >>> count_Rectangles(0)\n    0\n    \"\"\"\n    ", "canonical_solution": "def count_Rectangles(radius):  \r\n    rectangles = 0 \r\n    diameter = 2 * radius \r\n    diameterSquare = diameter * diameter \r\n    for a in range(1, 2 * radius):  \r\n        for b in range(1, 2 * radius): \r\n            diagnalLengthSquare = (a * a +  b * b)  \r\n            if (diagnalLengthSquare <= diameterSquare) : \r\n                rectangles += 1\r\n    return rectangles ", "test": "def check(candidate):\n\tassert count_Rectangles(2) == 8\n\tassert count_Rectangles(1) == 1\n\tassert count_Rectangles(0) == 0", "entry_point": "count_Rectangles"}
{"task_id": 345, "prompt": "def find_angle(a, b):\n    \"\"\"\n    Write a function to find the third angle of a triangle using two angles.\n    >>> find_angle(47, 89)\n    44\n    >>> find_angle(45, 95)\n    40\n    >>> find_angle(50, 40)\n    90\n    \"\"\"\n    ", "canonical_solution": "def find_angle(a,b):\r\n c = 180 - (a + b)\r\n return c\r\n", "test": "def check(candidate):\n\tassert find_angle(47,89)==44\n\tassert find_angle(45,95)==40\n\tassert find_angle(50,40)==90", "entry_point": "find_angle"}
{"task_id": 346, "prompt": "def find_max(test_list):\n    \"\"\"\n    Write a function to find the maximum element of all the given tuple records.\n    >>> find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)])\n    10\n    >>> find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)])\n    11\n    >>> find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)])\n    12\n    \"\"\"\n    ", "canonical_solution": "def find_max(test_list):\r\n  res = max(int(j) for i in test_list for j in i)\r\n  return (res) ", "test": "def check(candidate):\n\tassert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\n\tassert find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11\n\tassert find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12", "entry_point": "find_max"}
{"task_id": 347, "prompt": "def moddiv_list(nums1, nums2):\n    \"\"\"\n    Write a function to find modulo division of two lists using map and lambda function.\n    >>> moddiv_list([4, 5, 6], [1, 2, 3])\n    [0, 1, 0]\n    >>> moddiv_list([3, 2], [1, 4])\n    [0, 2]\n    >>> moddiv_list([90, 120], [50, 70])\n    [40, 50]\n    \"\"\"\n    ", "canonical_solution": "def moddiv_list(nums1,nums2):\r\n  result = map(lambda x, y: x % y, nums1, nums2)\r\n  return list(result)", "test": "def check(candidate):\n\tassert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\n\tassert moddiv_list([3,2],[1,4])==[0, 2]\n\tassert moddiv_list([90,120],[50,70])==[40, 50]", "entry_point": "moddiv_list"}
{"task_id": 348, "prompt": "def Check_Solution(a, b, c):\n    \"\"\"\n    Write a python function to check whether one root of the quadratic equation is twice of the other or not.\n    >>> Check_Solution(1, 3, 2)\n    'Yes'\n    >>> Check_Solution(1, 2, 3)\n    'No'\n    >>> Check_Solution(1, (- 5), 6)\n    'No'\n    \"\"\"\n    ", "canonical_solution": "def Check_Solution(a,b,c): \r\n    if (2*b*b == 9*a*c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); ", "test": "def check(candidate):\n\tassert Check_Solution(1,3,2) == \"Yes\"\n\tassert Check_Solution(1,2,3) == \"No\"\n\tassert Check_Solution(1,-5,6) == \"No\"", "entry_point": "Check_Solution"}
{"task_id": 349, "prompt": "def get_carol(n):\n    \"\"\"\n    Write a function to find the n\u2019th carol number.\n    >>> get_carol(2)\n    7\n    >>> get_carol(4)\n    223\n    >>> get_carol(5)\n    959\n    \"\"\"\n    ", "canonical_solution": "def get_carol(n): \r\n\tresult = (2**n) - 1\r\n\treturn result * result - 2", "test": "def check(candidate):\n\tassert get_carol(2) == 7\n\tassert get_carol(4) == 223\n\tassert get_carol(5) == 959", "entry_point": "get_carol"}
{"task_id": 350, "prompt": "def remove_empty(list1):\n    \"\"\"\n    Write a function to remove empty lists from a given list of lists.\n    >>> remove_empty([[], [], [], 'Red', 'Green', [1, 2], 'Blue', [], []])\n    ['Red', 'Green', [1, 2], 'Blue']\n    >>> remove_empty([[], [], [], [], [], 'Green', [1, 2], 'Blue', [], []])\n    ['Green', [1, 2], 'Blue']\n    >>> remove_empty([[], [], [], 'Python', [], [], 'programming', 'language', [], [], [], [], []])\n    ['Python', 'programming', 'language']\n    \"\"\"\n    ", "canonical_solution": "def remove_empty(list1):\r\n  remove_empty = [x for x in list1 if x]\r\n  return remove_empty", "test": "def check(candidate):\n\tassert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\n\tassert remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']\n\tassert remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']", "entry_point": "remove_empty"}
{"task_id": 351, "prompt": "def max_occurrences(nums):\n    \"\"\"\n    Write a python function to find the item with maximum occurrences in a given list.\n    >>> max_occurrences([1, 2, 3, 1, 2, 3, 12, 4, 2])\n    2\n    >>> max_occurrences([1, 2, 6, 7, 0, 1, 0, 1, 0])\n    1\n    >>> max_occurrences([1, 2, 3, 1, 2, 4, 1])\n    1\n    \"\"\"\n    ", "canonical_solution": "def max_occurrences(nums):\r\n    max_val = 0\r\n    result = nums[0] \r\n    for i in nums:\r\n        occu = nums.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result", "test": "def check(candidate):\n\tassert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\n\tassert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0\n\tassert max_occurrences([1,2,3,1,2,4,1]) == 1", "entry_point": "max_occurrences"}
{"task_id": 352, "prompt": "def add_K_element(test_list, K):\n    \"\"\"\n    Write a function to add the k elements to each element in the tuple.\n    >>> add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4)\n    [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n    >>> add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8)\n    [(9, 10, 11), (12, 13, 14), (15, 16, 17)]\n    >>> add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9)\n    [(20, 21, 22), (23, 24, 25), (26, 27, 28)]\n    \"\"\"\n    ", "canonical_solution": "def add_K_element(test_list, K):\r\n  res = [tuple(j + K for j in sub ) for sub in test_list]\r\n  return (res) ", "test": "def check(candidate):\n\tassert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\n\tassert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]\n\tassert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]", "entry_point": "add_K_element"}
{"task_id": 353, "prompt": "def min_flip_to_make_string_alternate(str):\n    \"\"\"\n    Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.\n    >>> min_flip_to_make_string_alternate('0001010111')\n    2\n    >>> min_flip_to_make_string_alternate('001')\n    1\n    >>> min_flip_to_make_string_alternate('010111011')\n    2\n    \"\"\"\n    ", "canonical_solution": "def make_flip(ch): \r\n\treturn '1' if (ch == '0') else '0'\r\ndef get_flip_with_starting_charcter(str, expected): \r\n\tflip_count = 0\r\n\tfor i in range(len( str)): \r\n\t\tif (str[i] != expected): \r\n\t\t\tflip_count += 1\r\n\t\texpected = make_flip(expected) \r\n\treturn flip_count \r\ndef min_flip_to_make_string_alternate(str): \r\n\treturn min(get_flip_with_starting_charcter(str, '0'),get_flip_with_starting_charcter(str, '1')) ", "test": "def check(candidate):\n\tassert min_flip_to_make_string_alternate(\"0001010111\") == 2\n\tassert min_flip_to_make_string_alternate(\"001\") == 1\n\tassert min_flip_to_make_string_alternate(\"010111011\") == 2 ", "entry_point": "min_flip_to_make_string_alternate"}
{"task_id": 354, "prompt": "def count_Digit(n):\n    \"\"\"\n    Write a python function to count the number of digits of a given number.\n    >>> count_Digit(12345)\n    5\n    >>> count_Digit(11223305)\n    8\n    >>> count_Digit(4123459)\n    7\n    \"\"\"\n    ", "canonical_solution": "def count_Digit(n):\r\n    count = 0\r\n    while n != 0:\r\n        n //= 10\r\n        count += 1\r\n    return count", "test": "def check(candidate):\n\tassert count_Digit(12345) == 5\n\tassert count_Digit(11223305) == 8\n\tassert count_Digit(4123459) == 7", "entry_point": "count_Digit"}
{"task_id": 355, "prompt": "def adjacent_num_product(list_nums):\n    \"\"\"\n    Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.\n    >>> adjacent_num_product([1, 2, 3, 4, 5, 6])\n    30\n    >>> adjacent_num_product([1, 2, 3, 4, 5])\n    20\n    >>> adjacent_num_product([2, 3])\n    6\n    \"\"\"\n    ", "canonical_solution": "def adjacent_num_product(list_nums):\r\n    return max(a*b for a, b in zip(list_nums, list_nums[1:]))", "test": "def check(candidate):\n\tassert adjacent_num_product([1,2,3,4,5,6]) == 30\n\tassert adjacent_num_product([1,2,3,4,5]) == 20\n\tassert adjacent_num_product([2,3]) == 6", "entry_point": "adjacent_num_product"}
{"task_id": 356, "prompt": "def is_tree_balanced(root):\n    \"\"\"\n    Write a function to check if a binary tree is balanced or not.\n    >>> is_tree_balanced(root)\n    False\n    >>> is_tree_balanced(root1)\n    True\n    >>> is_tree_balanced(root2)\n    False\n    \"\"\"\n    ", "canonical_solution": "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef get_height(root): \r\n\tif root is None: \r\n\t\treturn 0\r\n\treturn max(get_height(root.left), get_height(root.right)) + 1\r\ndef is_tree_balanced(root): \r\n\tif root is None: \r\n\t\treturn True\r\n\tlh = get_height(root.left) \r\n\trh = get_height(root.right) \r\n\tif (abs(lh - rh) <= 1) and is_tree_balanced( \r\n\troot.left) is True and is_tree_balanced( root.right) is True: \r\n\t\treturn True\r\n\treturn False", "test": "def check(candidate):\n\tassert is_tree_balanced(root) == False\n\tassert is_tree_balanced(root1) == True\n\tassert is_tree_balanced(root2) == False ", "entry_point": "is_tree_balanced"}
{"task_id": 357, "prompt": "def repeat_tuples(test_tup, N):\n    \"\"\"\n    Write a function to repeat the given tuple n times.\n    >>> repeat_tuples((1, 3), 4)\n    ((1, 3), (1, 3), (1, 3), (1, 3))\n    >>> repeat_tuples((1, 2), 3)\n    ((1, 2), (1, 2), (1, 2))\n    >>> repeat_tuples((3, 4), 5)\n    ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))\n    \"\"\"\n    ", "canonical_solution": "def repeat_tuples(test_tup, N):\r\n  res = ((test_tup, ) * N)\r\n  return (res) ", "test": "def check(candidate):\n\tassert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\n\tassert repeat_tuples((1, 2), 3) == ((1, 2), (1, 2), (1, 2))\n\tassert repeat_tuples((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))", "entry_point": "repeat_tuples"}
{"task_id": 358, "prompt": "def lateralsurface_cuboid(l, w, h):\n    \"\"\"\n    Write a function to find the lateral surface area of cuboid\n    >>> lateralsurface_cuboid(8, 5, 6)\n    156\n    >>> lateralsurface_cuboid(7, 9, 10)\n    320\n    >>> lateralsurface_cuboid(10, 20, 30)\n    1800\n    \"\"\"\n    ", "canonical_solution": "def lateralsurface_cuboid(l,w,h):\r\n  LSA = 2*h*(l+w)\r\n  return LSA", "test": "def check(candidate):\n\tassert lateralsurface_cuboid(8,5,6)==156\n\tassert lateralsurface_cuboid(7,9,10)==320\n\tassert lateralsurface_cuboid(10,20,30)==1800", "entry_point": "lateralsurface_cuboid"}
{"task_id": 359, "prompt": "def float_sort(price):\n    \"\"\"\n    Write a function to sort a tuple by its float element.\n    >>> float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])\n    [('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')]\n    >>> float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])\n    [('item3', '20'), ('item1', '15'), ('item2', '10')]\n    >>> float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])\n    [('item3', '14'), ('item2', '10'), ('item1', '5')]\n    \"\"\"\n    ", "canonical_solution": "def float_sort(price):\r\n  float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)\r\n  return float_sort", "test": "def check(candidate):\n\tassert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \n\tassert float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])==[('item3', '20'), ('item1', '15'), ('item2', '10')] \n\tassert float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])==[('item3', '14'), ('item2', '10'), ('item1', '5')] ", "entry_point": "float_sort"}
{"task_id": 360, "prompt": "def smallest_missing(A, left_element, right_element):\n    \"\"\"\n    Write a function to find the smallest missing element in a sorted array.\n    >>> smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6)\n    7\n    >>> smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6)\n    3\n    >>> smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7)\n    0\n    \"\"\"\n    ", "canonical_solution": "def smallest_missing(A, left_element, right_element):\r\n    if left_element > right_element:\r\n        return left_element\r\n    mid = left_element + (right_element - left_element) // 2\r\n    if A[mid] == mid:\r\n        return smallest_missing(A, mid + 1, right_element)\r\n    else:\r\n        return smallest_missing(A, left_element, mid - 1)", "test": "def check(candidate):\n\tassert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\n\tassert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3\n\tassert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0", "entry_point": "smallest_missing"}
{"task_id": 361, "prompt": "def heap_assending(nums):\n    \"\"\"\n    Write a function to sort a given list of elements in ascending order using heap queue algorithm.\n    >>> heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])\n    [1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n    >>> heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])\n    [14, 22, 25, 25, 35, 58, 65, 75, 85]\n    >>> heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])\n    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    \"\"\"\n    ", "canonical_solution": "import heapq as hq\r\ndef heap_assending(nums):\r\n  hq.heapify(nums)\r\n  s_result = [hq.heappop(nums) for i in range(len(nums))]\r\n  return s_result", "test": "def check(candidate):\n\tassert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\n\tassert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\n\tassert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]", "entry_point": "heap_assending"}
{"task_id": 362, "prompt": "def volume_cuboid(l, w, h):\n    \"\"\"\n    Write a function to find the volume of a cuboid.\n    >>> volume_cuboid(1, 2, 3)\n    6\n    >>> volume_cuboid(5, 7, 9)\n    315\n    >>> volume_cuboid(10, 15, 21)\n    3150\n    \"\"\"\n    ", "canonical_solution": "def volume_cuboid(l,w,h):\r\n  volume=l*w*h\r\n  return volume", "test": "def check(candidate):\n\tassert volume_cuboid(1,2,3)==6\n\tassert volume_cuboid(5,7,9)==315\n\tassert volume_cuboid(10,15,21)==3150", "entry_point": "volume_cuboid"}
{"task_id": 363, "prompt": "def permute_string(str):\n    \"\"\"\n    Write a function to print all permutations of a given string including duplicates.\n    >>> permute_string('ab')\n    ['ab', 'ba']\n    >>> permute_string('abc')\n    ['abc', 'bac', 'bca', 'acb', 'cab', 'cba']\n    >>> permute_string('abcd')\n    ['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']\n    \"\"\"\n    ", "canonical_solution": "def permute_string(str):\r\n    if len(str) == 0:\r\n        return ['']\r\n    prev_list = permute_string(str[1:len(str)])\r\n    next_list = []\r\n    for i in range(0,len(prev_list)):\r\n        for j in range(0,len(str)):\r\n            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]\r\n            if new_str not in next_list:\r\n                next_list.append(new_str)\r\n    return next_list", "test": "def check(candidate):\n\tassert permute_string('ab')==['ab', 'ba']\n\tassert permute_string('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']\n\tassert permute_string('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']", "entry_point": "permute_string"}
{"task_id": 364, "prompt": "def round_num(n, m):\n    \"\"\"\n    Write a function to round the given number to the nearest multiple of a specific number.\n    >>> round_num(4722, 10)\n    4720\n    >>> round_num(1111, 5)\n    1110\n    >>> round_num(219, 2)\n    218\n    \"\"\"\n    ", "canonical_solution": "def round_num(n,m):\r\n    a = (n //m) * m\r\n    b = a + m\r\n    return (b if n - a > b - n else a)", "test": "def check(candidate):\n\tassert round_num(4722,10)==4720\n\tassert round_num(1111,5)==1110\n\tassert round_num(219,2)==218", "entry_point": "round_num"}
{"task_id": 365, "prompt": "def remove_replica(test_tup):\n    \"\"\"\n    Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\n    >>> remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7))\n    (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n    >>> remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9))\n    (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')\n    >>> remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7))\n    (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')\n    \"\"\"\n    ", "canonical_solution": "def remove_replica(test_tup):\r\n  temp = set()\r\n  res = tuple(ele if ele not in temp and not temp.add(ele) \r\n\t\t\t\telse 'MSP' for ele in test_tup)\r\n  return (res)", "test": "def check(candidate):\n\tassert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\n\tassert remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) == (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')\n\tassert remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)) == (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')", "entry_point": "remove_replica"}
{"task_id": 366, "prompt": "def remove_Char(s, c):\n    \"\"\"\n    Write a python function to remove all occurrences of a character in a given string.\n    >>> remove_Char('aba', 'a')\n    'b'\n    >>> remove_Char('toggle', 'g')\n    'tole'\n    >>> remove_Char('aabbc', 'b')\n    'aac'\n    \"\"\"\n    ", "canonical_solution": "def remove_Char(s,c) :  \r\n    counts = s.count(c) \r\n    s = list(s) \r\n    while counts :  \r\n        s.remove(c) \r\n        counts -= 1 \r\n    s = '' . join(s)   \r\n    return (s) ", "test": "def check(candidate):\n\tassert remove_Char(\"aba\",'a') == \"b\"\n\tassert remove_Char(\"toggle\",'g') == \"tole\"\n\tassert remove_Char(\"aabbc\",'b') == \"aac\"", "entry_point": "remove_Char"}
{"task_id": 367, "prompt": "def move_first(test_list):\n    \"\"\"\n    Write a python function to shift last element to first position in the given list.\n    >>> move_first([1, 2, 3, 4])\n    [4, 1, 2, 3]\n    >>> move_first([0, 1, 2, 3])\n    [3, 0, 1, 2]\n    >>> move_first([9, 8, 7, 1])\n    [1, 9, 8, 7]\n    \"\"\"\n    ", "canonical_solution": "def move_first(test_list):\r\n  test_list = test_list[-1:] + test_list[:-1]  \r\n  return test_list", "test": "def check(candidate):\n\tassert move_first([1,2,3,4]) == [4,1,2,3]\n\tassert move_first([0,1,2,3]) == [3,0,1,2]\n\tassert move_first([9,8,7,1]) == [1,9,8,7]", "entry_point": "move_first"}
{"task_id": 368, "prompt": "def surfacearea_cuboid(l, w, h):\n    \"\"\"\n    Write a function to find the surface area of a cuboid.\n    >>> surfacearea_cuboid(1, 2, 3)\n    22\n    >>> surfacearea_cuboid(5, 7, 9)\n    286\n    >>> surfacearea_cuboid(10, 15, 21)\n    1350\n    \"\"\"\n    ", "canonical_solution": "def surfacearea_cuboid(l,w,h):\r\n  SA = 2*(l*w + l * h + w * h)\r\n  return SA", "test": "def check(candidate):\n\tassert surfacearea_cuboid(1,2,3)==22\n\tassert surfacearea_cuboid(5,7,9)==286\n\tassert surfacearea_cuboid(10,15,21)==1350", "entry_point": "surfacearea_cuboid"}
{"task_id": 369, "prompt": "def multi_list(rownum, colnum):\n    \"\"\"\n    Write a function to generate a two-dimensional array.\n    >>> multi_list(3, 4)\n    [[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]]\n    >>> multi_list(5, 7)\n    [[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]\n    >>> multi_list(10, 15)\n    [[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]\n    \"\"\"\n    ", "canonical_solution": "def multi_list(rownum,colnum):\r\n  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]\r\n  for row in range(rownum):\r\n    for col in range(colnum):\r\n        multi_list[row][col]= row*col\r\n  return multi_list\r\n", "test": "def check(candidate):\n\tassert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \n\tassert multi_list(5,7)==[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]\n\tassert multi_list(10,15)==[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]", "entry_point": "multi_list"}
{"task_id": 370, "prompt": "def index_on_inner_list(list_data, index_no):\n    \"\"\"\n    Write a function to sort a list of lists by a given index of the inner list.\n    >>> index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0)\n    [('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n    >>> index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 1)\n    [('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]\n    >>> index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 2)\n    [('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]\n    \"\"\"\n    ", "canonical_solution": "from operator import itemgetter\r\ndef index_on_inner_list(list_data, index_no):\r\n    result = sorted(list_data, key=itemgetter(index_no))\r\n    return result", "test": "def check(candidate):\n\tassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\n\tassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]\n\tassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]", "entry_point": "index_on_inner_list"}
{"task_id": 371, "prompt": "def find_rotation_count(A):\n    \"\"\"\n    Write a function to find the number of rotations in a circularly sorted array.\n    >>> find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7])\n    3\n    >>> find_rotation_count([8, 9, 10, 2, 5, 6])\n    3\n    >>> find_rotation_count([2, 5, 6, 8, 9, 10])\n    0\n    \"\"\"\n    ", "canonical_solution": "def find_rotation_count(A):\r\n    (left, right) = (0, len(A) - 1)\r\n    while left <= right:\r\n        if A[left] <= A[right]:\r\n            return left\r\n        mid = (left + right) // 2\r\n        next = (mid + 1) % len(A)\r\n        prev = (mid - 1 + len(A)) % len(A)\r\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\r\n            return mid\r\n        elif A[mid] <= A[right]:\r\n            right = mid - 1\r\n        elif A[mid] >= A[left]:\r\n            left = mid + 1\r\n    return -1", "test": "def check(candidate):\n\tassert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\n\tassert find_rotation_count([8, 9, 10,2, 5, 6]) == 3\n\tassert find_rotation_count([2, 5, 6, 8, 9, 10]) == 0", "entry_point": "find_rotation_count"}
{"task_id": 372, "prompt": "def even_bit_toggle_number(n):\n    \"\"\"\n    Write a python function to toggle all odd bits of a given number.\n    >>> even_bit_toggle_number(10)\n    15\n    >>> even_bit_toggle_number(20)\n    1\n    >>> even_bit_toggle_number(30)\n    11\n    \"\"\"\n    ", "canonical_solution": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n    \r\n    while(temp > 0 ) : \r\n        if (count % 2 == 0) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res ", "test": "def check(candidate):\n\tassert even_bit_toggle_number(10) == 15\n\tassert even_bit_toggle_number(20) == 1\n\tassert even_bit_toggle_number(30) == 11", "entry_point": "even_bit_toggle_number"}
{"task_id": 373, "prompt": "def frequency_Of_Smallest(n, arr):\n    \"\"\"\n    Write a python function to find the frequency of the smallest value in a given array.\n    >>> frequency_Of_Smallest(5, [1, 2, 3, 4, 3])\n    1\n    >>> frequency_Of_Smallest(7, [3, 1, 2, 5, 6, 2, 3])\n    1\n    >>> frequency_Of_Smallest(7, [3, 3, 6, 3, 7, 4, 9])\n    3\n    \"\"\"\n    ", "canonical_solution": "def frequency_Of_Smallest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] < mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq ", "test": "def check(candidate):\n\tassert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\n\tassert frequency_Of_Smallest(7,[3,1,2,5,6,2,3]) == 1\n\tassert frequency_Of_Smallest(7,[3,3,6,3,7,4,9]) == 3", "entry_point": "frequency_Of_Smallest"}
{"task_id": 374, "prompt": "def get_perrin(n):\n    \"\"\"\n    Write a function to find the n'th perrin number using recursion.\n    >>> get_perrin(9)\n    12\n    >>> get_perrin(4)\n    2\n    >>> get_perrin(6)\n    5\n    \"\"\"\n    ", "canonical_solution": "def get_perrin(n):\r\n  if (n == 0):\r\n    return 3\r\n  if (n == 1):\r\n    return 0\r\n  if (n == 2):\r\n    return 2 \r\n  return get_perrin(n - 2) + get_perrin(n - 3)", "test": "def check(candidate):\n\tassert get_perrin(9) == 12\n\tassert get_perrin(4) == 2\n\tassert get_perrin(6) == 5", "entry_point": "get_perrin"}
{"task_id": 375, "prompt": "def swap_count(s):\n    \"\"\"\n    Write a function to find out the minimum no of swaps required for bracket balancing in the given string.\n    >>> swap_count('[]][][')\n    2\n    >>> swap_count('[[][]]')\n    0\n    >>> swap_count('[[][]]][')\n    1\n    \"\"\"\n    ", "canonical_solution": "def swap_count(s):\r\n\tchars = s\r\n\tcount_left = 0\r\n\tcount_right = 0\r\n\tswap = 0\r\n\timbalance = 0; \r\n\tfor i in range(len(chars)):\r\n\t\tif chars[i] == '[':\r\n\t\t\tcount_left += 1\r\n\t\t\tif imbalance > 0:\r\n\t\t\t\tswap += imbalance\r\n\t\t\t\timbalance -= 1\r\n\t\telif chars[i] == ']':\r\n\t\t\tcount_right += 1\r\n\t\t\timbalance = (count_right - count_left) \r\n\treturn swap", "test": "def check(candidate):\n\tassert swap_count(\"[]][][\") == 2\n\tassert swap_count(\"[[][]]\") == 0\n\tassert swap_count(\"[[][]]][\") == 1", "entry_point": "swap_count"}
{"task_id": 376, "prompt": "def even_or_odd(N):\n    \"\"\"\n    Write a python function to check whether the hexadecimal number is even or odd.\n    >>> even_or_odd('AB3454D')\n    'Odd'\n    >>> even_or_odd('ABC')\n    'Even'\n    >>> even_or_odd('AAD')\n    'Odd'\n    \"\"\"\n    ", "canonical_solution": "def even_or_odd(N): \r\n    l = len(N) \r\n    if (N[l-1] =='0'or N[l-1] =='2'or \r\n        N[l-1] =='4'or N[l-1] =='6'or \r\n        N[l-1] =='8'or N[l-1] =='A'or \r\n        N[l-1] =='C'or N[l-1] =='E'): \r\n        return (\"Even\") \r\n    else: \r\n        return (\"Odd\") ", "test": "def check(candidate):\n\tassert even_or_odd(\"AB3454D\") ==\"Odd\"\n\tassert even_or_odd(\"ABC\") == \"Even\"\n\tassert even_or_odd(\"AAD\") == \"Odd\"", "entry_point": "even_or_odd"}
{"task_id": 377, "prompt": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    >>> highest_Power_of_2(10)\n    8\n    >>> highest_Power_of_2(19)\n    16\n    >>> highest_Power_of_2(32)\n    32\n    \"\"\"\n    ", "canonical_solution": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1): \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break; \r\n    return res; ", "test": "def check(candidate):\n\tassert highest_Power_of_2(10) == 8\n\tassert highest_Power_of_2(19) == 16\n\tassert highest_Power_of_2(32) == 32", "entry_point": "highest_Power_of_2"}
{"task_id": 378, "prompt": "def find_lucas(n):\n    \"\"\"\n    Write a function to find the n'th lucas number.\n    >>> find_lucas(9)\n    76\n    >>> find_lucas(4)\n    7\n    >>> find_lucas(3)\n    4\n    \"\"\"\n    ", "canonical_solution": "def find_lucas(n): \r\n\tif (n == 0): \r\n\t\treturn 2\r\n\tif (n == 1): \r\n\t\treturn 1\r\n\treturn find_lucas(n - 1) + find_lucas(n - 2) ", "test": "def check(candidate):\n\tassert find_lucas(9) == 76\n\tassert find_lucas(4) == 7\n\tassert find_lucas(3) == 4", "entry_point": "find_lucas"}
{"task_id": 379, "prompt": "def add_string(list, string):\n    \"\"\"\n    Write a function to insert a given string at the beginning of all items in a list.\n    >>> add_string([1, 2, 3, 4], 'temp{0}')\n    ['temp1', 'temp2', 'temp3', 'temp4']\n    >>> add_string(['a', 'b', 'c', 'd'], 'python{0}')\n    ['pythona', 'pythonb', 'pythonc', 'pythond']\n    >>> add_string([5, 6, 7, 8], 'string{0}')\n    ['string5', 'string6', 'string7', 'string8']\n    \"\"\"\n    ", "canonical_solution": "def add_string(list,string):\r\n add_string=[string.format(i) for i in  list]\r\n return add_string", "test": "def check(candidate):\n\tassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\n\tassert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']\n\tassert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']", "entry_point": "add_string"}
{"task_id": 380, "prompt": "def convert_list_dictionary(l1, l2, l3):\n    \"\"\"\n    Write a function to convert more than one list to nested dictionary.\n    >>> convert_list_dictionary(['S001', 'S002', 'S003', 'S004'], ['Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'], [85, 98, 89, 92])\n    [{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n    >>> convert_list_dictionary(['abc', 'def', 'ghi', 'jkl'], ['python', 'program', 'language', 'programs'], [100, 200, 300, 400])\n    [{'abc': {'python': 100}}, {'def': {'program': 200}}, {'ghi': {'language': 300}}, {'jkl': {'programs': 400}}]\n    >>> convert_list_dictionary(['A1', 'A2', 'A3', 'A4'], ['java', 'C', 'C++', 'DBMS'], [10, 20, 30, 40])\n    [{'A1': {'java': 10}}, {'A2': {'C': 20}}, {'A3': {'C++': 30}}, {'A4': {'DBMS': 40}}]\n    \"\"\"\n    ", "canonical_solution": "def convert_list_dictionary(l1, l2, l3):\r\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\r\n     return result", "test": "def check(candidate):\n\tassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n\tassert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]\n\tassert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]", "entry_point": "convert_list_dictionary"}
{"task_id": 381, "prompt": "def get_max_sum(n):\n    \"\"\"\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    >>> get_max_sum(60)\n    106\n    >>> get_max_sum(10)\n    12\n    >>> get_max_sum(2)\n    2\n    \"\"\"\n    ", "canonical_solution": "def get_max_sum (n):\r\n\tres = list()\r\n\tres.append(0)\r\n\tres.append(1)\r\n\ti = 2\r\n\twhile i<n + 1:\r\n\t\tres.append(max(i, (res[int(i / 2)] \r\n\t\t\t\t\t\t+ res[int(i / 3)] +\r\n\t\t\t\t\t\t\tres[int(i / 4)]\r\n\t\t\t\t\t\t+ res[int(i / 5)])))\r\n\t\ti = i + 1\r\n\treturn res[n]", "test": "def check(candidate):\n\tassert get_max_sum(60) == 106\n\tassert get_max_sum(10) == 12\n\tassert get_max_sum(2) == 2", "entry_point": "get_max_sum"}
{"task_id": 382, "prompt": "def max_length_list(input_list):\n    \"\"\"\n    Write a function to find the list with maximum length using lambda function.\n    >>> max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n    (3, [13, 15, 17])\n    >>> max_length_list([[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3], [1, 2], [1]])\n    (5, [1, 2, 3, 4, 5])\n    >>> max_length_list([[3, 4, 5], [6, 7, 8, 9], [10, 11, 12]])\n    (4, [6, 7, 8, 9])\n    \"\"\"\n    ", "canonical_solution": "def max_length_list(input_list):\r\n    max_length = max(len(x) for x in input_list )   \r\n    max_list = max(input_list, key = lambda i: len(i))    \r\n    return(max_length, max_list)", "test": "def check(candidate):\n\tassert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\n\tassert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])\n\tassert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])", "entry_point": "max_length_list"}
{"task_id": 383, "prompt": "def check_distinct(test_tup):\n    \"\"\"\n    Write a function to check if given tuple is distinct or not.\n    >>> check_distinct((1, 4, 5, 6, 1, 4))\n    False\n    >>> check_distinct((1, 4, 5, 6))\n    True\n    >>> check_distinct((2, 3, 4, 5, 6))\n    True\n    \"\"\"\n    ", "canonical_solution": "def check_distinct(test_tup):\r\n  res = True\r\n  temp = set()\r\n  for ele in test_tup:\r\n    if ele in temp:\r\n      res = False\r\n      break\r\n    temp.add(ele)\r\n  return (res) ", "test": "def check(candidate):\n\tassert check_distinct((1, 4, 5, 6, 1, 4)) == False\n\tassert check_distinct((1, 4, 5, 6)) == True\n\tassert check_distinct((2, 3, 4, 5, 6)) == True", "entry_point": "check_distinct"}
{"task_id": 384, "prompt": "def first_non_repeating_character(str1):\n    \"\"\"\n    Write a python function to find the first non-repeated character in a given string.\n    >>> first_non_repeating_character('abcabc')\n    None\n    >>> first_non_repeating_character('abc')\n    'a'\n    >>> first_non_repeating_character('ababc')\n    'c'\n    \"\"\"\n    ", "canonical_solution": "def first_non_repeating_character(str1):\r\n  char_order = []\r\n  ctr = {}\r\n  for c in str1:\r\n    if c in ctr:\r\n      ctr[c] += 1\r\n    else:\r\n      ctr[c] = 1 \r\n      char_order.append(c)\r\n  for c in char_order:\r\n    if ctr[c] == 1:\r\n      return c\r\n  return None", "test": "def check(candidate):\n\tassert first_non_repeating_character(\"abcabc\") == None\n\tassert first_non_repeating_character(\"abc\") == \"a\"\n\tassert first_non_repeating_character(\"ababc\") == \"c\"", "entry_point": "first_non_repeating_character"}
{"task_id": 385, "prompt": "def check_char(string):\n    \"\"\"\n    Write a function to check whether the given string starts and ends with the same character or not using regex.\n    >>> check_char('abba')\n    'Valid'\n    >>> check_char('a')\n    'Valid'\n    >>> check_char('abcd')\n    'Invalid'\n    \"\"\"\n    ", "canonical_solution": "import re  \r\nregex = r'^[a-z]$|^([a-z]).*\\1$'\r\ndef check_char(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn \"Valid\" \r\n\telse: \r\n\t\treturn \"Invalid\" ", "test": "def check(candidate):\n\tassert check_char(\"abba\") == \"Valid\"\n\tassert check_char(\"a\") == \"Valid\"\n\tassert check_char(\"abcd\") == \"Invalid\"", "entry_point": "check_char"}
{"task_id": 386, "prompt": "def median_numbers(a, b, c):\n    \"\"\"\n    Write a function to find the median of three specific numbers.\n    >>> median_numbers(25, 55, 65)\n    55.0\n    >>> median_numbers(20, 10, 30)\n    20.0\n    >>> median_numbers(15, 45, 75)\n    45.0\n    \"\"\"\n    ", "canonical_solution": "def median_numbers(a,b,c):\r\n if a > b:\r\n    if a < c:\r\n        median = a\r\n    elif b > c:\r\n        median = b\r\n    else:\r\n        median = c\r\n else:\r\n    if a > c:\r\n        median = a\r\n    elif b < c:\r\n        median = b\r\n    else:\r\n        median = c\r\n return median", "test": "def check(candidate):\n\tassert median_numbers(25,55,65)==55.0\n\tassert median_numbers(20,10,30)==20.0\n\tassert median_numbers(15,45,75)==45.0", "entry_point": "median_numbers"}
{"task_id": 387, "prompt": "def sum_of_digits(nums):\n    \"\"\"\n    Write a function to compute the sum of digits of each number of a given list.\n    >>> sum_of_digits([10, 2, 56])\n    14\n    >>> sum_of_digits([[10, 20, 4, 5, 'b', 70, 'a']])\n    19\n    >>> sum_of_digits([10, 20, (- 4), 5, (- 70)])\n    19\n    \"\"\"\n    ", "canonical_solution": "def sum_of_digits(nums):\r\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())", "test": "def check(candidate):\n\tassert sum_of_digits([10,2,56])==14\n\tassert sum_of_digits([[10,20,4,5,'b',70,'a']])==19\n\tassert sum_of_digits([10,20,-4,5,-70])==19", "entry_point": "sum_of_digits"}
{"task_id": 388, "prompt": "def bitwise_xor(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    >>> bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3))\n    (15, 6, 5, 10)\n    >>> bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4))\n    (13, 6, 3, 14)\n    >>> bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6))\n    (11, 2, 13, 13)\n    \"\"\"\n    ", "canonical_solution": "def bitwise_xor(test_tup1, test_tup2):\r\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ", "test": "def check(candidate):\n\tassert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\n\tassert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)\n\tassert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)", "entry_point": "bitwise_xor"}
{"task_id": 389, "prompt": "def extract_freq(test_list):\n    \"\"\"\n    Write a function to extract the frequency of unique tuples in the given list order irrespective.\n    >>> extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)])\n    3\n    >>> extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)])\n    4\n    >>> extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)])\n    4\n    \"\"\"\n    ", "canonical_solution": "def extract_freq(test_list):\r\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\r\n  return (res)", "test": "def check(candidate):\n\tassert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\n\tassert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4\n\tassert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4", "entry_point": "extract_freq"}
{"task_id": 390, "prompt": "def add_nested_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    >>> add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))\n    ((7, 10), (7, 14), (3, 10), (8, 13))\n    >>> add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4)))\n    ((9, 12), (9, 16), (5, 12), (10, 15))\n    >>> add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5)))\n    ((11, 14), (11, 18), (7, 14), (12, 17))\n    \"\"\"\n    ", "canonical_solution": "def add_nested_tuples(test_tup1, test_tup2):\r\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ", "test": "def check(candidate):\n\tassert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\n\tassert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\n\tassert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))", "entry_point": "add_nested_tuples"}
{"task_id": 391, "prompt": "def ncr_modp(n, r, p):\n    \"\"\"\n    Write a function to compute the value of ncr%p.\n    >>> ncr_modp(10, 2, 13)\n    6\n    >>> ncr_modp(15, 12, 43)\n    25\n    >>> ncr_modp(17, 9, 18)\n    10\n    \"\"\"\n    ", "canonical_solution": "def ncr_modp(n, r, p): \r\n    C = [0 for i in range(r+1)]   \r\n    C[0] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(min(i, r), 0, -1): \r\n            C[j] = (C[j] + C[j-1]) % p   \r\n    return C[r] ", "test": "def check(candidate):\n\tassert ncr_modp(10,2,13)==6\n\tassert ncr_modp(15,12,43)==25\n\tassert ncr_modp(17,9,18)==10", "entry_point": "ncr_modp"}
{"task_id": 392, "prompt": "def is_valid_URL(str):\n    \"\"\"\n    Write a function to check if a url is valid or not using regex.\n    >>> is_valid_URL('https://www.google.com')\n    True\n    >>> is_valid_URL('https:/www.gmail.com')\n    False\n    >>> is_valid_URL('https:// www.redit.com')\n    False\n    \"\"\"\n    ", "canonical_solution": "import re\r\ndef is_valid_URL(str):\r\n\tregex = (\"((http|https)://)(www.)?\" +\r\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\r\n\t\t\t\"{2,256}\\\\.[a-z]\" +\r\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\r\n\t\t\t\"._\\\\+~#?&//=]*)\")\r\n\tp = re.compile(regex)\r\n\tif (str == None):\r\n\t\treturn False\r\n\tif(re.search(p, str)):\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False", "test": "def check(candidate):\n\tassert is_valid_URL(\"https://www.google.com\") == True\n\tassert is_valid_URL(\"https:/www.gmail.com\") == False\n\tassert is_valid_URL(\"https:// www.redit.com\") == False", "entry_point": "is_valid_URL"}
{"task_id": 393, "prompt": "def minimum(a, b):\n    \"\"\"\n    Write a python function to find the minimum of two numbers.\n    >>> minimum(1, 2)\n    1\n    >>> minimum((- 5), (- 4))\n    (- 5)\n    >>> minimum(0, 0)\n    0\n    \"\"\"\n    ", "canonical_solution": "def minimum(a,b):   \r\n    if a <= b: \r\n        return a \r\n    else: \r\n        return b ", "test": "def check(candidate):\n\tassert minimum(1,2) == 1\n\tassert minimum(-5,-4) == -5\n\tassert minimum(0,0) == 0", "entry_point": "minimum"}
{"task_id": 394, "prompt": "def check_tuplex(tuplex, tuple1):\n    \"\"\"\n    Write a function to check whether an element exists within a tuple.\n    >>> check_tuplex(('w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e'), 'r')\n    True\n    >>> check_tuplex(('w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e'), '5')\n    False\n    >>> check_tuplex(('w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e'), 3)\n    True\n    \"\"\"\n    ", "canonical_solution": "def check_tuplex(tuplex,tuple1): \r\n  if tuple1 in tuplex:\r\n    return True\r\n  else:\r\n     return False", "test": "def check(candidate):\n\tassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\n\tassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False\n\tassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True", "entry_point": "check_tuplex"}
{"task_id": 395, "prompt": "def find_Parity(x):\n    \"\"\"\n    Write a python function to find the parity of a given number.\n    >>> find_Parity(12)\n    'Even Parity'\n    >>> find_Parity(7)\n    'Odd Parity'\n    >>> find_Parity(10)\n    'Even Parity'\n    \"\"\"\n    ", "canonical_solution": "def find_Parity(x): \r\n    y = x ^ (x >> 1); \r\n    y = y ^ (y >> 2); \r\n    y = y ^ (y >> 4); \r\n    y = y ^ (y >> 8); \r\n    y = y ^ (y >> 16); \r\n    if (y & 1): \r\n        return (\"Odd Parity\"); \r\n    return (\"Even Parity\"); ", "test": "def check(candidate):\n\tassert find_Parity(12) == \"Even Parity\"\n\tassert find_Parity(7) == \"Odd Parity\"\n\tassert find_Parity(10) == \"Even Parity\"", "entry_point": "find_Parity"}
{"task_id": 396, "prompt": "def rearrange_bigger(n):\n    \"\"\"\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    >>> rearrange_bigger(12)\n    21\n    >>> rearrange_bigger(10)\n    False\n    >>> rearrange_bigger(102)\n    120\n    \"\"\"\n    ", "canonical_solution": "def rearrange_bigger(n):\r\n    nums = list(str(n))\r\n    for i in range(len(nums)-2,-1,-1):\r\n        if nums[i] < nums[i+1]:\r\n            z = nums[i:]\r\n            y = min(filter(lambda x: x > z[0], z))\r\n            z.remove(y)\r\n            z.sort()\r\n            nums[i:] = [y] + z\r\n            return int(\"\".join(nums))\r\n    return False", "test": "def check(candidate):\n\tassert rearrange_bigger(12)==21\n\tassert rearrange_bigger(10)==False\n\tassert rearrange_bigger(102)==120", "entry_point": "rearrange_bigger"}
{"task_id": 397, "prompt": "def k_smallest_pairs(nums1, nums2, k):\n    \"\"\"\n    Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.\n    >>> k_smallest_pairs([1, 3, 7], [2, 4, 6], 2)\n    [[1, 2], [1, 4]]\n    >>> k_smallest_pairs([1, 3, 7], [2, 4, 6], 1)\n    [[1, 2]]\n    >>> k_smallest_pairs([1, 3, 7], [2, 4, 6], 7)\n    [[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]\n    \"\"\"\n    ", "canonical_solution": "import heapq\r\ndef k_smallest_pairs(nums1, nums2, k):\r\n   queue = []\r\n   def push(i, j):\r\n       if i < len(nums1) and j < len(nums2):\r\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\r\n   push(0, 0)\r\n   pairs = []\r\n   while queue and len(pairs) < k:\r\n       _, i, j = heapq.heappop(queue)\r\n       pairs.append([nums1[i], nums2[j]])\r\n       push(i, j + 1)\r\n       if j == 0:\r\n           push(i + 1, 0)\r\n   return pairs", "test": "def check(candidate):\n\tassert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\n\tassert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]\n\tassert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]", "entry_point": "k_smallest_pairs"}
{"task_id": 398, "prompt": "def min_product_tuple(list1):\n    \"\"\"\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    >>> min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)])\n    8\n    >>> min_product_tuple([(10, 20), (15, 2), (5, 10)])\n    30\n    >>> min_product_tuple([(11, 44), (10, 15), (20, 5), (12, 9)])\n    100\n    \"\"\"\n    ", "canonical_solution": "def min_product_tuple(list1):\r\n    result_min = min([abs(x * y) for x, y in list1] )\r\n    return result_min", "test": "def check(candidate):\n\tassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\n\tassert min_product_tuple([(10,20), (15,2), (5,10)] )==30\n\tassert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100", "entry_point": "min_product_tuple"}
{"task_id": 399, "prompt": "def min_val(listval):\n    \"\"\"\n    Write a function to find the minimum value in a given heterogeneous list.\n    >>> min_val(['Python', 3, 2, 4, 5, 'version'])\n    2\n    >>> min_val(['Python', 15, 20, 25])\n    15\n    >>> min_val(['Python', 30, 20, 40, 50, 'version'])\n    20\n    \"\"\"\n    ", "canonical_solution": "def min_val(listval):\r\n     min_val = min(i for i in listval if isinstance(i, int))\r\n     return min_val", "test": "def check(candidate):\n\tassert min_val(['Python', 3, 2, 4, 5, 'version'])==2\n\tassert min_val(['Python', 15, 20, 25])==15\n\tassert min_val(['Python', 30, 20, 40, 50, 'version'])==20", "entry_point": "min_val"}
{"task_id": 400, "prompt": "def snake_to_camel(word):\n    \"\"\"\n    Write a function to convert the given snake case string to camel case string by using regex.\n    >>> snake_to_camel('android_tv')\n    'AndroidTv'\n    >>> snake_to_camel('google_pixel')\n    'GooglePixel'\n    >>> snake_to_camel('apple_watch')\n    'AppleWatch'\n    \"\"\"\n    ", "canonical_solution": "import re\r\ndef snake_to_camel(word):\r\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))", "test": "def check(candidate):\n\tassert snake_to_camel('android_tv') == 'AndroidTv'\n\tassert snake_to_camel('google_pixel') == 'GooglePixel'\n\tassert snake_to_camel('apple_watch') == 'AppleWatch'", "entry_point": "snake_to_camel"}
{"task_id": 401, "prompt": "def remove_odd(l):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    >>> remove_odd([1, 2, 3])\n    [2]\n    >>> remove_odd([2, 4, 6])\n    [2, 4, 6]\n    >>> remove_odd([10, 20, 3])\n    [10, 20]\n    \"\"\"\n    ", "canonical_solution": "def remove_odd(l):\r\n    for i in l:\r\n        if i % 2 != 0:\r\n            l.remove(i)\r\n    return l", "test": "def check(candidate):\n\tassert remove_odd([1,2,3]) == [2]\n\tassert remove_odd([2,4,6]) == [2,4,6]\n\tassert remove_odd([10,20,3]) == [10,20]", "entry_point": "remove_odd"}
{"task_id": 402, "prompt": "def extract_nth_element(list1, n):\n    \"\"\"\n    Write a function to extract the nth element from a given list of tuples.\n    >>> extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0)\n    ['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n    >>> extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 2)\n    [99, 96, 94, 98]\n    >>> extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 1)\n    [98, 97, 91, 94]\n    \"\"\"\n    ", "canonical_solution": "def extract_nth_element(list1, n):\r\n    result = [x[n] for x in list1]\r\n    return result", "test": "def check(candidate):\n\tassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\tassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]\n\tassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]", "entry_point": "extract_nth_element"}
{"task_id": 403, "prompt": "def overlapping(list1, list2):\n    \"\"\"\n    Write a python function to check whether the value exists in a sequence or not.\n    >>> overlapping([1, 2, 3, 4, 5], [6, 7, 8, 9])\n    False\n    >>> overlapping([1, 2, 3], [4, 5, 6])\n    False\n    >>> overlapping([1, 4, 5], [1, 4, 5])\n    True\n    \"\"\"\n    ", "canonical_solution": "def overlapping(list1,list2):  \r\n    c=0\r\n    d=0\r\n    for i in list1: \r\n        c+=1\r\n    for i in list2: \r\n        d+=1\r\n    for i in range(0,c): \r\n        for j in range(0,d): \r\n            if(list1[i]==list2[j]): \r\n                return 1\r\n    return 0", "test": "def check(candidate):\n\tassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\n\tassert overlapping([1,2,3],[4,5,6]) == False\n\tassert overlapping([1,4,5],[1,4,5]) == True", "entry_point": "overlapping"}
{"task_id": 404, "prompt": "def max_Product(arr):\n    \"\"\"\n    Write a python function to find a pair with highest product from a given array of integers.\n    >>> max_Product([1, 2, 3, 4, 7, 0, 8, 4])\n    (7, 8)\n    >>> max_Product([0, (- 1), (- 2), (- 4), 5, 0, (- 6)])\n    ((- 4), (- 6))\n    >>> max_Product([1, 2, 3])\n    (2, 3)\n    \"\"\"\n    ", "canonical_solution": "def max_Product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return (\"No pairs exists\")           \r\n    x = arr[0]; y = arr[1]      \r\n    for i in range(0,arr_len): \r\n        for j in range(i + 1,arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y    ", "test": "def check(candidate):\n\tassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\n\tassert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)\n\tassert max_Product([1,2,3]) == (2,3)", "entry_point": "max_Product"}
{"task_id": 405, "prompt": "def breakSum(n):\n    \"\"\"\n    Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\n    >>> breakSum(12)\n    13\n    >>> breakSum(24)\n    27\n    >>> breakSum(23)\n    23\n    \"\"\"\n    ", "canonical_solution": "MAX = 1000000\r\ndef breakSum(n): \r\n\tdp = [0]*(n+1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); \r\n\treturn dp[n]", "test": "def check(candidate):\n\tassert breakSum(12) == 13\n\tassert breakSum(24) == 27\n\tassert breakSum(23) == 23", "entry_point": "breakSum"}
{"task_id": 406, "prompt": "def group_tuples(Input):\n    \"\"\"\n    Write a function to find common first element in given list of tuple.\n    >>> group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')])\n    [('x', 'y', 'z'), ('w', 't')]\n    >>> group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')])\n    [('a', 'b', 'c'), ('d', 'e')]\n    >>> group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')])\n    [('f', 'g', 'g'), ('h', 'i')]\n    \"\"\"\n    ", "canonical_solution": "def group_tuples(Input): \r\n\tout = {} \r\n\tfor elem in Input: \r\n\t\ttry: \r\n\t\t\tout[elem[0]].extend(elem[1:]) \r\n\t\texcept KeyError: \r\n\t\t\tout[elem[0]] = list(elem) \r\n\treturn [tuple(values) for values in out.values()] ", "test": "def check(candidate):\n\tassert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\n\tassert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]\n\tassert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]", "entry_point": "group_tuples"}
{"task_id": 407, "prompt": "def Find_Max(lst):\n    \"\"\"\n    Write a python function to find the sublist having maximum length.\n    >>> Find_Max([['A'], ['A', 'B'], ['A', 'B', 'C']])\n    ['A', 'B', 'C']\n    >>> Find_Max([[1], [1, 2], [1, 2, 3]])\n    [1, 2, 3]\n    >>> Find_Max([[1, 1], [1, 2, 3], [1, 5, 6, 1]])\n    [1, 5, 6, 1]\n    \"\"\"\n    ", "canonical_solution": "def Find_Max(lst): \r\n    maxList = max((x) for x in lst) \r\n    return maxList", "test": "def check(candidate):\n\tassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\n\tassert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]\n\tassert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]", "entry_point": "Find_Max"}
{"task_id": 408, "prompt": "def round_and_sum(list1):\n    \"\"\"\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    >>> round_and_sum([22.4, 4.0, (- 16.22), (- 9.1), 11.0, (- 12.22), 14.2, (- 5.2), 17.5])\n    243\n    >>> round_and_sum([5, 2, 9, 24.3, 29])\n    345\n    >>> round_and_sum([25.0, 56.7, 89.2])\n    513\n    \"\"\"\n    ", "canonical_solution": "def round_and_sum(list1):\r\n  lenght=len(list1)\r\n  round_and_sum=sum(list(map(round,list1))* lenght)\r\n  return round_and_sum", "test": "def check(candidate):\n\tassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\n\tassert round_and_sum([5,2,9,24.3,29])==345\n\tassert round_and_sum([25.0,56.7,89.2])==513", "entry_point": "round_and_sum"}
{"task_id": 409, "prompt": "def cube_Sum(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n even natural numbers.\n    >>> cube_Sum(2)\n    72\n    >>> cube_Sum(3)\n    288\n    >>> cube_Sum(4)\n    800\n    \"\"\"\n    ", "canonical_solution": "def cube_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += (2*i)*(2*i)*(2*i) \r\n    return sum", "test": "def check(candidate):\n\tassert cube_Sum(2) == 72\n\tassert cube_Sum(3) == 288\n\tassert cube_Sum(4) == 800", "entry_point": "cube_Sum"}
{"task_id": 410, "prompt": "def concatenate_tuple(test_tup):\n    \"\"\"\n    Write a function to concatenate each element of tuple by the delimiter.\n    >>> concatenate_tuple(('ID', 'is', 4, 'UTS'))\n    'ID-is-4-UTS'\n    >>> concatenate_tuple(('QWE', 'is', 4, 'RTY'))\n    'QWE-is-4-RTY'\n    >>> concatenate_tuple(('ZEN', 'is', 4, 'OP'))\n    'ZEN-is-4-OP'\n    \"\"\"\n    ", "canonical_solution": "def concatenate_tuple(test_tup):\r\n    delim = \"-\"\r\n    res = ''.join([str(ele) + delim for ele in test_tup])\r\n    res = res[ : len(res) - len(delim)]\r\n    return (str(res)) ", "test": "def check(candidate):\n\tassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\n\tassert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'\n\tassert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'", "entry_point": "concatenate_tuple"}
{"task_id": 411, "prompt": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    >>> find_Average_Of_Cube(2)\n    4.5\n    >>> find_Average_Of_Cube(3)\n    12\n    >>> find_Average_Of_Cube(1)\n    1\n    \"\"\"\n    ", "canonical_solution": "def find_Average_Of_Cube(n):  \r\n    sum = 0\r\n    for i in range(1, n + 1): \r\n        sum += i * i * i  \r\n    return round(sum / n, 6) ", "test": "def check(candidate):\n\tassert find_Average_Of_Cube(2) == 4.5\n\tassert find_Average_Of_Cube(3) == 12\n\tassert find_Average_Of_Cube(1) == 1", "entry_point": "find_Average_Of_Cube"}
{"task_id": 412, "prompt": "def get_maxgold(gold, m, n):\n    \"\"\"\n    Write a function to solve gold mine problem.\n    >>> get_maxgold([[1, 3, 1, 5], [2, 2, 4, 1], [5, 0, 2, 3], [0, 6, 1, 2]], 4, 4)\n    16\n    >>> get_maxgold([[10, 20], [30, 40]], 2, 2)\n    70\n    >>> get_maxgold([[4, 9], [3, 7]], 2, 2)\n    13\n    \"\"\"\n    ", "canonical_solution": "def get_maxgold(gold, m, n): \r\n    goldTable = [[0 for i in range(n)] \r\n                        for j in range(m)]   \r\n    for col in range(n-1, -1, -1): \r\n        for row in range(m):  \r\n            if (col == n-1): \r\n                right = 0\r\n            else: \r\n                right = goldTable[row][col+1] \r\n            if (row == 0 or col == n-1): \r\n                right_up = 0\r\n            else: \r\n                right_up = goldTable[row-1][col+1] \r\n            if (row == m-1 or col == n-1): \r\n                right_down = 0\r\n            else: \r\n                right_down = goldTable[row+1][col+1] \r\n            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down) \r\n    res = goldTable[0][0] \r\n    for i in range(1, m): \r\n        res = max(res, goldTable[i][0])  \r\n    return res ", "test": "def check(candidate):\n\tassert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\n\tassert get_maxgold([[10,20],[30,40]],2,2)==70\n\tassert get_maxgold([[4,9],[3,7]],2,2)==13", "entry_point": "get_maxgold"}
{"task_id": 413, "prompt": "def extract_rear(test_tuple):\n    \"\"\"\n    Write a function to extract only the rear index element of each string in the given tuple.\n    >>> extract_rear(('Mers', 'for', 'Vers'))\n    ['s', 'r', 's']\n    >>> extract_rear(('Avenge', 'for', 'People'))\n    ['e', 'r', 'e']\n    >>> extract_rear(('Gotta', 'get', 'go'))\n    ['a', 't', 'o']\n    \"\"\"\n    ", "canonical_solution": "def extract_rear(test_tuple):\r\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\r\n  return (res) ", "test": "def check(candidate):\n\tassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\n\tassert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']\n\tassert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']", "entry_point": "extract_rear"}
{"task_id": 414, "prompt": "def count_element_in_list(list1, x):\n    \"\"\"\n    Write a function to count the number of sublists containing a particular element.\n    >>> count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1)\n    3\n    >>> count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']], 'A')\n    3\n    >>> count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']], 'E')\n    1\n    \"\"\"\n    ", "canonical_solution": "def count_element_in_list(list1, x): \r\n    ctr = 0\r\n    for i in range(len(list1)): \r\n        if x in list1[i]: \r\n            ctr+= 1          \r\n    return ctr", "test": "def check(candidate):\n\tassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\n\tassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3\n\tassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1", "entry_point": "count_element_in_list"}
{"task_id": 415, "prompt": "def filter_oddnumbers(nums):\n    \"\"\"\n    Write a function to filter odd numbers using lambda function.\n    >>> filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    [1, 3, 5, 7, 9]\n    >>> filter_oddnumbers([10, 20, 45, 67, 84, 93])\n    [45, 67, 93]\n    >>> filter_oddnumbers([5, 7, 9, 8, 6, 4, 3])\n    [5, 7, 9, 3]\n    \"\"\"\n    ", "canonical_solution": "def filter_oddnumbers(nums):\r\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\r\n return odd_nums", "test": "def check(candidate):\n\tassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\n\tassert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]\n\tassert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]", "entry_point": "filter_oddnumbers"}
{"task_id": 416, "prompt": "def change_date_format(dt):\n    \"\"\"\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\n    >>> change_date_format('2026-01-02')\n    '02-01-2026'\n    >>> change_date_format('2020-11-13')\n    '13-11-2020'\n    >>> change_date_format('2021-04-26')\n    '26-04-2021'\n    \"\"\"\n    ", "canonical_solution": "import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)", "test": "def check(candidate):\n\tassert change_date_format(\"2026-01-02\") == '02-01-2026'\n\tassert change_date_format(\"2020-11-13\") == '13-11-2020'\n\tassert change_date_format(\"2021-04-26\") == '26-04-2021'", "entry_point": "change_date_format"}
{"task_id": 417, "prompt": "def shell_sort(my_list):\n    \"\"\"\n    Write a function to sort the given array by using shell sort.\n    >>> shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95])\n    [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n    >>> shell_sort([24, 22, 39, 34, 87, 73, 68])\n    [22, 24, 34, 39, 68, 73, 87]\n    >>> shell_sort([32, 30, 16, 96, 82, 83, 74])\n    [16, 30, 32, 74, 82, 83, 96]\n    \"\"\"\n    ", "canonical_solution": "def shell_sort(my_list):\r\n    gap = len(my_list) // 2\r\n    while gap > 0:\r\n        for i in range(gap, len(my_list)):\r\n            current_item = my_list[i]\r\n            j = i\r\n            while j >= gap and my_list[j - gap] > current_item:\r\n                my_list[j] = my_list[j - gap]\r\n                j -= gap\r\n            my_list[j] = current_item\r\n        gap //= 2\r\n\r\n    return my_list", "test": "def check(candidate):\n\tassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\tassert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]\n\tassert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]", "entry_point": "shell_sort"}
{"task_id": 418, "prompt": "def and_tuples(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    >>> and_tuples((10, 4, 6, 9), (5, 2, 3, 3))\n    (0, 0, 2, 1)\n    >>> and_tuples((1, 2, 3, 4), (5, 6, 7, 8))\n    (1, 2, 3, 0)\n    >>> and_tuples((8, 9, 11, 12), (7, 13, 14, 17))\n    (0, 9, 10, 0)\n    \"\"\"\n    ", "canonical_solution": "def and_tuples(test_tup1, test_tup2):\r\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ", "test": "def check(candidate):\n\tassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\n\tassert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)\n\tassert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)", "entry_point": "and_tuples"}
{"task_id": 419, "prompt": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Write a function to find the directrix of a parabola.\n    >>> parabola_directrix(5, 3, 2)\n    (- 198)\n    >>> parabola_directrix(9, 8, 4)\n    (- 2336)\n    >>> parabola_directrix(2, 4, 6)\n    (- 130)\n    \"\"\"\n    ", "canonical_solution": "def parabola_directrix(a, b, c): \r\n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\r\n  return directrix", "test": "def check(candidate):\n\tassert parabola_directrix(5,3,2)==-198\n\tassert parabola_directrix(9,8,4)==-2336\n\tassert parabola_directrix(2,4,6)==-130", "entry_point": "parabola_directrix"}
{"task_id": 420, "prompt": "def common_element(list1, list2):\n    \"\"\"\n    Write a function that takes two lists and returns true if they have at least one common element.\n    >>> common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9])\n    True\n    >>> common_element([1, 2, 3, 4, 5], [6, 7, 8, 9])\n    None\n    >>> common_element(['a', 'b', 'c'], ['d', 'b', 'e'])\n    True\n    \"\"\"\n    ", "canonical_solution": "def common_element(list1, list2):\r\n     result = False\r\n     for x in list1:\r\n         for y in list2:\r\n             if x == y:\r\n                 result = True\r\n                 return result", "test": "def check(candidate):\n\tassert common_element([1,2,3,4,5], [5,6,7,8,9])==True\n\tassert common_element([1,2,3,4,5], [6,7,8,9])==None\n\tassert common_element(['a','b','c'], ['d','b','e'])==True", "entry_point": "common_element"}
{"task_id": 421, "prompt": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Write a function to find the median of a trapezium.\n    >>> median_trapezium(15, 25, 35)\n    20\n    >>> median_trapezium(10, 20, 30)\n    15\n    >>> median_trapezium(6, 9, 4)\n    7.5\n    \"\"\"\n    ", "canonical_solution": "def median_trapezium(base1,base2,height):\r\n median = 0.5 * (base1+ base2)\r\n return median", "test": "def check(candidate):\n\tassert median_trapezium(15,25,35)==20\n\tassert median_trapezium(10,20,30)==15\n\tassert median_trapezium(6,9,4)==7.5", "entry_point": "median_trapezium"}
{"task_id": 422, "prompt": "def check_greater(arr, number):\n    \"\"\"\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    >>> check_greater([1, 2, 3, 4, 5], 4)\n    'No, entered number is less than those in the array'\n    >>> check_greater([2, 3, 4, 5, 6], 8)\n    'Yes, the entered number is greater than those in the array'\n    >>> check_greater([9, 7, 4, 8, 6, 1], 11)\n    'Yes, the entered number is greater than those in the array'\n    \"\"\"\n    ", "canonical_solution": "def check_greater(arr, number):\r\n  arr.sort()\r\n  if number > arr[-1]:\r\n    return ('Yes, the entered number is greater than those in the array')\r\n  else:\r\n    return ('No, entered number is less than those in the array')", "test": "def check(candidate):\n\tassert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\n\tassert check_greater([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'\n\tassert check_greater([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'", "entry_point": "check_greater"}
{"task_id": 423, "prompt": "def text_match_one(text):\n    \"\"\"\n    Write a function that matches a string that has an a followed by one or more b's.\n    >>> text_match_one('ac')\n    'Not matched!'\n    >>> text_match_one('dc')\n    'Not matched!'\n    >>> text_match_one('abba')\n    'Found a match!'\n    \"\"\"\n    ", "canonical_solution": "import re\r\ndef text_match_one(text):\r\n        patterns = 'ab+?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')\r\n", "test": "def check(candidate):\n\tassert text_match_one(\"ac\")==('Not matched!')\n\tassert text_match_one(\"dc\")==('Not matched!')\n\tassert text_match_one(\"abba\")==('Found a match!')", "entry_point": "text_match_one"}
{"task_id": 424, "prompt": "def last_Digit(n):\n    \"\"\"\n    Write a python function to find the last digit of a given number.\n    >>> last_Digit(123)\n    3\n    >>> last_Digit(25)\n    5\n    >>> last_Digit(30)\n    0\n    \"\"\"\n    ", "canonical_solution": "def last_Digit(n) :\r\n    return (n % 10) ", "test": "def check(candidate):\n\tassert last_Digit(123) == 3\n\tassert last_Digit(25) == 5\n\tassert last_Digit(30) == 0", "entry_point": "last_Digit"}
{"task_id": 425, "prompt": "def neg_nos(list1):\n    \"\"\"\n    Write a python function to print negative numbers in a list.\n    >>> neg_nos([(- 1), 4, 5, (- 6)])\n    (- 1)\n    >>> neg_nos([(- 1), (- 2), 3, 4])\n    (- 1)\n    >>> neg_nos([(- 7), (- 6), 8, 9])\n    (- 7)\n    \"\"\"\n    ", "canonical_solution": "def neg_nos(list1):\r\n  for num in list1: \r\n    if num < 0: \r\n       return num ", "test": "def check(candidate):\n\tassert neg_nos([-1,4,5,-6]) == -1,-6\n\tassert neg_nos([-1,-2,3,4]) == -1,-2\n\tassert neg_nos([-7,-6,8,9]) == -7,-6", "entry_point": "neg_nos"}
{"task_id": 426, "prompt": "def remove_odd(str1):\n    \"\"\"\n    Write a function to remove odd characters in a string.\n    >>> remove_odd('python')\n    'yhn'\n    >>> remove_odd('program')\n    'rga'\n    >>> remove_odd('language')\n    'agae'\n    \"\"\"\n    ", "canonical_solution": "def remove_odd(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 == 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2", "test": "def check(candidate):\n\tassert remove_odd(\"python\")==(\"yhn\")\n\tassert remove_odd(\"program\")==(\"rga\")\n\tassert remove_odd(\"language\")==(\"agae\")", "entry_point": "remove_odd"}
{"task_id": 427, "prompt": "def count_bidirectional(test_list):\n    \"\"\"\n    Write a function to count bidirectional tuple pairs.\n    >>> count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)])\n    '3'\n    >>> count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)])\n    '2'\n    >>> count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)])\n    '4'\n    \"\"\"\n    ", "canonical_solution": "def count_bidirectional(test_list):\r\n  res = 0\r\n  for idx in range(0, len(test_list)):\r\n    for iidx in range(idx + 1, len(test_list)):\r\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\r\n        res += 1\r\n  return (str(res)) ", "test": "def check(candidate):\n\tassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\n\tassert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'\n\tassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'", "entry_point": "count_bidirectional"}
{"task_id": 428, "prompt": "def multiple_to_single(L):\n    \"\"\"\n    Write a function to convert a list of multiple integers into a single integer.\n    >>> multiple_to_single([11, 33, 50])\n    113350\n    >>> multiple_to_single([(- 1), 2, 3, 4, 5, 6])\n    (- 123456)\n    >>> multiple_to_single([10, 15, 20, 25])\n    10152025\n    \"\"\"\n    ", "canonical_solution": "def multiple_to_single(L):\r\n  x = int(\"\".join(map(str, L)))\r\n  return x", "test": "def check(candidate):\n\tassert multiple_to_single([11, 33, 50])==113350\n\tassert multiple_to_single([-1,2,3,4,5,6])==-123456\n\tassert multiple_to_single([10,15,20,25])==10152025", "entry_point": "multiple_to_single"}
{"task_id": 429, "prompt": "def find_adverb_position(text):\n    \"\"\"\n    Write a function to find all adverbs and their positions in a given sentence.\n    >>> find_adverb_position('clearly!! we can see the sky')\n    (0, 7, 'clearly')\n    >>> find_adverb_position('seriously!! there are many roses')\n    (0, 9, 'seriously')\n    >>> find_adverb_position('unfortunately!! sita is going to home')\n    (0, 13, 'unfortunately')\n    \"\"\"\n    ", "canonical_solution": "import re\r\ndef find_adverb_position(text):\r\n for m in re.finditer(r\"\\w+ly\", text):\r\n    return (m.start(), m.end(), m.group(0))", "test": "def check(candidate):\n\tassert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\n\tassert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')\n\tassert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')", "entry_point": "find_adverb_position"}
{"task_id": 430, "prompt": "def surfacearea_cube(l):\n    \"\"\"\n    Write a function to find the surface area of a cube.\n    >>> surfacearea_cube(5)\n    150\n    >>> surfacearea_cube(3)\n    54\n    >>> surfacearea_cube(10)\n    600\n    \"\"\"\n    ", "canonical_solution": "def surfacearea_cube(l):\r\n  surfacearea= 6*l*l\r\n  return surfacearea", "test": "def check(candidate):\n\tassert surfacearea_cube(5)==150\n\tassert surfacearea_cube(3)==54\n\tassert surfacearea_cube(10)==600", "entry_point": "surfacearea_cube"}
{"task_id": 431, "prompt": "def positive_count(nums):\n    \"\"\"\n    Write a function to find the ration of positive numbers in an array of integers.\n    >>> positive_count([0, 1, 2, (- 1), (- 5), 6, 0, (- 3), (- 2), 3, 4, 6, 8])\n    0.54\n    >>> positive_count([2, 1, 2, (- 1), (- 5), 6, 4, (- 3), (- 2), 3, 4, 6, 8])\n    0.69\n    >>> positive_count([2, 4, (- 6), (- 9), 11, (- 12), 14, (- 5), 17])\n    0.56\n    \"\"\"\n    ", "canonical_solution": "from array import array\r\ndef positive_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x > 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)", "test": "def check(candidate):\n\tassert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\n\tassert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69\n\tassert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56", "entry_point": "positive_count"}
{"task_id": 432, "prompt": "def largest_neg(list1):\n    \"\"\"\n    Write a python function to find the largest negative number from the given list.\n    >>> largest_neg([1, 2, 3, (- 4), (- 6)])\n    (- 6)\n    >>> largest_neg([1, 2, 3, (- 8), (- 9)])\n    (- 9)\n    >>> largest_neg([1, 2, 3, 4, (- 1)])\n    (- 1)\n    \"\"\"\n    ", "canonical_solution": "def largest_neg(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x < max : \r\n             max = x  \r\n    return max", "test": "def check(candidate):\n\tassert largest_neg([1,2,3,-4,-6]) == -6\n\tassert largest_neg([1,2,3,-8,-9]) == -9\n\tassert largest_neg([1,2,3,4,-1]) == -1", "entry_point": "largest_neg"}
{"task_id": 433, "prompt": "def trim_tuple(test_list, K):\n    \"\"\"\n    Write a function to trim each tuple by k in the given tuple list.\n    >>> trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2)\n    '[(2,), (9,), (2,), (2,)]'\n    >>> trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1)\n    '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'\n    >>> trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4), (4, 1, 7, 8), (3, 6, 9, 7)], 1)\n    '[(8, 4), (8, 12), (1, 7), (6, 9)]'\n    \"\"\"\n    ", "canonical_solution": "def trim_tuple(test_list, K):\r\n  res = []\r\n  for ele in test_list:\r\n    N = len(ele)\r\n    res.append(tuple(list(ele)[K: N - K]))\r\n  return (str(res)) ", "test": "def check(candidate):\n\tassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\n\tassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'\n\tassert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'", "entry_point": "trim_tuple"}
{"task_id": 434, "prompt": "def index_multiplication(test_tup1, test_tup2):\n    \"\"\"\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    >>> index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))\n    ((6, 21), (12, 45), (2, 9), (7, 30))\n    >>> index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4)))\n    ((14, 32), (20, 60), (6, 20), (16, 44))\n    >>> index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5)))\n    ((24, 45), (30, 77), (12, 33), (27, 60))\n    \"\"\"\n    ", "canonical_solution": "def index_multiplication(test_tup1, test_tup2):\r\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ", "test": "def check(candidate):\n\tassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\n\tassert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))\n\tassert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))", "entry_point": "index_multiplication"}
{"task_id": 435, "prompt": "def count_Occurrence(tup, lst):\n    \"\"\"\n    Write a python function to count the occurence of all elements of list in a tuple.\n    >>> count_Occurrence(('a', 'a', 'c', 'b', 'd'), ['a', 'b'])\n    3\n    >>> count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4), [1, 4, 7])\n    6\n    >>> count_Occurrence((1, 2, 3, 4, 5, 6), [1, 2])\n    2\n    \"\"\"\n    ", "canonical_solution": "from collections import Counter \r\ndef count_Occurrence(tup, lst): \r\n    count = 0\r\n    for item in tup: \r\n        if item in lst: \r\n            count+= 1 \r\n    return count  ", "test": "def check(candidate):\n\tassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\n\tassert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6\n\tassert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2", "entry_point": "count_Occurrence"}
{"task_id": 436, "prompt": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list using lambda function.\n    >>> cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n    >>> cube_nums([10, 20, 30])\n    [1000, 8000, 27000]\n    >>> cube_nums([12, 15])\n    [1728, 3375]\n    \"\"\"\n    ", "canonical_solution": "def cube_nums(nums):\r\n cube_nums = list(map(lambda x: x ** 3, nums))\r\n return cube_nums", "test": "def check(candidate):\n\tassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n\tassert cube_nums([10,20,30])==([1000, 8000, 27000])\n\tassert cube_nums([12,15])==([1728, 3375])", "entry_point": "cube_nums"}
{"task_id": 437, "prompt": "def cal_sum(n):\n    \"\"\"\n    Write a function to calculate the sum of perrin numbers.\n    >>> cal_sum(9)\n    49\n    >>> cal_sum(10)\n    66\n    >>> cal_sum(11)\n    88\n    \"\"\"\n    ", "canonical_solution": "def cal_sum(n): \r\n\ta = 3\r\n\tb = 0\r\n\tc = 2\r\n\tif (n == 0): \r\n\t\treturn 3\r\n\tif (n == 1): \r\n\t\treturn 3\r\n\tif (n == 2): \r\n\t\treturn 5\r\n\tsum = 5\r\n\twhile (n > 2): \r\n\t\td = a + b \r\n\t\tsum = sum + d \r\n\t\ta = b \r\n\t\tb = c \r\n\t\tc = d \r\n\t\tn = n-1\r\n\treturn sum", "test": "def check(candidate):\n\tassert cal_sum(9) == 49\n\tassert cal_sum(10) == 66\n\tassert cal_sum(11) == 88", "entry_point": "cal_sum"}
{"task_id": 438, "prompt": "def check_Triangle(x1, y1, x2, y2, x3, y3):\n    \"\"\"\n    Write a python function to check whether the triangle is valid or not if 3 points are given.\n    >>> check_Triangle(1, 5, 2, 5, 4, 6)\n    'Yes'\n    >>> check_Triangle(1, 1, 1, 4, 1, 5)\n    'No'\n    >>> check_Triangle(1, 1, 1, 1, 1, 1)\n    'No'\n    \"\"\"\n    ", "canonical_solution": "def check_Triangle(x1,y1,x2,y2,x3,y3): \r\n    a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   \r\n    if a == 0: \r\n        return ('No') \r\n    else: \r\n        return ('Yes') ", "test": "def check(candidate):\n\tassert check_Triangle(1,5,2,5,4,6) == 'Yes'\n\tassert check_Triangle(1,1,1,4,1,5) == 'No'\n\tassert check_Triangle(1,1,1,1,1,1) == 'No'", "entry_point": "check_Triangle"}
{"task_id": 439, "prompt": "def extract_string(str, l):\n    \"\"\"\n    Write a function to extract specified size of strings from a give list of string values.\n    >>> extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8)\n    ['practice', 'solution']\n    >>> extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 6)\n    ['Python']\n    >>> extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 9)\n    ['exercises']\n    \"\"\"\n    ", "canonical_solution": "def extract_string(str, l):\r\n    result = [e for e in str if len(e) == l] \r\n    return result", "test": "def check(candidate):\n\tassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\n\tassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']\n\tassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']", "entry_point": "extract_string"}
{"task_id": 440, "prompt": "def remove_whitespaces(text1):\n    \"\"\"\n    Write a function to remove all whitespaces from the given string using regex.\n    >>> remove_whitespaces(' Google    Flutter ')\n    'GoogleFlutter'\n    >>> remove_whitespaces(' Google    Dart ')\n    'GoogleDart'\n    >>> remove_whitespaces(' iOS    Swift ')\n    'iOSSwift'\n    \"\"\"\n    ", "canonical_solution": "import re\r\ndef remove_whitespaces(text1):\r\n  return (re.sub(r'\\s+', '',text1))", "test": "def check(candidate):\n\tassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\tassert remove_whitespaces(' Google    Dart ') == 'GoogleDart'\n\tassert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'", "entry_point": "remove_whitespaces"}
{"task_id": 441, "prompt": "def loss_amount(actual_cost, sale_amount):\n    \"\"\"\n    Write a function that gives loss amount if the given amount has loss else return none.\n    >>> loss_amount(1500, 1200)\n    None\n    >>> loss_amount(100, 200)\n    100\n    >>> loss_amount(2000, 5000)\n    3000\n    \"\"\"\n    ", "canonical_solution": "def loss_amount(actual_cost,sale_amount): \r\n  if(sale_amount > actual_cost):\r\n    amount = sale_amount - actual_cost\r\n    return amount\r\n  else:\r\n    return None", "test": "def check(candidate):\n\tassert loss_amount(1500,1200)==None\n\tassert loss_amount(100,200)==100\n\tassert loss_amount(2000,5000)==3000", "entry_point": "loss_amount"}
{"task_id": 442, "prompt": "def sumofFactors(n):\n    \"\"\"\n    Write a python function to find the sum of even factors of a number.\n    >>> sumofFactors(18)\n    26\n    >>> sumofFactors(30)\n    48\n    >>> sumofFactors(6)\n    8\n    \"\"\"\n    ", "canonical_solution": "import math \r\ndef sumofFactors(n) : \r\n    if (n % 2 != 0) : \r\n        return 0\r\n    res = 1\r\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while (n % i == 0) : \r\n            count= count + 1\r\n            n = n // i \r\n            if (i == 2 and count == 1) : \r\n                curr_sum = 0\r\n            curr_term = curr_term * i \r\n            curr_sum = curr_sum + curr_term \r\n        res = res * curr_sum  \r\n    if (n >= 2) : \r\n        res = res * (1 + n) \r\n    return res ", "test": "def check(candidate):\n\tassert sumofFactors(18) == 26\n\tassert sumofFactors(30) == 48\n\tassert sumofFactors(6) == 8", "entry_point": "sumofFactors"}
{"task_id": 443, "prompt": "def text_match_wordz(text):\n    \"\"\"\n    Write a function that matches a word containing 'z'.\n    >>> text_match_wordz('pythonz.')\n    'Found a match!'\n    >>> text_match_wordz('xyz.')\n    'Found a match!'\n    >>> text_match_wordz('  lang  .')\n    'Not matched!'\n    \"\"\"\n    ", "canonical_solution": "import re\r\ndef text_match_wordz(text):\r\n        patterns = '\\w*z.\\w*'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "test": "def check(candidate):\n\tassert text_match_wordz(\"pythonz.\")==('Found a match!')\n\tassert text_match_wordz(\"xyz.\")==('Found a match!')\n\tassert text_match_wordz(\"  lang  .\")==('Not matched!')", "entry_point": "text_match_wordz"}
{"task_id": 444, "prompt": "def check_monthnumb_number(monthnum2):\n    \"\"\"\n    Write a function to check whether the given month number contains 31 days or not.\n    >>> check_monthnumb_number(5)\n    True\n    >>> check_monthnumb_number(2)\n    False\n    >>> check_monthnumb_number(6)\n    False\n    \"\"\"\n    ", "canonical_solution": "def check_monthnumb_number(monthnum2):\r\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\r\n    return True\r\n  else:\r\n    return False", "test": "def check(candidate):\n\tassert check_monthnumb_number(5)==True\n\tassert check_monthnumb_number(2)==False\n\tassert check_monthnumb_number(6)==False", "entry_point": "check_monthnumb_number"}
{"task_id": 445, "prompt": "def reverse_string_list(stringlist):\n    \"\"\"\n    Write a function to reverse strings in a given list of string values.\n    >>> reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])\n    ['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n    >>> reverse_string_list(['john', 'amal', 'joel', 'george'])\n    ['nhoj', 'lama', 'leoj', 'egroeg']\n    >>> reverse_string_list(['jack', 'john', 'mary'])\n    ['kcaj', 'nhoj', 'yram']\n    \"\"\"\n    ", "canonical_solution": "def reverse_string_list(stringlist):\r\n    result = [x[::-1] for x in stringlist]\r\n    return result", "test": "def check(candidate):\n\tassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n\tassert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']\n\tassert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']", "entry_point": "reverse_string_list"}
{"task_id": 446, "prompt": "def Find_Min(lst):\n    \"\"\"\n    Write a python function to find the sublist having minimum length.\n    >>> Find_Min([[1], [1, 2], [1, 2, 3]])\n    [1]\n    >>> Find_Min([[1, 1], [1, 1, 1], [1, 2, 7, 8]])\n    [1, 1]\n    >>> Find_Min([['x'], ['x', 'y'], ['x', 'y', 'z']])\n    ['x']\n    \"\"\"\n    ", "canonical_solution": "def Find_Min(lst): \r\n    minList = min((x) for x in lst) \r\n    return minList", "test": "def check(candidate):\n\tassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\n\tassert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]\n\tassert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']", "entry_point": "Find_Min"}
{"task_id": 447, "prompt": "def rectangle_area(l, b):\n    \"\"\"\n    Write a function to find the area of a rectangle.\n    >>> rectangle_area(10, 20)\n    200\n    >>> rectangle_area(10, 5)\n    50\n    >>> rectangle_area(4, 2)\n    8\n    \"\"\"\n    ", "canonical_solution": "def rectangle_area(l,b):\r\n  area=l*b\r\n  return area", "test": "def check(candidate):\n\tassert rectangle_area(10,20)==200\n\tassert rectangle_area(10,5)==50\n\tassert rectangle_area(4,2)==8", "entry_point": "rectangle_area"}
{"task_id": 448, "prompt": "def remove_uppercase(str1):\n    \"\"\"\n    Write a function to remove uppercase substrings from a given string by using regex.\n    >>> remove_uppercase('cAstyoUrFavoRitETVshoWs')\n    'cstyoravoitshos'\n    >>> remove_uppercase('wAtchTheinTernEtrAdIo')\n    'wtchheinerntrdo'\n    >>> remove_uppercase('VoicESeaRchAndreComMendaTionS')\n    'oiceachndreomendaion'\n    \"\"\"\n    ", "canonical_solution": "import re\r\ndef remove_uppercase(str1):\r\n  remove_upper = lambda text: re.sub('[A-Z]', '', text)\r\n  result =  remove_upper(str1)\r\n  return (result)", "test": "def check(candidate):\n\tassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\n\tassert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'\n\tassert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'", "entry_point": "remove_uppercase"}
{"task_id": 449, "prompt": "def Extract(lst):\n    \"\"\"\n    Write a python function to get the first element of each sublist.\n    >>> Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]])\n    [1, 3, 6]\n    >>> Extract([[1, 2, 3], [4, 5]])\n    [1, 4]\n    >>> Extract([[9, 8, 1], [1, 2]])\n    [9, 1]\n    \"\"\"\n    ", "canonical_solution": "def Extract(lst): \r\n    return [item[0] for item in lst] ", "test": "def check(candidate):\n\tassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\tassert Extract([[1,2,3],[4, 5]]) == [1,4]\n\tassert Extract([[9,8,1],[1,2]]) == [9,1]", "entry_point": "Extract"}
{"task_id": 450, "prompt": "def upper_ctr(str):\n    \"\"\"\n    Write a python function to count the upper case characters in a given string.\n    >>> upper_ctr('PYthon')\n    1\n    >>> upper_ctr('BigData')\n    1\n    >>> upper_ctr('program')\n    0\n    \"\"\"\n    ", "canonical_solution": "def upper_ctr(str):\r\n    upper_ctr = 0\r\n    for i in range(len(str)):\r\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\r\n          return upper_ctr", "test": "def check(candidate):\n\tassert upper_ctr('PYthon') == 1\n\tassert upper_ctr('BigData') == 1\n\tassert upper_ctr('program') == 0", "entry_point": "upper_ctr"}
{"task_id": 451, "prompt": "def combinations_list(list1):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n    >>> combinations_list(['orange', 'red', 'green', 'blue'])\n    [[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n    >>> combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])\n    [[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]\n    >>> combinations_list(['red', 'green', 'black', 'orange'])\n    [[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]\n    \"\"\"\n    ", "canonical_solution": "def combinations_list(list1):\r\n    if len(list1) == 0:\r\n        return [[]]\r\n    result = []\r\n    for el in combinations_list(list1[1:]):\r\n        result += [el, el+[list1[0]]]\r\n    return result", "test": "def check(candidate):\n\tassert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n\tassert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]\n\tassert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]", "entry_point": "combinations_list"}
{"task_id": 452, "prompt": "def max_subarray_product(arr):\n    \"\"\"\n    Write a function to find the maximum product subarray of the given array.\n    >>> max_subarray_product([1, (- 2), (- 3), 0, 7, (- 8), (- 2)])\n    112\n    >>> max_subarray_product([6, (- 3), (- 10), 0, 2])\n    180\n    >>> max_subarray_product([(- 2), (- 40), 0, (- 2), (- 3)])\n    80\n    \"\"\"\n    ", "canonical_solution": "def max_subarray_product(arr):\r\n\tn = len(arr)\r\n\tmax_ending_here = 1\r\n\tmin_ending_here = 1\r\n\tmax_so_far = 0\r\n\tflag = 0\r\n\tfor i in range(0, n):\r\n\t\tif arr[i] > 0:\r\n\t\t\tmax_ending_here = max_ending_here * arr[i]\r\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\r\n\t\t\tflag = 1\r\n\t\telif arr[i] == 0:\r\n\t\t\tmax_ending_here = 1\r\n\t\t\tmin_ending_here = 1\r\n\t\telse:\r\n\t\t\ttemp = max_ending_here\r\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\r\n\t\t\tmin_ending_here = temp * arr[i]\r\n\t\tif (max_so_far < max_ending_here):\r\n\t\t\tmax_so_far = max_ending_here\r\n\tif flag == 0 and max_so_far == 0:\r\n\t\treturn 0\r\n\treturn max_so_far", "test": "def check(candidate):\n\tassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\n\tassert max_subarray_product([6, -3, -10, 0, 2]) == 180 \n\tassert max_subarray_product([-2, -40, 0, -2, -3]) == 80", "entry_point": "max_subarray_product"}
{"task_id": 453, "prompt": "def check_value(dict, n):\n    \"\"\"\n    Write a function to check if all values are same in a dictionary.\n    >>> check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12}, 10)\n    False\n    >>> check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12}, 12)\n    True\n    >>> check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12}, 5)\n    False\n    \"\"\"\n    ", "canonical_solution": "def check_value(dict, n):\r\n    result = all(x == n for x in dict.values()) \r\n    return result", "test": "def check(candidate):\n\tassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\n\tassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True\n\tassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False", "entry_point": "check_value"}
{"task_id": 454, "prompt": "def drop_empty(dict1):\n    \"\"\"\n    Write a function to drop empty items from a given dictionary.\n    >>> drop_empty({'c1': 'Red', 'c2': 'Green', 'c3': None})\n    {'c1': 'Red', 'c2': 'Green'}\n    >>> drop_empty({'c1': 'Red', 'c2': None, 'c3': None})\n    {'c1': 'Red'}\n    >>> drop_empty({'c1': None, 'c2': 'Green', 'c3': None})\n    {'c2': 'Green'}\n    \"\"\"\n    ", "canonical_solution": "def drop_empty(dict1):\r\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\r\n  return dict1", "test": "def check(candidate):\n\tassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\n\tassert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}\n\tassert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}", "entry_point": "drop_empty"}
{"task_id": 455, "prompt": "def find_peak(arr, n):\n    \"\"\"\n    Write a function to find the peak element in the given array.\n    >>> find_peak([1, 3, 20, 4, 1, 0], 6)\n    2\n    >>> find_peak([2, 3, 4, 5, 6], 5)\n    4\n    >>> find_peak([8, 9, 11, 12, 14, 15], 6)\n    5\n    \"\"\"\n    ", "canonical_solution": "def find_peak_util(arr, low, high, n): \r\n\tmid = low + (high - low)/2\r\n\tmid = int(mid) \r\n\tif ((mid == 0 or arr[mid - 1] <= arr[mid]) and\r\n\t\t(mid == n - 1 or arr[mid + 1] <= arr[mid])): \r\n\t\treturn mid \r\n\telif (mid > 0 and arr[mid - 1] > arr[mid]): \r\n\t\treturn find_peak_util(arr, low, (mid - 1), n) \r\n\telse: \r\n\t\treturn find_peak_util(arr, (mid + 1), high, n) \r\ndef find_peak(arr, n): \r\n\treturn find_peak_util(arr, 0, n - 1, n) ", "test": "def check(candidate):\n\tassert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\n\tassert find_peak([2, 3, 4, 5, 6], 5) == 4\n\tassert find_peak([8, 9, 11, 12, 14, 15], 6) == 5 ", "entry_point": "find_peak"}
{"task_id": 456, "prompt": "def decimal_to_Octal(deciNum):\n    \"\"\"\n    Write a python function to convert decimal number to octal number.\n    >>> decimal_to_Octal(10)\n    12\n    >>> decimal_to_Octal(2)\n    2\n    >>> decimal_to_Octal(33)\n    41\n    \"\"\"\n    ", "canonical_solution": "def decimal_to_Octal(deciNum):\r\n    octalNum = 0\r\n    countval = 1;\r\n    dNo = deciNum;\r\n    while (deciNum!= 0):\r\n        remainder= deciNum % 8;\r\n        octalNum+= remainder*countval;\r\n        countval= countval*10;\r\n        deciNum //= 8; \r\n    return (octalNum)", "test": "def check(candidate):\n\tassert decimal_to_Octal(10) == 12\n\tassert decimal_to_Octal(2) == 2\n\tassert decimal_to_Octal(33) == 41", "entry_point": "decimal_to_Octal"}
{"task_id": 457, "prompt": "def max_product(arr, n):\n    \"\"\"\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    >>> max_product([3, 100, 4, 5, 150, 6], 6)\n    45000\n    >>> max_product([4, 42, 55, 68, 80], 5)\n    50265600\n    >>> max_product([10, 22, 9, 33, 21, 50, 41, 60], 8)\n    21780000\n    \"\"\"\n    ", "canonical_solution": "def max_product(arr, n ): \r\n\tmpis =[0] * (n) \r\n\tfor i in range(n): \r\n\t\tmpis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\t\tmpis[i] < (mpis[j] * arr[i])): \r\n\t\t\t\t\t\tmpis[i] = mpis[j] * arr[i] \r\n\treturn max(mpis)", "test": "def check(candidate):\n\tassert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \n\tassert max_product([4, 42, 55, 68, 80], 5) == 50265600\n\tassert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 ", "entry_point": "max_product"}
{"task_id": 458, "prompt": "def max_profit(price, k):\n    \"\"\"\n    Write a function to find the maximum profit earned from a maximum of k stock transactions\n    >>> max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3)\n    10\n    >>> max_profit([2, 4, 7, 5, 4, 3, 5], 2)\n    7\n    >>> max_profit([10, 6, 8, 4, 2], 2)\n    2\n    \"\"\"\n    ", "canonical_solution": "def max_profit(price, k):\r\n    n = len(price)\r\n    final_profit = [[None for x in range(n)] for y in range(k + 1)]\r\n    for i in range(k + 1):\r\n        for j in range(n):\r\n            if i == 0 or j == 0:\r\n                final_profit[i][j] = 0\r\n            else:\r\n                max_so_far = 0\r\n                for x in range(j):\r\n                    curr_price = price[j] - price[x] + final_profit[i-1][x]\r\n                    if max_so_far < curr_price:\r\n                        max_so_far = curr_price\r\n                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)\r\n    return final_profit[k][n-1]", "test": "def check(candidate):\n\tassert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\n\tassert max_profit([2, 4, 7, 5, 4, 3, 5], 2) == 7\n\tassert max_profit([10, 6, 8, 4, 2], 2) == 2", "entry_point": "max_profit"}
{"task_id": 459, "prompt": "def add_pairwise(test_tup):\n    \"\"\"\n    Write a function to find the pairwise addition of the elements of the given tuples.\n    >>> add_pairwise((1, 5, 7, 8, 10))\n    (6, 12, 15, 18)\n    >>> add_pairwise((2, 6, 8, 9, 11))\n    (8, 14, 17, 20)\n    >>> add_pairwise((3, 7, 9, 10, 12))\n    (10, 16, 19, 22)\n    \"\"\"\n    ", "canonical_solution": "def add_pairwise(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) ", "test": "def check(candidate):\n\tassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\n\tassert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)\n\tassert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)", "entry_point": "add_pairwise"}
{"task_id": 460, "prompt": "def find_remainder(arr, lens, n):\n    \"\"\"\n    Write a python function to find remainder of array multiplication divided by n.\n    >>> find_remainder([100, 10, 5, 25, 35, 14], 6, 11)\n    9\n    >>> find_remainder([1, 1, 1], 3, 1)\n    0\n    >>> find_remainder([1, 2, 1], 3, 2)\n    0\n    \"\"\"\n    ", "canonical_solution": "def find_remainder(arr, lens, n): \r\n    mul = 1\r\n    for i in range(lens):  \r\n        mul = (mul * (arr[i] % n)) % n \r\n    return mul % n ", "test": "def check(candidate):\n\tassert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\n\tassert find_remainder([1,1,1],3,1) == 0\n\tassert find_remainder([1,2,1],3,2) == 0", "entry_point": "find_remainder"}
{"task_id": 461, "prompt": "def check_Consecutive(l):\n    \"\"\"\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    >>> check_Consecutive([1, 2, 3, 4, 5])\n    True\n    >>> check_Consecutive([1, 2, 3, 5, 6])\n    False\n    >>> check_Consecutive([1, 2, 1])\n    False\n    \"\"\"\n    ", "canonical_solution": "def check_Consecutive(l): \r\n    return sorted(l) == list(range(min(l),max(l)+1)) ", "test": "def check(candidate):\n\tassert check_Consecutive([1,2,3,4,5]) == True\n\tassert check_Consecutive([1,2,3,5,6]) == False\n\tassert check_Consecutive([1,2,1]) == False", "entry_point": "check_Consecutive"}
{"task_id": 462, "prompt": "def tuple_intersection(test_list1, test_list2):\n    \"\"\"\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    >>> tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)])\n    {(4, 5), (3, 4), (5, 6)}\n    >>> tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)], [(1, 4), (7, 4), (16, 12), (10, 13)])\n    {(4, 7), (1, 4)}\n    >>> tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)], [(11, 2), (2, 3), (6, 2), (1, 3)])\n    {(1, 3), (2, 3)}\n    \"\"\"\n    ", "canonical_solution": "def tuple_intersection(test_list1, test_list2):\r\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\r\n  return (res)", "test": "def check(candidate):\n\tassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\n\tassert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}\n\tassert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}", "entry_point": "tuple_intersection"}
{"task_id": 463, "prompt": "def replace_char(str1, ch, newch):\n    \"\"\"\n    Write a function to replace characters in a string.\n    >>> replace_char('polygon', 'y', 'l')\n    'pollgon'\n    >>> replace_char('character', 'c', 'a')\n    'aharaater'\n    >>> replace_char('python', 'l', 'a')\n    'python'\n    \"\"\"\n    ", "canonical_solution": "def replace_char(str1,ch,newch):\r\n str2 = str1.replace(ch, newch)\r\n return str2", "test": "def check(candidate):\n\tassert replace_char(\"polygon\",'y','l')==(\"pollgon\")\n\tassert replace_char(\"character\",'c','a')==(\"aharaater\")\n\tassert replace_char(\"python\",'l','a')==(\"python\")", "entry_point": "replace_char"}
{"task_id": 464, "prompt": "def sort_counter(dict1):\n    \"\"\"\n    Write a function to sort counter by value.\n    >>> sort_counter({'Math': 81, 'Physics': 83, 'Chemistry': 87})\n    [('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n    >>> sort_counter({'Math': 400, 'Physics': 300, 'Chemistry': 250})\n    [('Math', 400), ('Physics', 300), ('Chemistry', 250)]\n    >>> sort_counter({'Math': 900, 'Physics': 1000, 'Chemistry': 1250})\n    [('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]\n    \"\"\"\n    ", "canonical_solution": "from collections import Counter\r\ndef sort_counter(dict1):\r\n x = Counter(dict1)\r\n sort_counter=x.most_common()\r\n return sort_counter", "test": "def check(candidate):\n\tassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n\tassert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]\n\tassert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]", "entry_point": "sort_counter"}
{"task_id": 465, "prompt": "def big_sum(nums):\n    \"\"\"\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    >>> big_sum([1, 2, 3])\n    4\n    >>> big_sum([(- 1), 2, 3, 4])\n    3\n    >>> big_sum([2, 3, 6])\n    8\n    \"\"\"\n    ", "canonical_solution": "def big_sum(nums):\r\n      sum= max(nums)+min(nums)\r\n      return sum", "test": "def check(candidate):\n\tassert big_sum([1,2,3]) == 4\n\tassert big_sum([-1,2,3,4]) == 3\n\tassert big_sum([2,3,6]) == 8", "entry_point": "big_sum"}
{"task_id": 466, "prompt": "def is_lower(string):\n    \"\"\"\n    Write a python function to convert the given string to lower case.\n    >>> is_lower('InValid')\n    'invalid'\n    >>> is_lower('TruE')\n    'true'\n    >>> is_lower('SenTenCE')\n    'sentence'\n    \"\"\"\n    ", "canonical_solution": "def is_lower(string):\r\n  return (string.lower())", "test": "def check(candidate):\n\tassert is_lower(\"InValid\") == \"invalid\"\n\tassert is_lower(\"TruE\") == \"true\"\n\tassert is_lower(\"SenTenCE\") == \"sentence\"", "entry_point": "is_lower"}
{"task_id": 467, "prompt": "def remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string.\n    >>> remove_lowercase('PYTHon')\n    'PYTH'\n    >>> remove_lowercase('FInD')\n    'FID'\n    >>> remove_lowercase('STRinG')\n    'STRG'\n    \"\"\"\n    ", "canonical_solution": "import re\r\ndef remove_lowercase(str1):\r\n remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n result =  remove_lower(str1)\r\n return result", "test": "def check(candidate):\n\tassert remove_lowercase(\"PYTHon\")==('PYTH')\n\tassert remove_lowercase(\"FInD\")==('FID')\n\tassert remove_lowercase(\"STRinG\")==('STRG')", "entry_point": "remove_lowercase"}
{"task_id": 468, "prompt": "def first_Digit(n):\n    \"\"\"\n    Write a python function to find the first digit of a given number.\n    >>> first_Digit(123)\n    1\n    >>> first_Digit(456)\n    4\n    >>> first_Digit(12)\n    1\n    \"\"\"\n    ", "canonical_solution": "def first_Digit(n) :  \r\n    while n >= 10:  \r\n        n = n / 10; \r\n    return int(n) ", "test": "def check(candidate):\n\tassert first_Digit(123) == 1\n\tassert first_Digit(456) == 4\n\tassert first_Digit(12) == 1", "entry_point": "first_Digit"}
{"task_id": 469, "prompt": "def get_max_occuring_char(str1):\n    \"\"\"\n    Write a python function to find the maximum occurring character in a given string.\n    >>> get_max_occuring_char('data')\n    'a'\n    >>> get_max_occuring_char('create')\n    'e'\n    >>> get_max_occuring_char('brilliant girl')\n    'i'\n    \"\"\"\n    ", "canonical_solution": "def get_max_occuring_char(str1):\r\n  ASCII_SIZE = 256\r\n  ctr = [0] * ASCII_SIZE\r\n  max = -1\r\n  ch = ''\r\n  for i in str1:\r\n    ctr[ord(i)]+=1;\r\n  for i in str1:\r\n    if max < ctr[ord(i)]:\r\n      max = ctr[ord(i)]\r\n      ch = i\r\n  return ch", "test": "def check(candidate):\n\tassert get_max_occuring_char(\"data\") == \"a\"\n\tassert get_max_occuring_char(\"create\") == \"e\"\n\tassert get_max_occuring_char(\"brilliant girl\") == \"i\"", "entry_point": "get_max_occuring_char"}
{"task_id": 470, "prompt": "def is_subset_sum(set, n, sum):\n    \"\"\"\n    Write a function to determine if there is a subset of the given set with sum equal to the given sum.\n    >>> is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9)\n    True\n    >>> is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30)\n    False\n    >>> is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15)\n    True\n    \"\"\"\n    ", "canonical_solution": "def is_subset_sum(set, n, sum):\r\n\tif (sum == 0):\r\n\t\treturn True\r\n\tif (n == 0):\r\n\t\treturn False\r\n\tif (set[n - 1] > sum):\r\n\t\treturn is_subset_sum(set, n - 1, sum)\r\n\treturn is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])", "test": "def check(candidate):\n\tassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\n\tassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False\n\tassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True", "entry_point": "is_subset_sum"}
{"task_id": 471, "prompt": "def match(text):\n    \"\"\"\n    Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\n    >>> match('Geeks')\n    'Yes'\n    >>> match('geeksforGeeks')\n    'Yes'\n    >>> match('geeks')\n    'No'\n    \"\"\"\n    ", "canonical_solution": "import re \r\ndef match(text): \r\n\t\tpattern = '[A-Z]+[a-z]+$'\r\n\t\tif re.search(pattern, text): \r\n\t\t\t\treturn('Yes') \r\n\t\telse: \r\n\t\t\t\treturn('No') ", "test": "def check(candidate):\n\tassert match(\"Geeks\") == 'Yes'\n\tassert match(\"geeksforGeeks\") == 'Yes'\n\tassert match(\"geeks\") == 'No'", "entry_point": "match"}
{"task_id": 472, "prompt": "def first_Factorial_Divisible_Number(x):\n    \"\"\"\n    Write a python function to find the first natural number whose factorial is divisible by x.\n    >>> first_Factorial_Divisible_Number(10)\n    5\n    >>> first_Factorial_Divisible_Number(15)\n    5\n    >>> first_Factorial_Divisible_Number(5)\n    4\n    \"\"\"\n    ", "canonical_solution": "def first_Factorial_Divisible_Number(x): \r\n    i = 1;\r\n    fact = 1; \r\n    for i in range(1,x): \r\n        fact = fact * i \r\n        if (fact % x == 0): \r\n            break\r\n    return i ", "test": "def check(candidate):\n\tassert first_Factorial_Divisible_Number(10) == 5\n\tassert first_Factorial_Divisible_Number(15) == 5\n\tassert first_Factorial_Divisible_Number(5) == 4", "entry_point": "first_Factorial_Divisible_Number"}
{"task_id": 473, "prompt": "def remove_matching_tuple(test_list1, test_list2):\n    \"\"\"\n    Write a function to remove the matching tuples from the given two tuples.\n    >>> remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')])\n    [('you', '?')]\n    >>> remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')])\n    [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]\n    >>> remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')])\n    [('Its', 'been'), ('day', 'without')]\n    \"\"\"\n    ", "canonical_solution": "def remove_matching_tuple(test_list1, test_list2):\r\n  res = [sub for sub in test_list1 if sub not in test_list2]\r\n  return (res) ", "test": "def check(candidate):\n\tassert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\n\tassert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]\n\tassert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]", "entry_point": "remove_matching_tuple"}
{"task_id": 474, "prompt": "def largest_palindrome(A, n):\n    \"\"\"\n    Write a function to find the largest palindromic number in the given array.\n    >>> largest_palindrome([1, 232, 54545, 999991], 4)\n    54545\n    >>> largest_palindrome([1, 2, 3, 4, 5, 50], 6)\n    5\n    >>> largest_palindrome([1, 3, 7, 9, 45], 5)\n    9\n    \"\"\"\n    ", "canonical_solution": "def is_palindrome(n) : \r\n\tdivisor = 1\r\n\twhile (n / divisor >= 10) : \r\n\t\tdivisor *= 10\r\n\twhile (n != 0) : \r\n\t\tleading = n // divisor \r\n\t\ttrailing = n % 10\r\n\t\tif (leading != trailing) : \r\n\t\t\treturn False\r\n\t\tn = (n % divisor) // 10\r\n\t\tdivisor = divisor // 100\r\n\treturn True\r\ndef largest_palindrome(A, n) : \r\n\tA.sort() \r\n\tfor i in range(n - 1, -1, -1) : \r\n\t\tif (is_palindrome(A[i])) : \r\n\t\t\treturn A[i] \r\n\treturn -1", "test": "def check(candidate):\n\tassert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\n\tassert largest_palindrome([1, 2, 3, 4, 5, 50], 6) == 5\n\tassert largest_palindrome([1, 3, 7, 9, 45], 5)  == 9", "entry_point": "largest_palindrome"}
{"task_id": 475, "prompt": "def binomial_probability(n, k, p):\n    \"\"\"\n    Write a function to compute binomial probability for the given number.\n    >>> binomial_probability(10, 5, (1.0 / 3))\n    0.13656454808718185\n    >>> binomial_probability(11, 6, (2.0 / 4))\n    0.2255859375\n    >>> binomial_probability(12, 7, (3.0 / 5))\n    0.227030335488\n    \"\"\"\n    ", "canonical_solution": "def nCr(n, r): \r\n\tif (r > n / 2): \r\n\t\tr = n - r \r\n\tanswer = 1 \r\n\tfor i in range(1, r + 1): \r\n\t\tanswer *= (n - r + i) \r\n\t\tanswer /= i \r\n\treturn answer \r\ndef binomial_probability(n, k, p): \r\n\treturn (nCr(n, k) * pow(p, k) *\tpow(1 - p, n - k)) ", "test": "def check(candidate):\n\tassert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\n\tassert binomial_probability(11, 6, 2.0/4) == 0.2255859375\n\tassert binomial_probability(12, 7, 3.0/5) == 0.227030335488", "entry_point": "binomial_probability"}
{"task_id": 476, "prompt": "def sort_tuple(tup):\n    \"\"\"\n    Write a function to sort a list of tuples in increasing order by the last element in each tuple.\n    >>> sort_tuple([(1, 3), (3, 2), (2, 1)])\n    [(2, 1), (3, 2), (1, 3)]\n    >>> sort_tuple([(2, 4), (3, 3), (1, 1)])\n    [(1, 1), (3, 3), (2, 4)]\n    >>> sort_tuple([(3, 9), (6, 7), (4, 3)])\n    [(4, 3), (6, 7), (3, 9)]\n    \"\"\"\n    ", "canonical_solution": "def sort_tuple(tup): \r\n\tlst = len(tup) \r\n\tfor i in range(0, lst): \r\n\t\tfor j in range(0, lst-i-1): \r\n\t\t\tif (tup[j][-1] > tup[j + 1][-1]): \r\n\t\t\t\ttemp = tup[j] \r\n\t\t\t\ttup[j]= tup[j + 1] \r\n\t\t\t\ttup[j + 1]= temp \r\n\treturn tup", "test": "def check(candidate):\n\tassert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\n\tassert sort_tuple([(2, 4), (3, 3), (1, 1)] ) == [(1, 1), (3, 3), (2, 4)]\n\tassert sort_tuple([(3, 9), (6, 7), (4, 3)] ) == [(4, 3), (6, 7), (3, 9)]", "entry_point": "sort_tuple"}
{"task_id": 477, "prompt": "def area_pentagon(a):\n    \"\"\"\n    Write a function to find the area of a pentagon.\n    >>> area_pentagon(5)\n    43.01193501472417\n    >>> area_pentagon(10)\n    172.0477400588967\n    >>> area_pentagon(15)\n    387.10741513251753\n    \"\"\"\n    ", "canonical_solution": "import math\r\ndef area_pentagon(a):\r\n  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0\r\n  return area", "test": "def check(candidate):\n\tassert area_pentagon(5)==43.01193501472417\n\tassert area_pentagon(10)==172.0477400588967\n\tassert area_pentagon(15)==387.10741513251753", "entry_point": "area_pentagon"}
{"task_id": 478, "prompt": "def frequency_Of_Largest(n, arr):\n    \"\"\"\n    Write a python function to find the frequency of the largest value in a given array.\n    >>> frequency_Of_Largest(5, [1, 2, 3, 4, 4])\n    2\n    >>> frequency_Of_Largest(3, [5, 6, 5])\n    1\n    >>> frequency_Of_Largest(4, [2, 7, 7, 7])\n    3\n    \"\"\"\n    ", "canonical_solution": "def frequency_Of_Largest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] >mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq ", "test": "def check(candidate):\n\tassert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\n\tassert frequency_Of_Largest(3,[5,6,5]) == 1\n\tassert frequency_Of_Largest(4,[2,7,7,7]) == 3", "entry_point": "frequency_Of_Largest"}
{"task_id": 479, "prompt": "def extract_symmetric(test_list):\n    \"\"\"\n    Write a function to extract all the pairs which are symmetric in the given tuple list.\n    >>> extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)])\n    {(8, 9), (6, 7)}\n    >>> extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)])\n    {(9, 10), (7, 8)}\n    >>> extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)])\n    {(8, 9), (10, 11)}\n    \"\"\"\n    ", "canonical_solution": "def extract_symmetric(test_list):\r\n  temp = set(test_list) & {(b, a) for a, b in test_list}\r\n  res = {(a, b) for a, b in temp if a < b}\r\n  return (res) ", "test": "def check(candidate):\n\tassert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\n\tassert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}\n\tassert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}", "entry_point": "extract_symmetric"}
{"task_id": 480, "prompt": "def sum_gp(a, n, r):\n    \"\"\"\n    Write a function to find the sum of geometric progression series.\n    >>> sum_gp(1, 5, 2)\n    31\n    >>> sum_gp(1, 5, 4)\n    341\n    >>> sum_gp(2, 6, 3)\n    728\n    \"\"\"\n    ", "canonical_solution": "import math\r\ndef sum_gp(a,n,r):\r\n total = (a * (1 - math.pow(r, n ))) / (1- r)\r\n return total", "test": "def check(candidate):\n\tassert sum_gp(1,5,2)==31\n\tassert sum_gp(1,5,4)==341\n\tassert sum_gp(2,6,3)==728", "entry_point": "sum_gp"}
{"task_id": 481, "prompt": "def binary_search(item_list, item):\n    \"\"\"\n    Write a function to search an element in the given array by using binary search.\n    >>> binary_search([1, 2, 3, 5, 8], 6)\n    False\n    >>> binary_search([7, 8, 9, 10, 13], 10)\n    True\n    >>> binary_search([11, 13, 14, 19, 22, 36], 23)\n    False\n    \"\"\"\n    ", "canonical_solution": "def binary_search(item_list,item):\r\n\tfirst = 0\r\n\tlast = len(item_list)-1\r\n\tfound = False\r\n\twhile( first<=last and not found):\r\n\t\tmid = (first + last)//2\r\n\t\tif item_list[mid] == item :\r\n\t\t\tfound = True\r\n\t\telse:\r\n\t\t\tif item < item_list[mid]:\r\n\t\t\t\tlast = mid - 1\r\n\t\t\telse:\r\n\t\t\t\tfirst = mid + 1\t\r\n\treturn found", "test": "def check(candidate):\n\tassert binary_search([1,2,3,5,8], 6) == False\n\tassert binary_search([7, 8, 9, 10, 13], 10) == True\n\tassert binary_search([11, 13, 14, 19, 22, 36], 23) == False", "entry_point": "binary_search"}
{"task_id": 482, "prompt": "def calculate_polygons(startx, starty, endx, endy, radius):\n    \"\"\"\n    Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\n    >>> calculate_polygons(1, 1, 4, 4, 3)\n    [[((- 5.0), (- 4.196152422706632)), ((- 5.0), (- 0.7320508075688767)), ((- 2.0), 1.0), (1.0, (- 0.7320508075688767)), (1.0, (- 4.196152422706632)), ((- 2.0), (- 5.928203230275509)), ((- 5.0), (- 4.196152422706632))], [(1.0, (- 4.196152422706632)), (1.0, (- 0.7320508075688767)), (4.0, 1.0), (7.0, (- 0.7320508075688767)), (7.0, (- 4.196152422706632)), (4.0, (- 5.928203230275509)), (1.0, (- 4.196152422706632))], [(7.0, (- 4.196152422706632)), (7.0, (- 0.7320508075688767)), (10.0, 1.0), (13.0, (- 0.7320508075688767)), (13.0, (- 4.196152422706632)), (10.0, (- 5.928203230275509)), (7.0, (- 4.196152422706632))], [((- 2.0), 1.0000000000000004), ((- 2.0), 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, (- 0.7320508075688767)), ((- 2.0), 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, (- 0.7320508075688767)), (4.0, 1.0000000000000004)], [((- 5.0), 6.196152422706632), ((- 5.0), 9.660254037844387), ((- 2.0), 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), ((- 2.0), 4.464101615137755), ((- 5.0), 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [((- 2.0), 11.392304845413264), ((- 2.0), 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), ((- 2.0), 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n    >>> calculate_polygons(5, 4, 7, 9, 8)\n    [[((- 11.0), (- 9.856406460551018)), ((- 11.0), (- 0.6188021535170058)), ((- 3.0), 4.0), (5.0, (- 0.6188021535170058)), (5.0, (- 9.856406460551018)), ((- 3.0), (- 14.475208614068023)), ((- 11.0), (- 9.856406460551018))], [(5.0, (- 9.856406460551018)), (5.0, (- 0.6188021535170058)), (13.0, 4.0), (21.0, (- 0.6188021535170058)), (21.0, (- 9.856406460551018)), (13.0, (- 14.475208614068023)), (5.0, (- 9.856406460551018))], [(21.0, (- 9.856406460551018)), (21.0, (- 0.6188021535170058)), (29.0, 4.0), (37.0, (- 0.6188021535170058)), (37.0, (- 9.856406460551018)), (29.0, (- 14.475208614068023)), (21.0, (- 9.856406460551018))], [((- 3.0), 4.0), ((- 3.0), 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, (- 0.6188021535170058)), ((- 3.0), 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, (- 0.6188021535170058)), (13.0, 4.0)], [((- 11.0), 17.856406460551018), ((- 11.0), 27.09401076758503), ((- 3.0), 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), ((- 3.0), 13.237604307034012), ((- 11.0), 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [((- 3.0), 31.712812921102035), ((- 3.0), 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), ((- 3.0), 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]\n    >>> calculate_polygons(9, 6, 4, 3, 2)\n    [[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]\n    \"\"\"\n    ", "canonical_solution": "import math\r\ndef calculate_polygons(startx, starty, endx, endy, radius):\r\n    sl = (2 * radius) * math.tan(math.pi / 6)\r\n    p = sl * 0.5\r\n    b = sl * math.cos(math.radians(30))\r\n    w = b * 2\r\n    h = 2 * sl   \r\n    startx = startx - w\r\n    starty = starty - h\r\n    endx = endx + w\r\n    endy = endy + h\r\n    origx = startx\r\n    origy = starty\r\n    xoffset = b\r\n    yoffset = 3 * p\r\n    polygons = []\r\n    row = 1\r\n    counter = 0\r\n    while starty < endy:\r\n        if row % 2 == 0:\r\n            startx = origx + xoffset\r\n        else:\r\n            startx = origx\r\n        while startx < endx:\r\n            p1x = startx\r\n            p1y = starty + p\r\n            p2x = startx\r\n            p2y = starty + (3 * p)\r\n            p3x = startx + b\r\n            p3y = starty + h\r\n            p4x = startx + w\r\n            p4y = starty + (3 * p)\r\n            p5x = startx + w\r\n            p5y = starty + p\r\n            p6x = startx + b\r\n            p6y = starty\r\n            poly = [\r\n                (p1x, p1y),\r\n                (p2x, p2y),\r\n                (p3x, p3y),\r\n                (p4x, p4y),\r\n                (p5x, p5y),\r\n                (p6x, p6y),\r\n                (p1x, p1y)]\r\n            polygons.append(poly)\r\n            counter += 1\r\n            startx += w\r\n        starty += yoffset\r\n        row += 1\r\n    return polygons", "test": "def check(candidate):\n\tassert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\n\tassert calculate_polygons(5,4,7,9,8)==[[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]\n\tassert calculate_polygons(9,6,4,3,2)==[[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]", "entry_point": "calculate_polygons"}
{"task_id": 483, "prompt": "def binary_to_integer(test_tup):\n    \"\"\"\n    Write a function to convert the given binary tuple to integer.\n    >>> binary_to_integer((1, 1, 0, 1, 0, 0, 1))\n    '105'\n    >>> binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1))\n    '101'\n    >>> binary_to_integer((1, 1, 0, 1, 0, 1))\n    '53'\n    \"\"\"\n    ", "canonical_solution": "def binary_to_integer(test_tup):\r\n  res = int(\"\".join(str(ele) for ele in test_tup), 2)\r\n  return (str(res)) ", "test": "def check(candidate):\n\tassert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\n\tassert binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)) == '101'\n\tassert binary_to_integer((1, 1, 0, 1, 0, 1)) == '53'", "entry_point": "binary_to_integer"}
{"task_id": 484, "prompt": "def remove_lowercase(str1):\n    \"\"\"\n    Write a function to remove lowercase substrings from a given string by using regex.\n    >>> remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf')\n    'KDALOOOHLAJSI'\n    >>> remove_lowercase('ProducTnamEstreAmIngMediAplAYer')\n    'PTEAIMAAY'\n    >>> remove_lowercase('maNufacTuredbYSheZenTechNolOGIes')\n    'NTYSZTNOGI'\n    \"\"\"\n    ", "canonical_solution": "import re\r\ndef remove_lowercase(str1):\r\n  remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n  result =  remove_lower(str1)\r\n  return (result)", "test": "def check(candidate):\n\tassert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\n\tassert remove_lowercase('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY'\n\tassert remove_lowercase('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI'", "entry_point": "remove_lowercase"}
{"task_id": 485, "prompt": "def heap_queue_smallest(nums, n):\n    \"\"\"\n    Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.\n    >>> heap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 25, 58], 3)\n    [14, 22, 25]\n    >>> heap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 25, 58], 2)\n    [14, 22]\n    >>> heap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 22, 58], 5)\n    [14, 22, 22, 25, 35]\n    \"\"\"\n    ", "canonical_solution": "import heapq as hq\r\ndef heap_queue_smallest(nums,n):\r\n  smallest_nums = hq.nsmallest(n, nums)\r\n  return smallest_nums", "test": "def check(candidate):\n\tassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \n\tassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)==[14, 22]\n\tassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35]", "entry_point": "heap_queue_smallest"}
{"task_id": 486, "prompt": "def surfacearea_cone(r, h):\n    \"\"\"\n    Write a function to find the surface area of a cone.\n    >>> surfacearea_cone(5, 12)\n    282.7433388230814\n    >>> surfacearea_cone(10, 15)\n    880.5179353159282\n    >>> surfacearea_cone(19, 17)\n    2655.923961165254\n    \"\"\"\n    ", "canonical_solution": "import math\r\ndef surfacearea_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  SA = math.pi * r * (r + l)\r\n  return SA", "test": "def check(candidate):\n\tassert surfacearea_cone(5,12)==282.7433388230814\n\tassert surfacearea_cone(10,15)==880.5179353159282\n\tassert surfacearea_cone(19,17)==2655.923961165254", "entry_point": "surfacearea_cone"}
{"task_id": 487, "prompt": "def gcd(x, y):\n    \"\"\"\n    Write a python function to find gcd of two positive integers.\n    >>> gcd(12, 17)\n    1\n    >>> gcd(4, 6)\n    2\n    >>> gcd(2, 9)\n    1\n    \"\"\"\n    ", "canonical_solution": "def gcd(x, y):\r\n    gcd = 1\r\n    if x % y == 0:\r\n        return y\r\n    for k in range(int(y / 2), 0, -1):\r\n        if x % k == 0 and y % k == 0:\r\n            gcd = k\r\n            break  \r\n    return gcd", "test": "def check(candidate):\n\tassert gcd(12, 17) == 1\n\tassert gcd(4,6) == 2\n\tassert gcd(2,9) == 1", "entry_point": "gcd"}
{"task_id": 488, "prompt": "def diameter_circle(r):\n    \"\"\"\n    Write a function to find the diameter of a circle.\n    >>> diameter_circle(10)\n    20\n    >>> diameter_circle(40)\n    80\n    >>> diameter_circle(15)\n    30\n    \"\"\"\n    ", "canonical_solution": "def diameter_circle(r):\r\n  diameter=2*r\r\n  return diameter", "test": "def check(candidate):\n\tassert diameter_circle(10)==20\n\tassert diameter_circle(40)==80\n\tassert diameter_circle(15)==30", "entry_point": "diameter_circle"}
{"task_id": 489, "prompt": "def concatenate_elements(list):\n    \"\"\"\n    Write a function to concatenate all elements of the given list into a string.\n    >>> concatenate_elements(['hello', 'there', 'have', 'a', 'rocky', 'day'])\n    '  hello there have a rocky day'\n    >>> concatenate_elements(['Hi', 'there', 'How', 'are', 'you'])\n    '  Hi there How are you'\n    >>> concatenate_elements(['Part', 'of', 'the', 'journey', 'is', 'end'])\n    '  Part of the journey is end'\n    \"\"\"\n    ", "canonical_solution": "def concatenate_elements(list):\r\n  ans = ' '\r\n  for i in list:\r\n    ans = ans+ ' '+i\r\n  return (ans) ", "test": "def check(candidate):\n\tassert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\n\tassert concatenate_elements([ 'Hi', 'there', 'How','are', 'you'] ) == '  Hi there How are you'\n\tassert concatenate_elements([ 'Part', 'of', 'the','journey', 'is', 'end'] ) == '  Part of the journey is end'", "entry_point": "concatenate_elements"}
{"task_id": 490, "prompt": "def num_comm_div(x, y):\n    \"\"\"\n    Write a python function to find common divisor between two numbers in a given pair.\n    >>> num_comm_div(2, 4)\n    2\n    >>> num_comm_div(2, 8)\n    2\n    >>> num_comm_div(12, 24)\n    6\n    \"\"\"\n    ", "canonical_solution": "def ngcd(x,y):\r\n    i=1\r\n    while(i<=x and i<=y):\r\n        if(x%i==0 and y%i == 0):\r\n            gcd=i;\r\n        i+=1\r\n    return gcd;\r\ndef num_comm_div(x,y):\r\n  n = ngcd(x,y)\r\n  result = 0\r\n  z = int(n**0.5)\r\n  i = 1\r\n  while(i <= z):\r\n    if(n % i == 0):\r\n      result += 2 \r\n      if(i == n/i):\r\n        result-=1\r\n    i+=1\r\n  return result", "test": "def check(candidate):\n\tassert num_comm_div(2,4) == 2\n\tassert num_comm_div(2,8) == 2\n\tassert num_comm_div(12,24) == 6", "entry_point": "num_comm_div"}
{"task_id": 491, "prompt": "def find(n, m):\n    \"\"\"\n    Write a python function to find remainder of two numbers.\n    >>> find(3, 3)\n    0\n    >>> find(10, 3)\n    1\n    >>> find(16, 5)\n    1\n    \"\"\"\n    ", "canonical_solution": "def find(n,m):\r\n  r = n%m\r\n  return (r)", "test": "def check(candidate):\n\tassert find(3,3) == 0\n\tassert find(10,3) == 1\n\tassert find(16,5) == 1", "entry_point": "find"}
{"task_id": 492, "prompt": "def add_consecutive_nums(nums):\n    \"\"\"\n    Write a function to add consecutive numbers of a given list.\n    >>> add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])\n    [2, 4, 7, 8, 9, 11, 13]\n    >>> add_consecutive_nums([4, 5, 8, 9, 6, 10])\n    [9, 13, 17, 15, 16]\n    >>> add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    [3, 5, 7, 9, 11, 13, 15, 17, 19]\n    \"\"\"\n    ", "canonical_solution": "def add_consecutive_nums(nums):\r\n    result = [b+a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result", "test": "def check(candidate):\n\tassert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\n\tassert add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]\n\tassert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]", "entry_point": "add_consecutive_nums"}
{"task_id": 493, "prompt": "def sum_Of_Series(n):\n    \"\"\"\n    Write a python function to find the cube sum of first n natural numbers.\n    >>> sum_Of_Series(5)\n    225\n    >>> sum_Of_Series(2)\n    9\n    >>> sum_Of_Series(3)\n    36\n    \"\"\"\n    ", "canonical_solution": "def sum_Of_Series(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += i * i*i       \r\n    return sum", "test": "def check(candidate):\n\tassert sum_Of_Series(5) == 225\n\tassert sum_Of_Series(2) == 9\n\tassert sum_Of_Series(3) == 36", "entry_point": "sum_Of_Series"}
{"task_id": 494, "prompt": "def re_order(A):\n    \"\"\"\n    Write a function to move all zeroes to the end of the given array.\n    >>> re_order([6, 0, 8, 2, 3, 0, 4, 0, 1])\n    [6, 8, 2, 3, 4, 1, 0, 0, 0]\n    >>> re_order([4, 0, 2, 7, 0, 9, 0, 12, 0])\n    [4, 2, 7, 9, 12, 0, 0, 0, 0]\n    >>> re_order([3, 11, 0, 74, 14, 0, 1, 0, 2])\n    [3, 11, 74, 14, 1, 2, 0, 0, 0]\n    \"\"\"\n    ", "canonical_solution": "def re_order(A):\r\n    k = 0\r\n    for i in A:\r\n        if i:\r\n            A[k] = i\r\n            k = k + 1\r\n    for i in range(k, len(A)):\r\n        A[i] = 0\r\n    return A", "test": "def check(candidate):\n\tassert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\n\tassert re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0]\n\tassert re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0]", "entry_point": "re_order"}
{"task_id": 495, "prompt": "def permutation_coefficient(n, k):\n    \"\"\"\n    Write a function to calculate the permutation coefficient of given p(n, k).\n    >>> permutation_coefficient(10, 2)\n    90\n    >>> permutation_coefficient(10, 3)\n    720\n    >>> permutation_coefficient(10, 1)\n    10\n    \"\"\"\n    ", "canonical_solution": "def permutation_coefficient(n, k): \r\n\tP = [[0 for i in range(k + 1)] \r\n\t\t\tfor j in range(n + 1)] \r\n\tfor i in range(n + 1): \r\n\t\tfor j in range(min(i, k) + 1): \r\n\t\t\tif (j == 0): \r\n\t\t\t\tP[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tP[i][j] = P[i - 1][j] + ( \r\n\t\t\t\t\t\tj * P[i - 1][j - 1]) \r\n\t\t\tif (j < k): \r\n\t\t\t\tP[i][j + 1] = 0\r\n\treturn P[n][k] ", "test": "def check(candidate):\n\tassert permutation_coefficient(10, 2) == 90\n\tassert permutation_coefficient(10, 3) == 720\n\tassert permutation_coefficient(10, 1) == 10", "entry_point": "permutation_coefficient"}
{"task_id": 496, "prompt": "def remove_words(list1, removewords):\n    \"\"\"\n    Write a function to remove specific words from a given list.\n    >>> remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'], ['white', 'orange'])\n    ['red', 'green', 'blue', 'black']\n    >>> remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'], ['black', 'orange'])\n    ['red', 'green', 'blue', 'white']\n    >>> remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'], ['blue', 'white'])\n    ['red', 'green', 'black', 'orange']\n    \"\"\"\n    ", "canonical_solution": "def remove_words(list1, removewords):\r\n    for word in list(list1):\r\n        if word in removewords:\r\n            list1.remove(word)\r\n    return list1  ", "test": "def check(candidate):\n\tassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\n\tassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])==['red', 'green', 'blue', 'white']\n\tassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])==['red', 'green', 'black', 'orange']", "entry_point": "remove_words"}
{"task_id": 497, "prompt": "def same_order(l1, l2):\n    \"\"\"\n    Write a function to check if the common elements between two given lists are in the same order or not.\n    >>> same_order(['red', 'green', 'black', 'orange'], ['red', 'pink', 'green', 'white', 'black'])\n    True\n    >>> same_order(['red', 'pink', 'green', 'white', 'black'], ['white', 'orange', 'pink', 'black'])\n    False\n    >>> same_order(['red', 'green', 'black', 'orange'], ['red', 'pink', 'green', 'white', 'black'])\n    True\n    \"\"\"\n    ", "canonical_solution": "def same_order(l1, l2):\r\n    common_elements = set(l1) & set(l2)\r\n    l1 = [e for e in l1 if e in common_elements]\r\n    l2 = [e for e in l2 if e in common_elements]\r\n    return l1 == l2", "test": "def check(candidate):\n\tassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\n\tassert same_order([\"red\",\"pink\",\"green\",\"white\",\"black\"],[\"white\",\"orange\",\"pink\",\"black\"])==False\n\tassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True", "entry_point": "same_order"}
{"task_id": 498, "prompt": "def average_Odd(n):\n    \"\"\"\n    Write a python function to find the average of odd numbers till a given odd number.\n    >>> average_Odd(9)\n    5\n    >>> average_Odd(5)\n    3\n    >>> average_Odd(11)\n    6\n    \"\"\"\n    ", "canonical_solution": "def average_Odd(n) : \r\n    if (n%2==0) : \r\n        return (\"Invalid Input\") \r\n        return -1 \r\n    sm =0\r\n    count =0\r\n    while (n>=1) : \r\n        count=count+1\r\n        sm = sm + n \r\n        n = n-2\r\n    return sm//count ", "test": "def check(candidate):\n\tassert average_Odd(9) == 5\n\tassert average_Odd(5) == 3\n\tassert average_Odd(11) == 6", "entry_point": "average_Odd"}
{"task_id": 499, "prompt": "def no_of_subsequences(arr, k):\n    \"\"\"\n    Write a function to find the number of subsequences having product smaller than k for the given non negative array.\n    >>> no_of_subsequences([1, 2, 3, 4], 10)\n    11\n    >>> no_of_subsequences([4, 8, 7, 2], 50)\n    9\n    >>> no_of_subsequences([5, 6, 7, 8], 15)\n    4\n    \"\"\"\n    ", "canonical_solution": "def no_of_subsequences(arr, k): \r\n\tn = len(arr) \r\n\tdp = [[0 for i in range(n + 1)] \r\n\t\t\tfor j in range(k + 1)] \r\n\tfor i in range(1, k + 1): \r\n\t\tfor j in range(1, n + 1): \r\n\t\t\tdp[i][j] = dp[i][j - 1] \r\n\t\t\tif arr[j - 1] <= i and arr[j - 1] > 0: \r\n\t\t\t\tdp[i][j] += dp[i // arr[j - 1]][j - 1] + 1\r\n\treturn dp[k][n]", "test": "def check(candidate):\n\tassert no_of_subsequences([1,2,3,4], 10) == 11\n\tassert no_of_subsequences([4,8,7,2], 50) == 9\n\tassert no_of_subsequences([5,6,7,8], 15) == 4", "entry_point": "no_of_subsequences"}
